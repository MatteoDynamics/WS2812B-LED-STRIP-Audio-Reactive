
RGB_WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013b70  0800c1a0  0800c1a0  0001c1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fd10  0801fd10  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801fd10  0801fd10  0002fd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fd18  0801fd18  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fd18  0801fd18  0002fd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fd1c  0801fd1c  0002fd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0801fd20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035f8  200001d8  0801fef8  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037d0  0801fef8  000337d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b3  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a66  00000000  00000000  000302bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a2  00000000  00000000  00048d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0004c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9e  00000000  00000000  0004db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a71e  00000000  00000000  0004eaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a642  00000000  00000000  000791c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109055  00000000  00000000  00093806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a30  00000000  00000000  0019c85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a328c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003378  00000000  00000000  001a32f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  001a6670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c188 	.word	0x0800c188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c188 	.word	0x0800c188

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <strlen>:
 8000330:	4603      	mov	r3, r0
 8000332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000336:	2a00      	cmp	r2, #0
 8000338:	d1fb      	bne.n	8000332 <strlen+0x2>
 800033a:	1a18      	subs	r0, r3, r0
 800033c:	3801      	subs	r0, #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b970 	b.w	8001000 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	460d      	mov	r5, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	460f      	mov	r7, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d14a      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0xe2>
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	b143      	cbz	r3, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d58:	f1c3 0220 	rsb	r2, r3, #32
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d62:	4317      	orrs	r7, r2
 8000d64:	409c      	lsls	r4, r3
 8000d66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6a:	fa1f f58c 	uxth.w	r5, ip
 8000d6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d72:	0c22      	lsrs	r2, r4, #16
 8000d74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d7c:	fb01 f005 	mul.w	r0, r1, r5
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x62>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d8c:	f080 811c 	bcs.w	8000fc8 <__udivmoddi4+0x290>
 8000d90:	4290      	cmp	r0, r2
 8000d92:	f240 8119 	bls.w	8000fc8 <__udivmoddi4+0x290>
 8000d96:	3902      	subs	r1, #2
 8000d98:	4462      	add	r2, ip
 8000d9a:	1a12      	subs	r2, r2, r0
 8000d9c:	b2a4      	uxth	r4, r4
 8000d9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x90>
 8000db2:	eb1c 0404 	adds.w	r4, ip, r4
 8000db6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dba:	f080 8107 	bcs.w	8000fcc <__udivmoddi4+0x294>
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	f240 8104 	bls.w	8000fcc <__udivmoddi4+0x294>
 8000dc4:	4464      	add	r4, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xbc>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80ed 	beq.w	8000fc2 <__udivmoddi4+0x28a>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d149      	bne.n	8000e90 <__udivmoddi4+0x158>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	d302      	bcc.n	8000e06 <__udivmoddi4+0xce>
 8000e00:	4282      	cmp	r2, r0
 8000e02:	f200 80f8 	bhi.w	8000ff6 <__udivmoddi4+0x2be>
 8000e06:	1a84      	subs	r4, r0, r2
 8000e08:	eb65 0203 	sbc.w	r2, r5, r3
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4617      	mov	r7, r2
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d0e2      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e14:	e9c6 4700 	strd	r4, r7, [r6]
 8000e18:	e7df      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xe6>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f382 	clz	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x210>
 8000e28:	1a8a      	subs	r2, r1, r2
 8000e2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2e:	fa1f fe8c 	uxth.w	lr, ip
 8000e32:	2101      	movs	r1, #1
 8000e34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e38:	fb07 2015 	mls	r0, r7, r5, r2
 8000e3c:	0c22      	lsrs	r2, r4, #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb0e f005 	mul.w	r0, lr, r5
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x122>
 8000e54:	4290      	cmp	r0, r2
 8000e56:	f200 80cb 	bhi.w	8000ff0 <__udivmoddi4+0x2b8>
 8000e5a:	4645      	mov	r5, r8
 8000e5c:	1a12      	subs	r2, r2, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e64:	fb07 2210 	mls	r2, r7, r0, r2
 8000e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x14e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e7c:	d202      	bcs.n	8000e84 <__udivmoddi4+0x14c>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	f200 80bb 	bhi.w	8000ffa <__udivmoddi4+0x2c2>
 8000e84:	4610      	mov	r0, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8e:	e79f      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e90:	f1c1 0720 	rsb	r7, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea6:	40fd      	lsrs	r5, r7
 8000ea8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec4:	42a5      	cmp	r5, r4
 8000ec6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eca:	fa00 f001 	lsl.w	r0, r0, r1
 8000ece:	d90b      	bls.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed8:	f080 8088 	bcs.w	8000fec <__udivmoddi4+0x2b4>
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	f240 8085 	bls.w	8000fec <__udivmoddi4+0x2b4>
 8000ee2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee6:	4464      	add	r4, ip
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	b29d      	uxth	r5, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1da>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f08:	d26c      	bcs.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	d96a      	bls.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	4464      	add	r4, ip
 8000f12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f16:	fba3 9502 	umull	r9, r5, r3, r2
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	46c8      	mov	r8, r9
 8000f22:	46ae      	mov	lr, r5
 8000f24:	d356      	bcc.n	8000fd4 <__udivmoddi4+0x29c>
 8000f26:	d053      	beq.n	8000fd0 <__udivmoddi4+0x298>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x208>
 8000f2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40ca      	lsrs	r2, r1
 8000f38:	40cc      	lsrs	r4, r1
 8000f3a:	4317      	orrs	r7, r2
 8000f3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	f1c3 0120 	rsb	r1, r3, #32
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	fa20 f201 	lsr.w	r2, r0, r1
 8000f54:	fa25 f101 	lsr.w	r1, r5, r1
 8000f58:	409d      	lsls	r5, r3
 8000f5a:	432a      	orrs	r2, r5
 8000f5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f68:	fb07 1510 	mls	r5, r7, r0, r1
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f72:	fb00 f50e 	mul.w	r5, r0, lr
 8000f76:	428d      	cmp	r5, r1
 8000f78:	fa04 f403 	lsl.w	r4, r4, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x258>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f86:	d22f      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f88:	428d      	cmp	r5, r1
 8000f8a:	d92d      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1b49      	subs	r1, r1, r5
 8000f92:	b292      	uxth	r2, r2
 8000f94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f98:	fb07 1115 	mls	r1, r7, r5, r1
 8000f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa4:	4291      	cmp	r1, r2
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x282>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fb0:	d216      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	d914      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb6:	3d02      	subs	r5, #2
 8000fb8:	4462      	add	r2, ip
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fc0:	e738      	b.n	8000e34 <__udivmoddi4+0xfc>
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e708      	b.n	8000dda <__udivmoddi4+0xa2>
 8000fc8:	4639      	mov	r1, r7
 8000fca:	e6e6      	b.n	8000d9a <__udivmoddi4+0x62>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	e6fb      	b.n	8000dc8 <__udivmoddi4+0x90>
 8000fd0:	4548      	cmp	r0, r9
 8000fd2:	d2a9      	bcs.n	8000f28 <__udivmoddi4+0x1f0>
 8000fd4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	e7a3      	b.n	8000f28 <__udivmoddi4+0x1f0>
 8000fe0:	4645      	mov	r5, r8
 8000fe2:	e7ea      	b.n	8000fba <__udivmoddi4+0x282>
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e794      	b.n	8000f12 <__udivmoddi4+0x1da>
 8000fe8:	4640      	mov	r0, r8
 8000fea:	e7d1      	b.n	8000f90 <__udivmoddi4+0x258>
 8000fec:	46d0      	mov	r8, sl
 8000fee:	e77b      	b.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ff0:	3d02      	subs	r5, #2
 8000ff2:	4462      	add	r2, ip
 8000ff4:	e732      	b.n	8000e5c <__udivmoddi4+0x124>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e70a      	b.n	8000e10 <__udivmoddi4+0xd8>
 8000ffa:	4464      	add	r4, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e742      	b.n	8000e86 <__udivmoddi4+0x14e>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <MX_ADC1_Init+0xe8>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_ADC1_Init+0xe4>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_ADC1_Init+0xe4>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001046:	2204      	movs	r2, #4
 8001048:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC1_Init+0xe4>)
 800104c:	2200      	movs	r2, #0
 800104e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001052:	2200      	movs	r2, #0
 8001054:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001066:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_ADC1_Init+0xe4>)
 800106e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC1_Init+0xe4>)
 800107e:	2200      	movs	r2, #0
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_ADC1_Init+0xe4>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108a:	4817      	ldr	r0, [pc, #92]	; (80010e8 <MX_ADC1_Init+0xe4>)
 800108c:	f001 f99e 	bl	80023cc <HAL_ADC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001096:	f000 fb42 	bl	800171e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <MX_ADC1_Init+0xe4>)
 80010a6:	f002 f8e3 	bl	8003270 <HAL_ADCEx_MultiModeConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80010b0:	f000 fb35 	bl	800171e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_ADC1_Init+0xec>)
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2306      	movs	r3, #6
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c0:	237f      	movs	r3, #127	; 0x7f
 80010c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c4:	2304      	movs	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_ADC1_Init+0xe4>)
 80010d2:	f001 fb9b 	bl	800280c <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80010dc:	f000 fb1f 	bl	800171e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200001f4 	.word	0x200001f4
 80010ec:	50040000 	.word	0x50040000
 80010f0:	04300002 	.word	0x04300002

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ac      	sub	sp, #176	; 0xb0
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2288      	movs	r2, #136	; 0x88
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f008 f880 	bl	800921a <memset>
  if(adcHandle->Instance==ADC1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a3d      	ldr	r2, [pc, #244]	; (8001214 <HAL_ADC_MspInit+0x120>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d172      	bne.n	800120a <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001128:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800112a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800112e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800113a:	2308      	movs	r3, #8
 800113c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001146:	2302      	movs	r3, #2
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800114a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fc6b 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001160:	f000 fadd 	bl	800171e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <HAL_ADC_MspInit+0x124>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <HAL_ADC_MspInit+0x124>)
 800116a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800116e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <HAL_ADC_MspInit+0x124>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_ADC_MspInit+0x124>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_MspInit+0x124>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_ADC_MspInit+0x124>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800119a:	230b      	movs	r3, #11
 800119c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011aa:	4619      	mov	r1, r3
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <HAL_ADC_MspInit+0x128>)
 80011ae:	f002 fc19 	bl	80039e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0x130>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011e2:	2220      	movs	r2, #32
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 80011f0:	f002 fa00 	bl	80035f4 <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80011fa:	f000 fa90 	bl	800171e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 8001202:	64da      	str	r2, [r3, #76]	; 0x4c
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_ADC_MspInit+0x12c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	37b0      	adds	r7, #176	; 0xb0
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	50040000 	.word	0x50040000
 8001218:	40021000 	.word	0x40021000
 800121c:	48000800 	.word	0x48000800
 8001220:	20000258 	.word	0x20000258
 8001224:	40020008 	.word	0x40020008

08001228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_DMA_Init+0x48>)
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <MX_DMA_Init+0x48>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6493      	str	r3, [r2, #72]	; 0x48
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_DMA_Init+0x48>)
 800123c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	200b      	movs	r0, #11
 800124c:	f002 f99b 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001250:	200b      	movs	r0, #11
 8001252:	f002 f9b4 	bl	80035be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2010      	movs	r0, #16
 800125c:	f002 f993 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001260:	2010      	movs	r0, #16
 8001262:	f002 f9ac 	bl	80035be <HAL_NVIC_EnableIRQ>

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <MX_GPIO_Init+0xc4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a2a      	ldr	r2, [pc, #168]	; (8001338 <MX_GPIO_Init+0xc4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <MX_GPIO_Init+0xc4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a24      	ldr	r2, [pc, #144]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_GPIO_Init+0xc4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2120      	movs	r1, #32
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f002 fd21 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <MX_GPIO_Init+0xc8>)
 800130e:	f002 fb69 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001312:	2320      	movs	r3, #32
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f002 fb5a 	bl	80039e4 <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	48000800 	.word	0x48000800

08001340 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d102      	bne.n	8001354 <__io_putchar+0x14>
    __io_putchar('\r');
 800134e:	200d      	movs	r0, #13
 8001350:	f7ff fff6 	bl	8001340 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	2201      	movs	r2, #1
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <__io_putchar+0x2c>)
 800135e:	f005 fb37 	bl	80069d0 <HAL_UART_Transmit>

  return 1;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000338c 	.word	0x2000338c

08001370 <HAL_ADC_ConvCpltCallback>:
{
	__NOP();
}*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    for(int i=0; i<F_SIZE; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e002      	b.n	8001384 <HAL_ADC_ConvCpltCallback+0x14>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	dbf8      	blt.n	800137e <HAL_ADC_ConvCpltCallback+0xe>
    {
    	//fft_input[i] = (float)(fourier[i]*(3.3/4096));
    }
    data_ready = 1;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_ADC_ConvCpltCallback+0x30>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]

}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000aa0 	.word	0x20000aa0
 80013a4:	00000000 	.word	0x00000000

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b090      	sub	sp, #64	; 0x40
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f000 fd97 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f000 f963 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f7ff ff5d 	bl	8001274 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ba:	f7ff ff35 	bl	8001228 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013be:	f000 fc35 	bl	8001c2c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013c2:	f000 faeb 	bl	800199c <MX_TIM3_Init>
  MX_ADC1_Init();
 80013c6:	f7ff fe1d 	bl	8001004 <MX_ADC1_Init>
  MX_TIM6_Init();
 80013ca:	f000 fb5d 	bl	8001a88 <MX_TIM6_Init>

  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim3);
  //HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, &test, sizeof(test));
  /* USER CODE END 2 */
  ws2812b_init();
 80013ce:	f000 fcb9 	bl	8001d44 <ws2812b_init>
  //arm_rfft_fast_init_f32(&fftHandler, F_SIZE);
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)fourier, F_SIZE);
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	4998      	ldr	r1, [pc, #608]	; (8001638 <main+0x290>)
 80013d8:	4898      	ldr	r0, [pc, #608]	; (800163c <main+0x294>)
 80013da:	f001 f947 	bl	800266c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 80013de:	4898      	ldr	r0, [pc, #608]	; (8001640 <main+0x298>)
 80013e0:	f004 f83a 	bl	8005458 <HAL_TIM_Base_Start>


  while (1)
  {
	  /* write signal to array */
	     for (int i = 0; i < SAMPLE_BUFFER_LENGTH; i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013e8:	e07c      	b.n	80014e4 <main+0x13c>
	         float r = (float)i / (float)SAMPLING_RATE;
 80013ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f4:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001644 <main+0x29c>
 80013f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	         r *= 3.14159265359 * 2;
 8001400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001402:	f7ff f901 	bl	8000608 <__aeabi_f2d>
 8001406:	a38a      	add	r3, pc, #552	; (adr r3, 8001630 <main+0x288>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f954 	bl	80006b8 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fc26 	bl	8000c68 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
	         r *= 10000; // frequency in Hz
 8001420:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001424:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001648 <main+0x2a0>
 8001428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	         float s = sin(r) + sin(r * 4) * 0.5 + sin(r * 3) * 0.25;
 8001430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001432:	f7ff f8e9 	bl	8000608 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	ec43 2b10 	vmov	d0, r2, r3
 800143e:	f009 fe3f 	bl	800b0c0 <sin>
 8001442:	ec55 4b10 	vmov	r4, r5, d0
 8001446:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800144a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	ee17 0a90 	vmov	r0, s15
 8001456:	f7ff f8d7 	bl	8000608 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	ec43 2b10 	vmov	d0, r2, r3
 8001462:	f009 fe2d 	bl	800b0c0 <sin>
 8001466:	ec51 0b10 	vmov	r0, r1, d0
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b77      	ldr	r3, [pc, #476]	; (800164c <main+0x2a4>)
 8001470:	f7ff f922 	bl	80006b8 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ff66 	bl	800034c <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4614      	mov	r4, r2
 8001486:	461d      	mov	r5, r3
 8001488:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800148c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001494:	ee17 0a90 	vmov	r0, s15
 8001498:	f7ff f8b6 	bl	8000608 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	ec43 2b10 	vmov	d0, r2, r3
 80014a4:	f009 fe0c 	bl	800b0c0 <sin>
 80014a8:	ec51 0b10 	vmov	r0, r1, d0
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b67      	ldr	r3, [pc, #412]	; (8001650 <main+0x2a8>)
 80014b2:	f7ff f901 	bl	80006b8 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7fe ff45 	bl	800034c <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fbcd 	bl	8000c68 <__aeabi_d2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
	         fft_input[i] = s;
 80014d2:	4a60      	ldr	r2, [pc, #384]	; (8001654 <main+0x2ac>)
 80014d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	601a      	str	r2, [r3, #0]
	     for (int i = 0; i < SAMPLE_BUFFER_LENGTH; i++) {
 80014de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e0:	3301      	adds	r3, #1
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ea:	f6ff af7e 	blt.w	80013ea <main+0x42>
	     }
	    // if(data_ready)
	     //{
	    	 arm_rfft_fast_instance_f32 fft;
	    		     arm_rfft_fast_init_f32(&fft, SAMPLE_BUFFER_LENGTH);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f6:	4618      	mov	r0, r3
 80014f8:	f006 f82a 	bl	8007550 <arm_rfft_fast_init_f32>
	    		     arm_rfft_fast_f32(&fft, fft_input, fft_output, ifftFlag);
 80014fc:	4b56      	ldr	r3, [pc, #344]	; (8001658 <main+0x2b0>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	f107 000c 	add.w	r0, r7, #12
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <main+0x2b4>)
 8001506:	4953      	ldr	r1, [pc, #332]	; (8001654 <main+0x2ac>)
 8001508:	f006 f8a6 	bl	8007658 <arm_rfft_fast_f32>
	    		     arm_cmplx_mag_f32(fft_output, fft_power, SAMPLE_BUFFER_LENGTH_HALF);
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	4953      	ldr	r1, [pc, #332]	; (8001660 <main+0x2b8>)
 8001512:	4852      	ldr	r0, [pc, #328]	; (800165c <main+0x2b4>)
 8001514:	f006 fd0e 	bl	8007f34 <arm_cmplx_mag_f32>
	    		     float suma = 0;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
	    		     for (int i = 1; i < SAMPLE_BUFFER_LENGTH_HALF; i++) {
 800151e:	2301      	movs	r3, #1
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
 8001522:	e03a      	b.n	800159a <main+0x1f2>
	    		         /*printf("%i\tfrq: %.1f\tenergy %.6f\r\n", i, i * frequency_resolution, fft_power[i]);*/
	    		         if(i<20)
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	2b13      	cmp	r3, #19
 8001528:	dc0b      	bgt.n	8001542 <main+0x19a>
	    		         {
	    		         suma+=fft_power[i];
 800152a:	4a4d      	ldr	r2, [pc, #308]	; (8001660 <main+0x2b8>)
 800152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	    		         }
	    		         float32_t   maxValue;
	    		         uint16_t    maxIndex;
	    		         arm_max_f32(fft_power, SAMPLE_BUFFER_LENGTH_HALF, &maxValue, &maxIndex);
 8001542:	1dbb      	adds	r3, r7, #6
 8001544:	f107 0208 	add.w	r2, r7, #8
 8001548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154c:	4844      	ldr	r0, [pc, #272]	; (8001660 <main+0x2b8>)
 800154e:	f005 ff97 	bl	8007480 <arm_max_f32>
	    		         printf("max power: %f\r\n", maxValue);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f857 	bl	8000608 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4841      	ldr	r0, [pc, #260]	; (8001664 <main+0x2bc>)
 8001560:	f007 fe06 	bl	8009170 <iprintf>
	    		         printf("max index: %i\r\n", maxIndex);
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	4619      	mov	r1, r3
 8001568:	483f      	ldr	r0, [pc, #252]	; (8001668 <main+0x2c0>)
 800156a:	f007 fe01 	bl	8009170 <iprintf>
	    		         printf("frequency: %f\r\n", (maxIndex * frequency_resolution));
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001578:	4b3c      	ldr	r3, [pc, #240]	; (800166c <main+0x2c4>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001582:	ee17 0a90 	vmov	r0, s15
 8001586:	f7ff f83f 	bl	8000608 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4838      	ldr	r0, [pc, #224]	; (8001670 <main+0x2c8>)
 8001590:	f007 fdee 	bl	8009170 <iprintf>
	    		     for (int i = 1; i < SAMPLE_BUFFER_LENGTH_HALF; i++) {
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	3301      	adds	r3, #1
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a0:	dbc0      	blt.n	8001524 <main+0x17c>
	    		     /*for(int i=0; i <2; i++)
	    		     {
	    		     printf("2suma %f\n", suma);
	    		     //HAL_Delay(10);
	    		     }*/
	    		     if(suma>100)
 80015a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015a6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001674 <main+0x2cc>
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd3a      	ble.n	800162a <main+0x282>
	    		     	        	  {
	    		     	        		  uint8_t r = gamma8[rand() % 256];
 80015b4:	f007 f888 	bl	80086c8 <rand>
 80015b8:	4603      	mov	r3, r0
 80015ba:	425a      	negs	r2, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	bf58      	it	pl
 80015c2:	4253      	negpl	r3, r2
 80015c4:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <main+0x2d0>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    		     	        		  	  uint8_t g = gamma8[rand() % 256];
 80015cc:	f007 f87c 	bl	80086c8 <rand>
 80015d0:	4603      	mov	r3, r0
 80015d2:	425a      	negs	r2, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	bf58      	it	pl
 80015da:	4253      	negpl	r3, r2
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <main+0x2d0>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	    		     	        		  	  uint8_t b = gamma8[rand() % 256];
 80015e4:	f007 f870 	bl	80086c8 <rand>
 80015e8:	4603      	mov	r3, r0
 80015ea:	425a      	negs	r2, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	bf58      	it	pl
 80015f2:	4253      	negpl	r3, r2
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <main+0x2d0>)
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	    		     	        		      for (int led = 0; led < 24; led++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
 8001600:	e00d      	b.n	800161e <main+0x276>
	    		     	        		      {
	    		     	        		        ws2812b_set_color(led, r, g, b);
 8001602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001608:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800160c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001610:	f000 fc06 	bl	8001e20 <ws2812b_set_color>
	    		     	        		        ws2812b_update();
 8001614:	f000 fbc8 	bl	8001da8 <ws2812b_update>
	    		     	        		      for (int led = 0; led < 24; led++)
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	3301      	adds	r3, #1
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	2b17      	cmp	r3, #23
 8001622:	ddee      	ble.n	8001602 <main+0x25a>

	    		     	        		      }
	    		     	        		     HAL_Delay(10);
 8001624:	200a      	movs	r0, #10
 8001626:	f000 fcd7 	bl	8001fd8 <HAL_Delay>
  {
 800162a:	e6db      	b.n	80013e4 <main+0x3c>
 800162c:	f3af 8000 	nop.w
 8001630:	54442eea 	.word	0x54442eea
 8001634:	401921fb 	.word	0x401921fb
 8001638:	200002a0 	.word	0x200002a0
 800163c:	200001f4 	.word	0x200001f4
 8001640:	200032f8 	.word	0x200032f8
 8001644:	471c4000 	.word	0x471c4000
 8001648:	461c4000 	.word	0x461c4000
 800164c:	3fe00000 	.word	0x3fe00000
 8001650:	3fd00000 	.word	0x3fd00000
 8001654:	20000aa4 	.word	0x20000aa4
 8001658:	200032a4 	.word	0x200032a4
 800165c:	20001aa4 	.word	0x20001aa4
 8001660:	20002aa4 	.word	0x20002aa4
 8001664:	0800c1a0 	.word	0x0800c1a0
 8001668:	0800c1b0 	.word	0x0800c1b0
 800166c:	20000000 	.word	0x20000000
 8001670:	0800c1c0 	.word	0x0800c1c0
 8001674:	42c80000 	.word	0x42c80000
 8001678:	0800c1d0 	.word	0x0800c1d0

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b096      	sub	sp, #88	; 0x58
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2244      	movs	r2, #68	; 0x44
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f007 fdc5 	bl	800921a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800169e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016a2:	f002 fb6f 	bl	8003d84 <HAL_PWREx_ControlVoltageScaling>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016ac:	f000 f837 	bl	800171e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b0:	2302      	movs	r3, #2
 80016b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ba:	2310      	movs	r3, #16
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	2302      	movs	r3, #2
 80016c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c2:	2302      	movs	r3, #2
 80016c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016ca:	230a      	movs	r3, #10
 80016cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016ce:	2307      	movs	r3, #7
 80016d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fba6 	bl	8003e30 <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016ea:	f000 f818 	bl	800171e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f2:	2303      	movs	r3, #3
 80016f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	2104      	movs	r1, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f002 ff6e 	bl	80045e8 <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001712:	f000 f804 	bl	800171e <Error_Handler>
  }
}
 8001716:	bf00      	nop
 8001718:	3758      	adds	r7, #88	; 0x58
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001722:	b672      	cpsid	i
}
 8001724:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001726:	e7fe      	b.n	8001726 <Error_Handler+0x8>

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_MspInit+0x44>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <HAL_MspInit+0x44>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6613      	str	r3, [r2, #96]	; 0x60
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_MspInit+0x44>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_MspInit+0x44>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_MspInit+0x44>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 fbec 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ca:	f002 f82b 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000258 	.word	0x20000258

080017d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DMA1_Channel6_IRQHandler+0x10>)
 80017de:	f002 f821 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20003344 	.word	0x20003344

080017ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return 1;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_kill>:

int _kill(int pid, int sig)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001806:	f007 fd5b 	bl	80092c0 <__errno>
 800180a:	4603      	mov	r3, r0
 800180c:	2216      	movs	r2, #22
 800180e:	601a      	str	r2, [r3, #0]
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_exit>:

void _exit (int status)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ffe7 	bl	80017fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800182e:	e7fe      	b.n	800182e <_exit+0x12>

08001830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e00a      	b.n	8001858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001842:	f3af 8000 	nop.w
 8001846:	4601      	mov	r1, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf0      	blt.n	8001842 <_read+0x12>
  }

  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e009      	b.n	8001890 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	60ba      	str	r2, [r7, #8]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fd5b 	bl	8001340 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf1      	blt.n	800187c <_write+0x12>
  }
  return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_close>:

int _close(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ca:	605a      	str	r2, [r3, #4]
  return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_isatty>:

int _isatty(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f007 fcc0 	bl	80092c0 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20018000 	.word	0x20018000
 800196c:	00000400 	.word	0x00000400
 8001970:	200032a8 	.word	0x200032a8
 8001974:	200037d0 	.word	0x200037d0

08001978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <SystemInit+0x20>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <SystemInit+0x20>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <MX_TIM3_Init+0xe4>)
 80019d0:	4a2c      	ldr	r2, [pc, #176]	; (8001a84 <MX_TIM3_Init+0xe8>)
 80019d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <MX_TIM3_Init+0xe4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <MX_TIM3_Init+0xe4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <MX_TIM3_Init+0xe4>)
 80019e2:	2263      	movs	r2, #99	; 0x63
 80019e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <MX_TIM3_Init+0xe4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <MX_TIM3_Init+0xe4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019f2:	4823      	ldr	r0, [pc, #140]	; (8001a80 <MX_TIM3_Init+0xe4>)
 80019f4:	f003 fcd8 	bl	80053a8 <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019fe:	f7ff fe8e 	bl	800171e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <MX_TIM3_Init+0xe4>)
 8001a10:	f004 f920 	bl	8005c54 <HAL_TIM_ConfigClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a1a:	f7ff fe80 	bl	800171e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a1e:	4818      	ldr	r0, [pc, #96]	; (8001a80 <MX_TIM3_Init+0xe4>)
 8001a20:	f003 fd82 	bl	8005528 <HAL_TIM_PWM_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a2a:	f7ff fe78 	bl	800171e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4810      	ldr	r0, [pc, #64]	; (8001a80 <MX_TIM3_Init+0xe4>)
 8001a3e:	f004 fef1 	bl	8006824 <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a48:	f7ff fe69 	bl	800171e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4c:	2360      	movs	r3, #96	; 0x60
 8001a4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_TIM3_Init+0xe4>)
 8001a64:	f003 ffe2 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a6e:	f7ff fe56 	bl	800171e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <MX_TIM3_Init+0xe4>)
 8001a74:	f000 f8a4 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8001a78:	bf00      	nop
 8001a7a:	3738      	adds	r7, #56	; 0x38
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200032ac 	.word	0x200032ac
 8001a84:	40000400 	.word	0x40000400

08001a88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_TIM6_Init+0x64>)
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <MX_TIM6_Init+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aac:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_TIM6_Init+0x64>)
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aba:	f003 fc75 	bl	80053a8 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ac4:	f7ff fe2b 	bl	800171e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM6_Init+0x64>)
 8001ad6:	f004 fea5 	bl	8006824 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ae0:	f7ff fe1d 	bl	800171e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200032f8 	.word	0x200032f8
 8001af0:	40001000 	.word	0x40001000

08001af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <HAL_TIM_Base_MspInit+0xb8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d13c      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b20:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <HAL_TIM_Base_MspInit+0xc4>)
 8001b22:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b26:	2205      	movs	r2, #5
 8001b28:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b42:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001b56:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b58:	f001 fd4c 	bl	80035f4 <HAL_DMA_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8001b62:	f7ff fddc 	bl	800171e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_TIM_Base_MspInit+0xc0>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b7e:	e010      	b.n	8001ba2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM6)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_TIM_Base_MspInit+0xc8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10b      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	6593      	str	r3, [r2, #88]	; 0x58
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	20003344 	.word	0x20003344
 8001bb8:	4002006c 	.word	0x4002006c
 8001bbc:	40001000 	.word	0x40001000

08001bc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_TIM_MspPostInit+0x64>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d11c      	bne.n	8001c1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_TIM_MspPostInit+0x68>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_TIM_MspPostInit+0x68>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_TIM_MspPostInit+0x68>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bfa:	2340      	movs	r3, #64	; 0x40
 8001bfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c18:	f001 fee4 	bl	80039e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40021000 	.word	0x40021000

08001c2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <MX_USART2_UART_Init+0x5c>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_USART2_UART_Init+0x58>)
 8001c70:	f004 fe60 	bl	8006934 <HAL_UART_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c7a:	f7ff fd50 	bl	800171e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000338c 	.word	0x2000338c
 8001c88:	40004400 	.word	0x40004400

08001c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0ac      	sub	sp, #176	; 0xb0
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2288      	movs	r2, #136	; 0x88
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f007 fab4 	bl	800921a <memset>
  if(uartHandle->Instance==USART2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <HAL_UART_MspInit+0xb0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d13b      	bne.n	8001d34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 feb1 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cd4:	f7ff fd23 	bl	800171e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_UART_MspInit+0xb4>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_UART_MspInit+0xb4>)
 8001cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_UART_MspInit+0xb4>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_UART_MspInit+0xb4>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_UART_MspInit+0xb4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_UART_MspInit+0xb4>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d08:	230c      	movs	r3, #12
 8001d0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d20:	2307      	movs	r3, #7
 8001d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f001 fe58 	bl	80039e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d34:	bf00      	nop
 8001d36:	37b0      	adds	r7, #176	; 0xb0
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40004400 	.word	0x40004400
 8001d40:	40021000 	.word	0x40021000

08001d44 <ws2812b_init>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

void ws2812b_init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	e007      	b.n	8001d60 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8001d50:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <ws2812b_init+0x5c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b27      	cmp	r3, #39	; 0x27
 8001d64:	ddf4      	ble.n	8001d50 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e007      	b.n	8001d7c <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3328      	adds	r3, #40	; 0x28
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <ws2812b_init+0x5c>)
 8001d72:	2120      	movs	r1, #32
 8001d74:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8001d82:	dbf3      	blt.n	8001d6c <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 100;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <ws2812b_init+0x5c>)
 8001d86:	2264      	movs	r2, #100	; 0x64
 8001d88:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268

  HAL_TIM_Base_Start(&htim3);
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <ws2812b_init+0x60>)
 8001d8e:	f003 fb63 	bl	8005458 <HAL_TIM_Base_Start>
  ws2812b_update();
 8001d92:	f000 f809 	bl	8001da8 <ws2812b_update>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20003414 	.word	0x20003414
 8001da4:	200032ac 	.word	0x200032ac

08001da8 <ws2812b_update>:



void ws2812b_update(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8001dac:	f240 2369 	movw	r3, #617	; 0x269
 8001db0:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <ws2812b_update+0x18>)
 8001db2:	2100      	movs	r1, #0
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <ws2812b_update+0x1c>)
 8001db6:	f003 fc19 	bl	80055ec <HAL_TIM_PWM_Start_DMA>
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20003414 	.word	0x20003414
 8001dc4:	200032ac 	.word	0x200032ac

08001dc8 <set_byte>:
}



static void set_byte(uint32_t pos, uint8_t value)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e016      	b.n	8001e08 <set_byte+0x40>
    if (value & 0x80) {
 8001dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	da06      	bge.n	8001df0 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <set_byte+0x54>)
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	54d1      	strb	r1, [r2, r3]
 8001dee:	e005      	b.n	8001dfc <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <set_byte+0x54>)
 8001df8:	2120      	movs	r1, #32
 8001dfa:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b07      	cmp	r3, #7
 8001e0c:	dde5      	ble.n	8001dda <set_byte+0x12>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20003414 	.word	0x20003414

08001e20 <ws2812b_set_color>:



void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	70fb      	strb	r3, [r7, #3]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70bb      	strb	r3, [r7, #2]
 8001e36:	4613      	mov	r3, r2
 8001e38:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b17      	cmp	r3, #23
 8001e3e:	d820      	bhi.n	8001e82 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	3328      	adds	r3, #40	; 0x28
 8001e4c:	78ba      	ldrb	r2, [r7, #2]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ffb9 	bl	8001dc8 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	3330      	adds	r3, #48	; 0x30
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ffae 	bl	8001dc8 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	3338      	adds	r3, #56	; 0x38
 8001e78:	787a      	ldrb	r2, [r7, #1]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffa3 	bl	8001dc8 <set_byte>
	}
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff fd72 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <LoopForever+0xe>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	; (8001ed8 <LoopForever+0x16>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f007 fa07 	bl	80092cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ebe:	f7ff fa73 	bl	80013a8 <main>

08001ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec2:	e7fe      	b.n	8001ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ed0:	0801fd20 	.word	0x0801fd20
  ldr r2, =_sbss
 8001ed4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ed8:	200037d0 	.word	0x200037d0

08001edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC1_2_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_Init+0x3c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_Init+0x3c>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f001 fb3a 	bl	8003570 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 f80f 	bl	8001f20 <HAL_InitTick>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	71fb      	strb	r3, [r7, #7]
 8001f0c:	e001      	b.n	8001f12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f0e:	f7ff fc0b 	bl	8001728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f12:	79fb      	ldrb	r3, [r7, #7]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40022000 	.word	0x40022000

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_InitTick+0x6c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_InitTick+0x70>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_InitTick+0x6c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fb45 	bl	80035da <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d809      	bhi.n	8001f70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f001 fb0f 	bl	8003586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f68:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <HAL_InitTick+0x74>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e007      	b.n	8001f80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e004      	b.n	8001f80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e001      	b.n	8001f80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	20000004 	.word	0x20000004
 8001f94:	20000008 	.word	0x20000008

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	20003680 	.word	0x20003680

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20003680 	.word	0x20003680

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000000c 	.word	0x2000000c

08002020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3360      	adds	r3, #96	; 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LL_ADC_SetOffset+0x44>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	03fff000 	.word	0x03fff000

080020d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3360      	adds	r3, #96	; 0x60
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3330      	adds	r3, #48	; 0x30
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	4413      	add	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	211f      	movs	r1, #31
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	f003 011f 	and.w	r1, r3, #31
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	431a      	orrs	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3314      	adds	r3, #20
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	0e5b      	lsrs	r3, r3, #25
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0d1b      	lsrs	r3, r3, #20
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2107      	movs	r1, #7
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	401a      	ands	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	0d1b      	lsrs	r3, r3, #20
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002220:	43db      	mvns	r3, r3
 8002222:	401a      	ands	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0318 	and.w	r3, r3, #24
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <LL_ADC_SetChannelSingleDiff+0x44>)
 800222c:	40d9      	lsrs	r1, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	400b      	ands	r3, r1
 8002232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002236:	431a      	orrs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	0007ffff 	.word	0x0007ffff

08002250 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 031f 	and.w	r3, r3, #31
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800227c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6093      	str	r3, [r2, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a4:	d101      	bne.n	80022aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f4:	d101      	bne.n	80022fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <LL_ADC_IsEnabled+0x18>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <LL_ADC_IsEnabled+0x1a>
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002366:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d101      	bne.n	8002396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d101      	bne.n	80023bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e130      	b.n	8002648 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7fe fe7d 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff3f 	bl	8002290 <LL_ADC_IsDeepPowerDownEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff25 	bl	800226c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff5a 	bl	80022e0 <LL_ADC_IsInternalRegulatorEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff3e 	bl	80022b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800243c:	4b84      	ldr	r3, [pc, #528]	; (8002650 <HAL_ADC_Init+0x284>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	4a84      	ldr	r2, [pc, #528]	; (8002654 <HAL_ADC_Init+0x288>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002450:	e002      	b.n	8002458 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3b01      	subs	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f9      	bne.n	8002452 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff3c 	bl	80022e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff75 	bl	800237e <LL_ADC_REG_IsConversionOngoing>
 8002494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80c9 	bne.w	8002636 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80c5 	bne.w	8002636 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024b4:	f043 0202 	orr.w	r2, r3, #2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff35 	bl	8002330 <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d115      	bne.n	80024f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024cc:	4862      	ldr	r0, [pc, #392]	; (8002658 <HAL_ADC_Init+0x28c>)
 80024ce:	f7ff ff2f 	bl	8002330 <LL_ADC_IsEnabled>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4861      	ldr	r0, [pc, #388]	; (800265c <HAL_ADC_Init+0x290>)
 80024d6:	f7ff ff2b 	bl	8002330 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	431c      	orrs	r4, r3
 80024de:	4860      	ldr	r0, [pc, #384]	; (8002660 <HAL_ADC_Init+0x294>)
 80024e0:	f7ff ff26 	bl	8002330 <LL_ADC_IsEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4323      	orrs	r3, r4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4619      	mov	r1, r3
 80024f2:	485c      	ldr	r0, [pc, #368]	; (8002664 <HAL_ADC_Init+0x298>)
 80024f4:	f7ff fd94 	bl	8002020 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e5b      	ldrb	r3, [r3, #25]
 80024fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002502:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002508:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800250e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002516:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d106      	bne.n	8002534 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	3b01      	subs	r3, #1
 800252c:	045b      	lsls	r3, r3, #17
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_ADC_Init+0x29c>)
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	430b      	orrs	r3, r1
 8002562:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff1b 	bl	80023a4 <LL_ADC_INJ_IsConversionOngoing>
 800256e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d13d      	bne.n	80025f2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d13a      	bne.n	80025f2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002580:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002588:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	69b9      	ldr	r1, [r7, #24]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d118      	bne.n	80025e2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025d2:	430a      	orrs	r2, r1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	e007      	b.n	80025f2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10c      	bne.n	8002614 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f023 010f 	bic.w	r1, r3, #15
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
 8002612:	e007      	b.n	8002624 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020f 	bic.w	r2, r2, #15
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f023 0303 	bic.w	r3, r3, #3
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
 8002634:	e007      	b.n	8002646 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002646:	7ffb      	ldrb	r3, [r7, #31]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3724      	adds	r7, #36	; 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	20000004 	.word	0x20000004
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	50040000 	.word	0x50040000
 800265c:	50040100 	.word	0x50040100
 8002660:	50040200 	.word	0x50040200
 8002664:	50040300 	.word	0x50040300
 8002668:	fff0c007 	.word	0xfff0c007

0800266c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002678:	4853      	ldr	r0, [pc, #332]	; (80027c8 <HAL_ADC_Start_DMA+0x15c>)
 800267a:	f7ff fde9 	bl	8002250 <LL_ADC_GetMultimode>
 800267e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fe7a 	bl	800237e <LL_ADC_REG_IsConversionOngoing>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 8093 	bne.w	80027b8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_Start_DMA+0x34>
 800269c:	2302      	movs	r3, #2
 800269e:	e08e      	b.n	80027be <HAL_ADC_Start_DMA+0x152>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_ADC_Start_DMA+0x160>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d008      	beq.n	80026c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d002      	beq.n	80026c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b09      	cmp	r3, #9
 80026c2:	d172      	bne.n	80027aa <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fc93 	bl	8002ff0 <ADC_Enable>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d165      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a38      	ldr	r2, [pc, #224]	; (80027d0 <HAL_ADC_Start_DMA+0x164>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d002      	beq.n	80026f8 <HAL_ADC_Start_DMA+0x8c>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e000      	b.n	80026fa <HAL_ADC_Start_DMA+0x8e>
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_ADC_Start_DMA+0x168>)
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4293      	cmp	r3, r2
 8002700:	d002      	beq.n	8002708 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f023 0206 	bic.w	r2, r3, #6
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	659a      	str	r2, [r3, #88]	; 0x58
 800272c:	e002      	b.n	8002734 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <HAL_ADC_Start_DMA+0x16c>)
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	4a26      	ldr	r2, [pc, #152]	; (80027dc <HAL_ADC_Start_DMA+0x170>)
 8002742:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <HAL_ADC_Start_DMA+0x174>)
 800274a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	221c      	movs	r2, #28
 8002752:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0210 	orr.w	r2, r2, #16
 800276a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3340      	adds	r3, #64	; 0x40
 8002786:	4619      	mov	r1, r3
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f000 ffea 	bl	8003764 <HAL_DMA_Start_IT>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fddc 	bl	8002356 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800279e:	e00d      	b.n	80027bc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80027a8:	e008      	b.n	80027bc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027b6:	e001      	b.n	80027bc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
 80027ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	50040300 	.word	0x50040300
 80027cc:	50040200 	.word	0x50040200
 80027d0:	50040100 	.word	0x50040100
 80027d4:	50040000 	.word	0x50040000
 80027d8:	080030fd 	.word	0x080030fd
 80027dc:	080031d5 	.word	0x080031d5
 80027e0:	080031f1 	.word	0x080031f1

080027e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b0b6      	sub	sp, #216	; 0xd8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x22>
 800282a:	2302      	movs	r3, #2
 800282c:	e3c9      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x7b6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fd9f 	bl	800237e <LL_ADC_REG_IsConversionOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 83aa 	bne.w	8002f9c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d824      	bhi.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	3b02      	subs	r3, #2
 800285e:	2b03      	cmp	r3, #3
 8002860:	d81b      	bhi.n	800289a <HAL_ADC_ConfigChannel+0x8e>
 8002862:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <HAL_ADC_ConfigChannel+0x5c>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	08002879 	.word	0x08002879
 800286c:	08002881 	.word	0x08002881
 8002870:	08002889 	.word	0x08002889
 8002874:	08002891 	.word	0x08002891
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002878:	230c      	movs	r3, #12
 800287a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800287e:	e010      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002880:	2312      	movs	r3, #18
 8002882:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002886:	e00c      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002888:	2318      	movs	r3, #24
 800288a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800288e:	e008      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002898:	e003      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800289a:	2306      	movs	r3, #6
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80028b0:	f7ff fc52 	bl	8002158 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fd60 	bl	800237e <LL_ADC_REG_IsConversionOngoing>
 80028be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fd6c 	bl	80023a4 <LL_ADC_INJ_IsConversionOngoing>
 80028cc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 81a4 	bne.w	8002c22 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 819f 	bne.w	8002c22 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	461a      	mov	r2, r3
 80028f2:	f7ff fc5d 	bl	80021b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	08db      	lsrs	r3, r3, #3
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d00a      	beq.n	800292e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6919      	ldr	r1, [r3, #16]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002928:	f7ff fbae 	bl	8002088 <LL_ADC_SetOffset>
 800292c:	e179      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fbcb 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <HAL_ADC_ConfigChannel+0x14e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fbc0 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	e01e      	b.n	8002998 <HAL_ADC_ConfigChannel+0x18c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fbb5 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002978:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800297c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e004      	b.n	8002996 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800298c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1a4>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	e018      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x1d6>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80029c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80029cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e004      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80029d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fb84 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb68 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x214>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fb5d 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 021f 	and.w	r2, r3, #31
 8002a1e:	e01e      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x252>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fb52 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	e004      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x26a>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0e9b      	lsrs	r3, r3, #26
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	e018      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x29c>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e004      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d106      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fb21 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fb05 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x2da>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fafa 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	e01e      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x318>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2102      	movs	r1, #2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff faef 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e004      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x330>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	e014      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x35a>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e004      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d106      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2102      	movs	r1, #2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fac2 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff faa6 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x398>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2103      	movs	r1, #3
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fa9b 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	f003 021f 	and.w	r2, r3, #31
 8002ba2:	e017      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x3c8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2103      	movs	r1, #3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fa90 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e003      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x3e0>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	e011      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x404>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bfc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fa6d 	bl	80020fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fb82 	bl	8002330 <LL_ADC_IsEnabled>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8140 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f7ff fae1 	bl	8002208 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4a8f      	ldr	r2, [pc, #572]	; (8002e88 <HAL_ADC_ConfigChannel+0x67c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	f040 8131 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x46e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2b09      	cmp	r3, #9
 8002c70:	bf94      	ite	ls
 8002c72:	2301      	movls	r3, #1
 8002c74:	2300      	movhi	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	e019      	b.n	8002cae <HAL_ADC_ConfigChannel+0x4a2>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e003      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d079      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x4c2>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	069b      	lsls	r3, r3, #26
 8002cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ccc:	e015      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x4ee>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cde:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	e003      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	069b      	lsls	r3, r3, #26
 8002cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x50e>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	e017      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x53e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e003      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	ea42 0103 	orr.w	r1, r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x564>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	3301      	adds	r3, #1
 8002d62:	f003 021f 	and.w	r2, r3, #31
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	051b      	lsls	r3, r3, #20
 8002d6e:	e018      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x596>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e003      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f003 021f 	and.w	r2, r3, #31
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002da2:	430b      	orrs	r3, r1
 8002da4:	e081      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d107      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x5b6>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	3301      	adds	r3, #1
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc0:	e015      	b.n	8002dee <HAL_ADC_ConfigChannel+0x5e2>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e003      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	069b      	lsls	r3, r3, #26
 8002dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x602>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0e9b      	lsrs	r3, r3, #26
 8002e00:	3301      	adds	r3, #1
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	e017      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x632>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2101      	movs	r1, #1
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	ea42 0103 	orr.w	r1, r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x65e>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0e9b      	lsrs	r3, r3, #26
 8002e54:	3301      	adds	r3, #1
 8002e56:	f003 021f 	and.w	r2, r3, #31
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b1e      	subs	r3, #30
 8002e62:	051b      	lsls	r3, r3, #20
 8002e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e68:	e01e      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x69c>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	60fb      	str	r3, [r7, #12]
  return result;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e006      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x688>
 8002e86:	bf00      	nop
 8002e88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 021f 	and.w	r2, r3, #31
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b1e      	subs	r3, #30
 8002ea2:	051b      	lsls	r3, r3, #20
 8002ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7ff f97e 	bl	80021b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b44      	ldr	r3, [pc, #272]	; (8002fcc <HAL_ADC_ConfigChannel+0x7c0>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d07a      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec0:	4843      	ldr	r0, [pc, #268]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ec2:	f7ff f8d3 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 8002ec6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d12c      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d126      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_ADC_ConfigChannel+0x6e8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <HAL_ADC_ConfigChannel+0x7d0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d15d      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efc:	4619      	mov	r1, r3
 8002efe:	4834      	ldr	r0, [pc, #208]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f00:	f7ff f8a1 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	4a36      	ldr	r2, [pc, #216]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f1e:	e002      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f9      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f2c:	e040      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d118      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d112      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_ConfigChannel+0x74c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_ADC_ConfigChannel+0x7d0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d12d      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f60:	4619      	mov	r1, r3
 8002f62:	481b      	ldr	r0, [pc, #108]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f64:	f7ff f86f 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f68:	e024      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_ADC_ConfigChannel+0x7e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d120      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11a      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d115      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f92:	4619      	mov	r1, r3
 8002f94:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f96:	f7ff f856 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
 8002f9a:	e00c      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	37d8      	adds	r7, #216	; 0xd8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	80080000 	.word	0x80080000
 8002fd0:	50040300 	.word	0x50040300
 8002fd4:	c7520000 	.word	0xc7520000
 8002fd8:	50040000 	.word	0x50040000
 8002fdc:	50040200 	.word	0x50040200
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	053e2d63 	.word	0x053e2d63
 8002fe8:	cb840000 	.word	0xcb840000
 8002fec:	80000001 	.word	0x80000001

08002ff0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f995 	bl	8002330 <LL_ADC_IsEnabled>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d169      	bne.n	80030e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	4b36      	ldr	r3, [pc, #216]	; (80030ec <ADC_Enable+0xfc>)
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00d      	beq.n	8003036 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e055      	b.n	80030e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f964 	bl	8002308 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003040:	482b      	ldr	r0, [pc, #172]	; (80030f0 <ADC_Enable+0x100>)
 8003042:	f7ff f813 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 8003046:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <ADC_Enable+0x104>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <ADC_Enable+0x108>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800306a:	e002      	b.n	8003072 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3b01      	subs	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f9      	bne.n	800306c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003078:	f7fe ffa2 	bl	8001fc0 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800307e:	e028      	b.n	80030d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f953 	bl	8002330 <LL_ADC_IsEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff f937 	bl	8002308 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800309a:	f7fe ff91 	bl	8001fc0 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d914      	bls.n	80030d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d00d      	beq.n	80030d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e007      	b.n	80030e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d1cf      	bne.n	8003080 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	8000003f 	.word	0x8000003f
 80030f0:	50040300 	.word	0x50040300
 80030f4:	20000004 	.word	0x20000004
 80030f8:	053e2d63 	.word	0x053e2d63

080030fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d14b      	bne.n	80031ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d021      	beq.n	8003174 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fffc 	bl	8002132 <LL_ADC_REG_IsTriggerSourceSWStart>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d032      	beq.n	80031a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12b      	bne.n	80031a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11f      	bne.n	80031a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
 8003172:	e018      	b.n	80031a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d111      	bne.n	80031a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f043 0201 	orr.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7fe f8e2 	bl	8001370 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031ac:	e00e      	b.n	80031cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff fb1c 	bl	80027f8 <HAL_ADC_ErrorCallback>
}
 80031c0:	e004      	b.n	80031cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff fafe 	bl	80027e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f043 0204 	orr.w	r2, r3, #4
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff faee 	bl	80027f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <LL_ADC_IsEnabled>:
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <LL_ADC_IsEnabled+0x18>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <LL_ADC_IsEnabled+0x1a>
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_REG_IsConversionOngoing>:
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d101      	bne.n	8003262 <LL_ADC_REG_IsConversionOngoing+0x18>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b09f      	sub	sp, #124	; 0x7c
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800328a:	2302      	movs	r3, #2
 800328c:	e093      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003296:	2300      	movs	r3, #0
 8003298:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800329a:	2300      	movs	r3, #0
 800329c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a47      	ldr	r2, [pc, #284]	; (80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d102      	bne.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	e001      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e072      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ffb9 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 80032d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ffb3 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d154      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80032ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d151      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032f0:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80032f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02c      	beq.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800330e:	035b      	lsls	r3, r3, #13
 8003310:	430b      	orrs	r3, r1
 8003312:	431a      	orrs	r2, r3
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003318:	4829      	ldr	r0, [pc, #164]	; (80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800331a:	f7ff ff83 	bl	8003224 <LL_ADC_IsEnabled>
 800331e:	4604      	mov	r4, r0
 8003320:	4828      	ldr	r0, [pc, #160]	; (80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003322:	f7ff ff7f 	bl	8003224 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	431c      	orrs	r4, r3
 800332a:	4828      	ldr	r0, [pc, #160]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800332c:	f7ff ff7a 	bl	8003224 <LL_ADC_IsEnabled>
 8003330:	4603      	mov	r3, r0
 8003332:	4323      	orrs	r3, r4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d137      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003340:	f023 030f 	bic.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	6811      	ldr	r1, [r2, #0]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	430a      	orrs	r2, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003352:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003354:	e028      	b.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003362:	4817      	ldr	r0, [pc, #92]	; (80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003364:	f7ff ff5e 	bl	8003224 <LL_ADC_IsEnabled>
 8003368:	4604      	mov	r4, r0
 800336a:	4816      	ldr	r0, [pc, #88]	; (80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800336c:	f7ff ff5a 	bl	8003224 <LL_ADC_IsEnabled>
 8003370:	4603      	mov	r3, r0
 8003372:	431c      	orrs	r4, r3
 8003374:	4815      	ldr	r0, [pc, #84]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003376:	f7ff ff55 	bl	8003224 <LL_ADC_IsEnabled>
 800337a:	4603      	mov	r3, r0
 800337c:	4323      	orrs	r3, r4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d112      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800338a:	f023 030f 	bic.w	r3, r3, #15
 800338e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003390:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003392:	e009      	b.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033a6:	e000      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	377c      	adds	r7, #124	; 0x7c
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	bf00      	nop
 80033c0:	50040000 	.word	0x50040000
 80033c4:	50040100 	.word	0x50040100
 80033c8:	50040300 	.word	0x50040300
 80033cc:	50040200 	.word	0x50040200

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353c:	d301      	bcc.n	8003542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353e:	2301      	movs	r3, #1
 8003540:	e00f      	b.n	8003562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <SysTick_Config+0x40>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800354a:	210f      	movs	r1, #15
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	f7ff ff8e 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <SysTick_Config+0x40>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <SysTick_Config+0x40>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000e010 	.word	0xe000e010

08003570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff29 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003598:	f7ff ff3e 	bl	8003418 <__NVIC_GetPriorityGrouping>
 800359c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7ff ff8e 	bl	80034c4 <NVIC_EncodePriority>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff5d 	bl	8003470 <__NVIC_SetPriority>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff31 	bl	8003434 <__NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ffa2 	bl	800352c <SysTick_Config>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e098      	b.n	8003738 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <HAL_DMA_Init+0x150>)
 800360e:	429a      	cmp	r2, r3
 8003610:	d80f      	bhi.n	8003632 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_DMA_Init+0x154>)
 800361a:	4413      	add	r3, r2
 800361c:	4a4b      	ldr	r2, [pc, #300]	; (800374c <HAL_DMA_Init+0x158>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	009a      	lsls	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a48      	ldr	r2, [pc, #288]	; (8003750 <HAL_DMA_Init+0x15c>)
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
 8003630:	e00e      	b.n	8003650 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_DMA_Init+0x160>)
 800363a:	4413      	add	r3, r2
 800363c:	4a43      	ldr	r2, [pc, #268]	; (800374c <HAL_DMA_Init+0x158>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	009a      	lsls	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a42      	ldr	r2, [pc, #264]	; (8003758 <HAL_DMA_Init+0x164>)
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036aa:	d039      	beq.n	8003720 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a27      	ldr	r2, [pc, #156]	; (8003750 <HAL_DMA_Init+0x15c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d11a      	bne.n	80036ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_DMA_Init+0x168>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f003 031c 	and.w	r3, r3, #28
 80036c2:	210f      	movs	r1, #15
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	4924      	ldr	r1, [pc, #144]	; (800375c <HAL_DMA_Init+0x168>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_DMA_Init+0x168>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	f003 031c 	and.w	r3, r3, #28
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	491d      	ldr	r1, [pc, #116]	; (800375c <HAL_DMA_Init+0x168>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
 80036ea:	e019      	b.n	8003720 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036ec:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <HAL_DMA_Init+0x16c>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f003 031c 	and.w	r3, r3, #28
 80036f8:	210f      	movs	r1, #15
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	4917      	ldr	r1, [pc, #92]	; (8003760 <HAL_DMA_Init+0x16c>)
 8003702:	4013      	ands	r3, r2
 8003704:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_DMA_Init+0x16c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f003 031c 	and.w	r3, r3, #28
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	4911      	ldr	r1, [pc, #68]	; (8003760 <HAL_DMA_Init+0x16c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40020407 	.word	0x40020407
 8003748:	bffdfff8 	.word	0xbffdfff8
 800374c:	cccccccd 	.word	0xcccccccd
 8003750:	40020000 	.word	0x40020000
 8003754:	bffdfbf8 	.word	0xbffdfbf8
 8003758:	40020400 	.word	0x40020400
 800375c:	400200a8 	.word	0x400200a8
 8003760:	400204a8 	.word	0x400204a8

08003764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_DMA_Start_IT+0x20>
 8003780:	2302      	movs	r3, #2
 8003782:	e04b      	b.n	800381c <HAL_DMA_Start_IT+0xb8>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d13a      	bne.n	800380e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f8e0 	bl	8003982 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 020e 	orr.w	r2, r2, #14
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e00f      	b.n	80037fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 020a 	orr.w	r2, r2, #10
 80037fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e005      	b.n	800381a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800381a:	7dfb      	ldrb	r3, [r7, #23]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f003 031c 	and.w	r3, r3, #28
 8003844:	2204      	movs	r2, #4
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d026      	beq.n	800389e <HAL_DMA_IRQHandler+0x7a>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d021      	beq.n	800389e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d107      	bne.n	8003878 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	f003 021c 	and.w	r2, r3, #28
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	2104      	movs	r1, #4
 8003886:	fa01 f202 	lsl.w	r2, r1, r2
 800388a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2b00      	cmp	r3, #0
 8003892:	d071      	beq.n	8003978 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800389c:	e06c      	b.n	8003978 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f003 031c 	and.w	r3, r3, #28
 80038a6:	2202      	movs	r2, #2
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02e      	beq.n	8003910 <HAL_DMA_IRQHandler+0xec>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d029      	beq.n	8003910 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 020a 	bic.w	r2, r2, #10
 80038d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 021c 	and.w	r2, r3, #28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2102      	movs	r1, #2
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d038      	beq.n	8003978 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800390e:	e033      	b.n	8003978 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f003 031c 	and.w	r3, r3, #28
 8003918:	2208      	movs	r2, #8
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02a      	beq.n	800397a <HAL_DMA_IRQHandler+0x156>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d025      	beq.n	800397a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 020e 	bic.w	r2, r2, #14
 800393c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f003 021c 	and.w	r2, r3, #28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003978:	bf00      	nop
 800397a:	bf00      	nop
}
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f003 021c 	and.w	r2, r3, #28
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d108      	bne.n	80039c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039c4:	e007      	b.n	80039d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	60da      	str	r2, [r3, #12]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f2:	e17f      	b.n	8003cf4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	4013      	ands	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8171 	beq.w	8003cee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d005      	beq.n	8003a24 <HAL_GPIO_Init+0x40>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d130      	bne.n	8003a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0201 	and.w	r2, r3, #1
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d118      	bne.n	8003ac4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	f003 0201 	and.w	r2, r3, #1
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d017      	beq.n	8003b00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d123      	bne.n	8003b54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	08da      	lsrs	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	6939      	ldr	r1, [r7, #16]
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80ac 	beq.w	8003cee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b96:	4b5f      	ldr	r3, [pc, #380]	; (8003d14 <HAL_GPIO_Init+0x330>)
 8003b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9a:	4a5e      	ldr	r2, [pc, #376]	; (8003d14 <HAL_GPIO_Init+0x330>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <HAL_GPIO_Init+0x330>)
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bae:	4a5a      	ldr	r2, [pc, #360]	; (8003d18 <HAL_GPIO_Init+0x334>)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bd8:	d025      	beq.n	8003c26 <HAL_GPIO_Init+0x242>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4f      	ldr	r2, [pc, #316]	; (8003d1c <HAL_GPIO_Init+0x338>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01f      	beq.n	8003c22 <HAL_GPIO_Init+0x23e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4e      	ldr	r2, [pc, #312]	; (8003d20 <HAL_GPIO_Init+0x33c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d019      	beq.n	8003c1e <HAL_GPIO_Init+0x23a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4d      	ldr	r2, [pc, #308]	; (8003d24 <HAL_GPIO_Init+0x340>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_GPIO_Init+0x236>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4c      	ldr	r2, [pc, #304]	; (8003d28 <HAL_GPIO_Init+0x344>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00d      	beq.n	8003c16 <HAL_GPIO_Init+0x232>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4b      	ldr	r2, [pc, #300]	; (8003d2c <HAL_GPIO_Init+0x348>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <HAL_GPIO_Init+0x22e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4a      	ldr	r2, [pc, #296]	; (8003d30 <HAL_GPIO_Init+0x34c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_GPIO_Init+0x22a>
 8003c0a:	2306      	movs	r3, #6
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x244>
 8003c0e:	2307      	movs	r3, #7
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x244>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x244>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x244>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x244>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x244>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x244>
 8003c26:	2300      	movs	r3, #0
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c38:	4937      	ldr	r1, [pc, #220]	; (8003d18 <HAL_GPIO_Init+0x334>)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c46:	4b3b      	ldr	r3, [pc, #236]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c6a:	4a32      	ldr	r2, [pc, #200]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c70:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f47f ae78 	bne.w	80039f4 <HAL_GPIO_Init+0x10>
  }
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	48000400 	.word	0x48000400
 8003d20:	48000800 	.word	0x48000800
 8003d24:	48000c00 	.word	0x48000c00
 8003d28:	48001000 	.word	0x48001000
 8003d2c:	48001400 	.word	0x48001400
 8003d30:	48001800 	.word	0x48001800
 8003d34:	40010400 	.word	0x40010400

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40007000 	.word	0x40007000

08003d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d92:	d130      	bne.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da0:	d038      	beq.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003daa:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2232      	movs	r2, #50	; 0x32
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	0c9b      	lsrs	r3, r3, #18
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc8:	e002      	b.n	8003dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ddc:	d102      	bne.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f2      	bne.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df0:	d110      	bne.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e00f      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e02:	d007      	beq.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e0c:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40007000 	.word	0x40007000
 8003e28:	20000004 	.word	0x20000004
 8003e2c:	431bde83 	.word	0x431bde83

08003e30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e3ca      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4b97      	ldr	r3, [pc, #604]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	4b94      	ldr	r3, [pc, #592]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80e4 	beq.w	800402c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <HAL_RCC_OscConfig+0x4a>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	f040 808b 	bne.w	8003f88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	f040 8087 	bne.w	8003f88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e7a:	4b89      	ldr	r3, [pc, #548]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_RCC_OscConfig+0x62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e3a2      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1a      	ldr	r2, [r3, #32]
 8003e96:	4b82      	ldr	r3, [pc, #520]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_RCC_OscConfig+0x7c>
 8003ea2:	4b7f      	ldr	r3, [pc, #508]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCC_OscConfig+0x88>
 8003eac:	4b7c      	ldr	r3, [pc, #496]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d223      	bcs.n	8003f04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fd55 	bl	8004970 <RCC_SetFlashLatencyFromMSIRange>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e383      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed0:	4b73      	ldr	r3, [pc, #460]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a72      	ldr	r2, [pc, #456]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	f043 0308 	orr.w	r3, r3, #8
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b70      	ldr	r3, [pc, #448]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	496d      	ldr	r1, [pc, #436]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eee:	4b6c      	ldr	r3, [pc, #432]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	4968      	ldr	r1, [pc, #416]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
 8003f02:	e025      	b.n	8003f50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f04:	4b66      	ldr	r3, [pc, #408]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a65      	ldr	r2, [pc, #404]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	f043 0308 	orr.w	r3, r3, #8
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4960      	ldr	r1, [pc, #384]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f22:	4b5f      	ldr	r3, [pc, #380]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	495b      	ldr	r1, [pc, #364]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fd15 	bl	8004970 <RCC_SetFlashLatencyFromMSIRange>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e343      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f50:	f000 fc4a 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b52      	ldr	r3, [pc, #328]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	4950      	ldr	r1, [pc, #320]	; (80040a4 <HAL_RCC_OscConfig+0x274>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	4a4e      	ldr	r2, [pc, #312]	; (80040a8 <HAL_RCC_OscConfig+0x278>)
 8003f6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f70:	4b4e      	ldr	r3, [pc, #312]	; (80040ac <HAL_RCC_OscConfig+0x27c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fd ffd3 	bl	8001f20 <HAL_InitTick>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d052      	beq.n	800402a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	e327      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d032      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a42      	ldr	r2, [pc, #264]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe f810 	bl	8001fc0 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa4:	f7fe f80c 	bl	8001fc0 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e310      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc2:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a36      	ldr	r2, [pc, #216]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	f043 0308 	orr.w	r3, r3, #8
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4931      	ldr	r1, [pc, #196]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe0:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	492c      	ldr	r1, [pc, #176]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
 8003ff4:	e01a      	b.n	800402c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004002:	f7fd ffdd 	bl	8001fc0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800400a:	f7fd ffd9 	bl	8001fc0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e2dd      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f0      	bne.n	800400a <HAL_RCC_OscConfig+0x1da>
 8004028:	e000      	b.n	800402c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800402a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d074      	beq.n	8004122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d005      	beq.n	800404a <HAL_RCC_OscConfig+0x21a>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b0c      	cmp	r3, #12
 8004042:	d10e      	bne.n	8004062 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d10b      	bne.n	8004062 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d064      	beq.n	8004120 <HAL_RCC_OscConfig+0x2f0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d160      	bne.n	8004120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e2ba      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x24a>
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e026      	b.n	80040c8 <HAL_RCC_OscConfig+0x298>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004082:	d115      	bne.n	80040b0 <HAL_RCC_OscConfig+0x280>
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 800408a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a02      	ldr	r2, [pc, #8]	; (80040a0 <HAL_RCC_OscConfig+0x270>)
 8004096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e014      	b.n	80040c8 <HAL_RCC_OscConfig+0x298>
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800c2d0 	.word	0x0800c2d0
 80040a8:	20000004 	.word	0x20000004
 80040ac:	20000008 	.word	0x20000008
 80040b0:	4ba0      	ldr	r3, [pc, #640]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a9f      	ldr	r2, [pc, #636]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80040b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b9d      	ldr	r3, [pc, #628]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a9c      	ldr	r2, [pc, #624]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80040c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd ff76 	bl	8001fc0 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fd ff72 	bl	8001fc0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e276      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ea:	4b92      	ldr	r3, [pc, #584]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2a8>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd ff62 	bl	8001fc0 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fd ff5e 	bl	8001fc0 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e262      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004112:	4b88      	ldr	r3, [pc, #544]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x2d0>
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d060      	beq.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d005      	beq.n	8004140 <HAL_RCC_OscConfig+0x310>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d119      	bne.n	800416e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d116      	bne.n	800416e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004140:	4b7c      	ldr	r3, [pc, #496]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_OscConfig+0x328>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e23f      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	4973      	ldr	r1, [pc, #460]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416c:	e040      	b.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d023      	beq.n	80041be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004176:	4b6f      	ldr	r3, [pc, #444]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6e      	ldr	r2, [pc, #440]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004182:	f7fd ff1d 	bl	8001fc0 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418a:	f7fd ff19 	bl	8001fc0 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e21d      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419c:	4b65      	ldr	r3, [pc, #404]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b62      	ldr	r3, [pc, #392]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	495f      	ldr	r1, [pc, #380]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
 80041bc:	e018      	b.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041be:	4b5d      	ldr	r3, [pc, #372]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a5c      	ldr	r2, [pc, #368]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fd fef9 	bl	8001fc0 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d2:	f7fd fef5 	bl	8001fc0 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e1f9      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d03c      	beq.n	8004276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01c      	beq.n	800423e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004204:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	4a4a      	ldr	r2, [pc, #296]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd fed4 	bl	8001fc0 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7fd fed0 	bl	8001fc0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1d4      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800422e:	4b41      	ldr	r3, [pc, #260]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <HAL_RCC_OscConfig+0x3ec>
 800423c:	e01b      	b.n	8004276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004244:	4a3b      	ldr	r2, [pc, #236]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fd feb7 	bl	8001fc0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004256:	f7fd feb3 	bl	8001fc0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e1b7      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004268:	4b32      	ldr	r3, [pc, #200]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ef      	bne.n	8004256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80a6 	beq.w	80043d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004284:	2300      	movs	r3, #0
 8004286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004294:	4b27      	ldr	r3, [pc, #156]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 800429a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429e:	6593      	str	r3, [r2, #88]	; 0x58
 80042a0:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ac:	2301      	movs	r3, #1
 80042ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_OscConfig+0x508>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d118      	bne.n	80042ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042bc:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <HAL_RCC_OscConfig+0x508>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_RCC_OscConfig+0x508>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c8:	f7fd fe7a 	bl	8001fc0 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d0:	f7fd fe76 	bl	8001fc0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e17a      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_RCC_OscConfig+0x508>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d108      	bne.n	8004308 <HAL_RCC_OscConfig+0x4d8>
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004306:	e029      	b.n	800435c <HAL_RCC_OscConfig+0x52c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b05      	cmp	r3, #5
 800430e:	d115      	bne.n	800433c <HAL_RCC_OscConfig+0x50c>
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	4a07      	ldr	r2, [pc, #28]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	4a03      	ldr	r2, [pc, #12]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x52c>
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
 800433c:	4b9c      	ldr	r3, [pc, #624]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	4a9b      	ldr	r2, [pc, #620]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434c:	4b98      	ldr	r3, [pc, #608]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	4a97      	ldr	r2, [pc, #604]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fe2c 	bl	8001fc0 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fd fe28 	bl	8001fc0 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e12a      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004382:	4b8b      	ldr	r3, [pc, #556]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ed      	beq.n	800436c <HAL_RCC_OscConfig+0x53c>
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fd fe15 	bl	8001fc0 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fd fe11 	bl	8001fc0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e113      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b0:	4b7f      	ldr	r3, [pc, #508]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1ed      	bne.n	800439a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043be:	7ffb      	ldrb	r3, [r7, #31]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c4:	4b7a      	ldr	r3, [pc, #488]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	4a79      	ldr	r2, [pc, #484]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80fe 	beq.w	80045d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	2b02      	cmp	r3, #2
 80043e0:	f040 80d0 	bne.w	8004584 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043e4:	4b72      	ldr	r3, [pc, #456]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f003 0203 	and.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d130      	bne.n	800445a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	3b01      	subs	r3, #1
 8004404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d127      	bne.n	800445a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d11f      	bne.n	800445a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004424:	2a07      	cmp	r2, #7
 8004426:	bf14      	ite	ne
 8004428:	2201      	movne	r2, #1
 800442a:	2200      	moveq	r2, #0
 800442c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800442e:	4293      	cmp	r3, r2
 8004430:	d113      	bne.n	800445a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	3b01      	subs	r3, #1
 8004440:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d109      	bne.n	800445a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d06e      	beq.n	8004538 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d069      	beq.n	8004534 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0ad      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800447c:	4b4c      	ldr	r3, [pc, #304]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4b      	ldr	r2, [pc, #300]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004486:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004488:	f7fd fd9a 	bl	8001fc0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fd96 	bl	8001fc0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e09a      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a2:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ae:	4b40      	ldr	r3, [pc, #256]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <HAL_RCC_OscConfig+0x784>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044be:	3a01      	subs	r2, #1
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	4311      	orrs	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044c8:	0212      	lsls	r2, r2, #8
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044d0:	0852      	lsrs	r2, r2, #1
 80044d2:	3a01      	subs	r2, #1
 80044d4:	0552      	lsls	r2, r2, #21
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	3a01      	subs	r2, #1
 80044e0:	0652      	lsls	r2, r2, #25
 80044e2:	4311      	orrs	r1, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e8:	0912      	lsrs	r2, r2, #4
 80044ea:	0452      	lsls	r2, r2, #17
 80044ec:	430a      	orrs	r2, r1
 80044ee:	4930      	ldr	r1, [pc, #192]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a2d      	ldr	r2, [pc, #180]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 80044fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800450c:	f7fd fd58 	bl	8001fc0 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd fd54 	bl	8001fc0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e058      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004532:	e050      	b.n	80045d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e04f      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004538:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d148      	bne.n	80045d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004544:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 800454a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004550:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800455c:	f7fd fd30 	bl	8001fc0 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fd2c 	bl	8001fc0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e030      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x734>
 8004582:	e028      	b.n	80045d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d023      	beq.n	80045d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <HAL_RCC_OscConfig+0x780>)
 8004590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fd fd13 	bl	8001fc0 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800459c:	e00c      	b.n	80045b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459e:	f7fd fd0f 	bl	8001fc0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d905      	bls.n	80045b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e013      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
 80045b0:	40021000 	.word	0x40021000
 80045b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x7b0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ec      	bne.n	800459e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_RCC_OscConfig+0x7b0>)
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	4905      	ldr	r1, [pc, #20]	; (80045e0 <HAL_RCC_OscConfig+0x7b0>)
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x7b4>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	60cb      	str	r3, [r1, #12]
 80045d0:	e001      	b.n	80045d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	feeefffc 	.word	0xfeeefffc

080045e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0e7      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045fc:	4b75      	ldr	r3, [pc, #468]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d910      	bls.n	800462c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b72      	ldr	r3, [pc, #456]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 0207 	bic.w	r2, r3, #7
 8004612:	4970      	ldr	r1, [pc, #448]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b6e      	ldr	r3, [pc, #440]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0cf      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d010      	beq.n	800465a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	4b66      	ldr	r3, [pc, #408]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004644:	429a      	cmp	r2, r3
 8004646:	d908      	bls.n	800465a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004648:	4b63      	ldr	r3, [pc, #396]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4960      	ldr	r1, [pc, #384]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d04c      	beq.n	8004700 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466e:	4b5a      	ldr	r3, [pc, #360]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d121      	bne.n	80046be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0a6      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004686:	4b54      	ldr	r3, [pc, #336]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d115      	bne.n	80046be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e09a      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d107      	bne.n	80046ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800469e:	4b4e      	ldr	r3, [pc, #312]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e08e      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ae:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e086      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046be:	4b46      	ldr	r3, [pc, #280]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 0203 	bic.w	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4943      	ldr	r1, [pc, #268]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d0:	f7fd fc76 	bl	8001fc0 <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fd fc72 	bl	8001fc0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e06e      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 020c 	and.w	r2, r3, #12
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d1eb      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d010      	beq.n	800472e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004718:	429a      	cmp	r2, r3
 800471a:	d208      	bcs.n	800472e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800471c:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	492b      	ldr	r1, [pc, #172]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800472e:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d210      	bcs.n	800475e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 0207 	bic.w	r2, r3, #7
 8004744:	4923      	ldr	r1, [pc, #140]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474c:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_RCC_ClockConfig+0x1ec>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d001      	beq.n	800475e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e036      	b.n	80047cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4918      	ldr	r1, [pc, #96]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004788:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4910      	ldr	r1, [pc, #64]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800479c:	f000 f824 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	490b      	ldr	r1, [pc, #44]	; (80047dc <HAL_RCC_ClockConfig+0x1f4>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <HAL_RCC_ClockConfig+0x1f8>)
 80047ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_ClockConfig+0x1fc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fd fbad 	bl	8001f20 <HAL_InitTick>
 80047c6:	4603      	mov	r3, r0
 80047c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80047ca:	7afb      	ldrb	r3, [r7, #11]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40022000 	.word	0x40022000
 80047d8:	40021000 	.word	0x40021000
 80047dc:	0800c2d0 	.word	0x0800c2d0
 80047e0:	20000004 	.word	0x20000004
 80047e4:	20000008 	.word	0x20000008

080047e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f6:	4b3e      	ldr	r3, [pc, #248]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004800:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x34>
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d121      	bne.n	800485a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d11e      	bne.n	800485a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800481c:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d107      	bne.n	8004838 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004828:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800482a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e005      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004838:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004844:	4a2b      	ldr	r2, [pc, #172]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d102      	bne.n	8004866 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	e004      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d101      	bne.n	8004870 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800486c:	4b23      	ldr	r3, [pc, #140]	; (80048fc <HAL_RCC_GetSysClockFreq+0x114>)
 800486e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d134      	bne.n	80048e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d003      	beq.n	800488e <HAL_RCC_GetSysClockFreq+0xa6>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d003      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0xac>
 800488c:	e005      	b.n	800489a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800488e:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004890:	617b      	str	r3, [r7, #20]
      break;
 8004892:	e005      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004896:	617b      	str	r3, [r7, #20]
      break;
 8004898:	e002      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	617b      	str	r3, [r7, #20]
      break;
 800489e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a0:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	3301      	adds	r3, #1
 80048ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	fb03 f202 	mul.w	r2, r3, r2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048c6:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	0e5b      	lsrs	r3, r3, #25
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	3301      	adds	r3, #1
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048e0:	69bb      	ldr	r3, [r7, #24]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3724      	adds	r7, #36	; 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	0800c2e8 	.word	0x0800c2e8
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	007a1200 	.word	0x007a1200

08004900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000004 	.word	0x20000004

08004918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800491c:	f7ff fff0 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	0800c2e0 	.word	0x0800c2e0

08004944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004948:	f7ff ffda 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	0adb      	lsrs	r3, r3, #11
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4904      	ldr	r1, [pc, #16]	; (800496c <HAL_RCC_GetPCLK2Freq+0x28>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000
 800496c:	0800c2e0 	.word	0x0800c2e0

08004970 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800497c:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004988:	f7ff f9ee 	bl	8003d68 <HAL_PWREx_GetVoltageRange>
 800498c:	6178      	str	r0, [r7, #20]
 800498e:	e014      	b.n	80049ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6593      	str	r3, [r2, #88]	; 0x58
 800499c:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049a8:	f7ff f9de 	bl	8003d68 <HAL_PWREx_GetVoltageRange>
 80049ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c0:	d10b      	bne.n	80049da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	d919      	bls.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2ba0      	cmp	r3, #160	; 0xa0
 80049cc:	d902      	bls.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049ce:	2302      	movs	r3, #2
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	e013      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049d4:	2301      	movs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e010      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d902      	bls.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049e0:	2303      	movs	r3, #3
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e00a      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d102      	bne.n	80049f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049ec:	2302      	movs	r3, #2
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	e004      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b70      	cmp	r3, #112	; 0x70
 80049f6:	d101      	bne.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049f8:	2301      	movs	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 0207 	bic.w	r2, r3, #7
 8004a04:	4909      	ldr	r1, [pc, #36]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d001      	beq.n	8004a1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40022000 	.word	0x40022000

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d041      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a54:	d02a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a5a:	d824      	bhi.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a60:	d008      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a66:	d81e      	bhi.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a70:	d010      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a72:	e018      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a74:	4b86      	ldr	r3, [pc, #536]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a85      	ldr	r2, [pc, #532]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a80:	e015      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fabb 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a92:	e00c      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3320      	adds	r3, #32
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fba6 	bl	80051ec <RCCEx_PLLSAI2_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aa4:	e003      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ab4:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac2:	4973      	ldr	r1, [pc, #460]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004aca:	e001      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d041      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ae4:	d02a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ae6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aea:	d824      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af0:	d008      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af6:	d81e      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b00:	d010      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b02:	e018      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b04:	4b62      	ldr	r3, [pc, #392]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a61      	ldr	r2, [pc, #388]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b10:	e015      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3304      	adds	r3, #4
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fa73 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b22:	e00c      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3320      	adds	r3, #32
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fb5e 	bl	80051ec <RCCEx_PLLSAI2_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b34:	e003      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	74fb      	strb	r3, [r7, #19]
      break;
 8004b3a:	e000      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b44:	4b52      	ldr	r3, [pc, #328]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b52:	494f      	ldr	r1, [pc, #316]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b5a:	e001      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	7cfb      	ldrb	r3, [r7, #19]
 8004b5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80a0 	beq.w	8004cae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00d      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b88:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	4a40      	ldr	r2, [pc, #256]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
 8004b94:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb0:	f7fd fa06 	bl	8001fc0 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bb6:	e009      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fd fa02 	bl	8001fc0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d902      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	74fb      	strb	r3, [r7, #19]
        break;
 8004bca:	e005      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bcc:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d15c      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01f      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d019      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bfc:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c08:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c28:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd f9c1 	bl	8001fc0 <HAL_GetTick>
 8004c3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c40:	e00b      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fd f9bd 	bl	8001fc0 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d902      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	74fb      	strb	r3, [r7, #19]
            break;
 8004c58:	e006      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ec      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7e:	4904      	ldr	r1, [pc, #16]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c86:	e009      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
 8004c8c:	e006      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c98:	7cfb      	ldrb	r3, [r7, #19]
 8004c9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c9c:	7c7b      	ldrb	r3, [r7, #17]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b9e      	ldr	r3, [pc, #632]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	4a9d      	ldr	r2, [pc, #628]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cba:	4b98      	ldr	r3, [pc, #608]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f023 0203 	bic.w	r2, r3, #3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	4994      	ldr	r1, [pc, #592]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f023 020c 	bic.w	r2, r3, #12
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	498c      	ldr	r1, [pc, #560]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cfe:	4b87      	ldr	r3, [pc, #540]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	4983      	ldr	r1, [pc, #524]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d20:	4b7e      	ldr	r3, [pc, #504]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	497b      	ldr	r1, [pc, #492]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d42:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	4972      	ldr	r1, [pc, #456]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d64:	4b6d      	ldr	r3, [pc, #436]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	496a      	ldr	r1, [pc, #424]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d86:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d94:	4961      	ldr	r1, [pc, #388]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004da8:	4b5c      	ldr	r3, [pc, #368]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db6:	4959      	ldr	r1, [pc, #356]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dca:	4b54      	ldr	r3, [pc, #336]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	4950      	ldr	r1, [pc, #320]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dec:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	4948      	ldr	r1, [pc, #288]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0e:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	493f      	ldr	r1, [pc, #252]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d028      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e30:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3e:	4937      	ldr	r1, [pc, #220]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e50:	4b32      	ldr	r3, [pc, #200]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a31      	ldr	r2, [pc, #196]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5a:	60d3      	str	r3, [r2, #12]
 8004e5c:	e011      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e66:	d10c      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f8c8 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d028      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	491f      	ldr	r1, [pc, #124]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eac:	d106      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eae:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4a1a      	ldr	r2, [pc, #104]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb8:	60d3      	str	r3, [r2, #12]
 8004eba:	e011      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	2101      	movs	r1, #1
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f899 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed6:	7cfb      	ldrb	r3, [r7, #19]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02b      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efa:	4908      	ldr	r1, [pc, #32]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a02      	ldr	r2, [pc, #8]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f16:	60d3      	str	r3, [r2, #12]
 8004f18:	e014      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f867 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02f      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f50:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f5e:	4928      	ldr	r1, [pc, #160]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6e:	d10d      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	2102      	movs	r1, #2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f844 	bl	8005004 <RCCEx_PLLSAI1_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d014      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	74bb      	strb	r3, [r7, #18]
 8004f8a:	e011      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3320      	adds	r3, #32
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 f925 	bl	80051ec <RCCEx_PLLSAI2_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fbc:	4b10      	ldr	r3, [pc, #64]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fca:	490d      	ldr	r1, [pc, #52]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fee:	4904      	ldr	r1, [pc, #16]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ff6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000

08005004 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005012:	4b75      	ldr	r3, [pc, #468]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d018      	beq.n	8005050 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800501e:	4b72      	ldr	r3, [pc, #456]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0203 	and.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d10d      	bne.n	800504a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
       ||
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005036:	4b6c      	ldr	r3, [pc, #432]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
       ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d047      	beq.n	80050da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
 800504e:	e044      	b.n	80050da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d018      	beq.n	800508a <RCCEx_PLLSAI1_Config+0x86>
 8005058:	2b03      	cmp	r3, #3
 800505a:	d825      	bhi.n	80050a8 <RCCEx_PLLSAI1_Config+0xa4>
 800505c:	2b01      	cmp	r3, #1
 800505e:	d002      	beq.n	8005066 <RCCEx_PLLSAI1_Config+0x62>
 8005060:	2b02      	cmp	r3, #2
 8005062:	d009      	beq.n	8005078 <RCCEx_PLLSAI1_Config+0x74>
 8005064:	e020      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005066:	4b60      	ldr	r3, [pc, #384]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d11d      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005076:	e01a      	b.n	80050ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005078:	4b5b      	ldr	r3, [pc, #364]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d116      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005088:	e013      	b.n	80050b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800508a:	4b57      	ldr	r3, [pc, #348]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005096:	4b54      	ldr	r3, [pc, #336]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050a6:	e006      	b.n	80050b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      break;
 80050ac:	e004      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ae:	bf00      	nop
 80050b0:	e002      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050be:	4b4a      	ldr	r3, [pc, #296]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	430b      	orrs	r3, r1
 80050d4:	4944      	ldr	r1, [pc, #272]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d17d      	bne.n	80051dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050e0:	4b41      	ldr	r3, [pc, #260]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fc ff68 	bl	8001fc0 <HAL_GetTick>
 80050f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050f2:	e009      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050f4:	f7fc ff64 	bl	8001fc0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d902      	bls.n	8005108 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	73fb      	strb	r3, [r7, #15]
        break;
 8005106:	e005      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005108:	4b37      	ldr	r3, [pc, #220]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ef      	bne.n	80050f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d160      	bne.n	80051dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d111      	bne.n	8005144 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005120:	4b31      	ldr	r3, [pc, #196]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6892      	ldr	r2, [r2, #8]
 8005130:	0211      	lsls	r1, r2, #8
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68d2      	ldr	r2, [r2, #12]
 8005136:	0912      	lsrs	r2, r2, #4
 8005138:	0452      	lsls	r2, r2, #17
 800513a:	430a      	orrs	r2, r1
 800513c:	492a      	ldr	r1, [pc, #168]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513e:	4313      	orrs	r3, r2
 8005140:	610b      	str	r3, [r1, #16]
 8005142:	e027      	b.n	8005194 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d112      	bne.n	8005170 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800514a:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005152:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6892      	ldr	r2, [r2, #8]
 800515a:	0211      	lsls	r1, r2, #8
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6912      	ldr	r2, [r2, #16]
 8005160:	0852      	lsrs	r2, r2, #1
 8005162:	3a01      	subs	r2, #1
 8005164:	0552      	lsls	r2, r2, #21
 8005166:	430a      	orrs	r2, r1
 8005168:	491f      	ldr	r1, [pc, #124]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	610b      	str	r3, [r1, #16]
 800516e:	e011      	b.n	8005194 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005178:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6892      	ldr	r2, [r2, #8]
 8005180:	0211      	lsls	r1, r2, #8
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6952      	ldr	r2, [r2, #20]
 8005186:	0852      	lsrs	r2, r2, #1
 8005188:	3a01      	subs	r2, #1
 800518a:	0652      	lsls	r2, r2, #25
 800518c:	430a      	orrs	r2, r1
 800518e:	4916      	ldr	r1, [pc, #88]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005190:	4313      	orrs	r3, r2
 8005192:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005194:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800519e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a0:	f7fc ff0e 	bl	8001fc0 <HAL_GetTick>
 80051a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051a6:	e009      	b.n	80051bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051a8:	f7fc ff0a 	bl	8001fc0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d902      	bls.n	80051bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	73fb      	strb	r3, [r7, #15]
          break;
 80051ba:	e005      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ef      	beq.n	80051a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	4904      	ldr	r1, [pc, #16]	; (80051e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000

080051ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051fa:	4b6a      	ldr	r3, [pc, #424]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d018      	beq.n	8005238 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005206:	4b67      	ldr	r3, [pc, #412]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0203 	and.w	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d10d      	bne.n	8005232 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
       ||
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800521e:	4b61      	ldr	r3, [pc, #388]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
       ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d047      	beq.n	80052c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
 8005236:	e044      	b.n	80052c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d018      	beq.n	8005272 <RCCEx_PLLSAI2_Config+0x86>
 8005240:	2b03      	cmp	r3, #3
 8005242:	d825      	bhi.n	8005290 <RCCEx_PLLSAI2_Config+0xa4>
 8005244:	2b01      	cmp	r3, #1
 8005246:	d002      	beq.n	800524e <RCCEx_PLLSAI2_Config+0x62>
 8005248:	2b02      	cmp	r3, #2
 800524a:	d009      	beq.n	8005260 <RCCEx_PLLSAI2_Config+0x74>
 800524c:	e020      	b.n	8005290 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800524e:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d11d      	bne.n	8005296 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525e:	e01a      	b.n	8005296 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005260:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d116      	bne.n	800529a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005270:	e013      	b.n	800529a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005272:	4b4c      	ldr	r3, [pc, #304]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10f      	bne.n	800529e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800527e:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800528e:	e006      	b.n	800529e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	e004      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005296:	bf00      	nop
 8005298:	e002      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800529e:	bf00      	nop
    }

    if(status == HAL_OK)
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10d      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6819      	ldr	r1, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	430b      	orrs	r3, r1
 80052bc:	4939      	ldr	r1, [pc, #228]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d167      	bne.n	8005398 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052c8:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a35      	ldr	r2, [pc, #212]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d4:	f7fc fe74 	bl	8001fc0 <HAL_GetTick>
 80052d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052da:	e009      	b.n	80052f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052dc:	f7fc fe70 	bl	8001fc0 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d902      	bls.n	80052f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	73fb      	strb	r3, [r7, #15]
        break;
 80052ee:	e005      	b.n	80052fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052f0:	4b2c      	ldr	r3, [pc, #176]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1ef      	bne.n	80052dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d14a      	bne.n	8005398 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d111      	bne.n	800532c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005308:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6892      	ldr	r2, [r2, #8]
 8005318:	0211      	lsls	r1, r2, #8
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	0912      	lsrs	r2, r2, #4
 8005320:	0452      	lsls	r2, r2, #17
 8005322:	430a      	orrs	r2, r1
 8005324:	491f      	ldr	r1, [pc, #124]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005326:	4313      	orrs	r3, r2
 8005328:	614b      	str	r3, [r1, #20]
 800532a:	e011      	b.n	8005350 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800532c:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005334:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6892      	ldr	r2, [r2, #8]
 800533c:	0211      	lsls	r1, r2, #8
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6912      	ldr	r2, [r2, #16]
 8005342:	0852      	lsrs	r2, r2, #1
 8005344:	3a01      	subs	r2, #1
 8005346:	0652      	lsls	r2, r2, #25
 8005348:	430a      	orrs	r2, r1
 800534a:	4916      	ldr	r1, [pc, #88]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534c:	4313      	orrs	r3, r2
 800534e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fc fe30 	bl	8001fc0 <HAL_GetTick>
 8005360:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005362:	e009      	b.n	8005378 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005364:	f7fc fe2c 	bl	8001fc0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d902      	bls.n	8005378 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	73fb      	strb	r3, [r7, #15]
          break;
 8005376:	e005      	b.n	8005384 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0ef      	beq.n	8005364 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	4904      	ldr	r1, [pc, #16]	; (80053a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005394:	4313      	orrs	r3, r2
 8005396:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000

080053a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e049      	b.n	800544e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fc fb90 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f000 fdec 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e047      	b.n	8005500 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a23      	ldr	r2, [pc, #140]	; (800550c <HAL_TIM_Base_Start+0xb4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01d      	beq.n	80054be <HAL_TIM_Base_Start+0x66>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d018      	beq.n	80054be <HAL_TIM_Base_Start+0x66>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_TIM_Base_Start+0xb8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_TIM_Base_Start+0x66>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <HAL_TIM_Base_Start+0xbc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIM_Base_Start+0x66>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <HAL_TIM_Base_Start+0xc0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIM_Base_Start+0x66>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_TIM_Base_Start+0xc4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIM_Base_Start+0x66>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a19      	ldr	r2, [pc, #100]	; (8005520 <HAL_TIM_Base_Start+0xc8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d115      	bne.n	80054ea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <HAL_TIM_Base_Start+0xcc>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b06      	cmp	r3, #6
 80054ce:	d015      	beq.n	80054fc <HAL_TIM_Base_Start+0xa4>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d6:	d011      	beq.n	80054fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e8:	e008      	b.n	80054fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e000      	b.n	80054fe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40000400 	.word	0x40000400
 8005514:	40000800 	.word	0x40000800
 8005518:	40000c00 	.word	0x40000c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40014000 	.word	0x40014000
 8005524:	00010007 	.word	0x00010007

08005528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e049      	b.n	80055ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f841 	bl	80055d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f000 fd2c 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e03c      	b.n	8005692 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b04      	cmp	r3, #4
 800561c:	d109      	bne.n	8005632 <HAL_TIM_PWM_Start_DMA+0x46>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	e02f      	b.n	8005692 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b08      	cmp	r3, #8
 8005636:	d109      	bne.n	800564c <HAL_TIM_PWM_Start_DMA+0x60>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e022      	b.n	8005692 <HAL_TIM_PWM_Start_DMA+0xa6>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d109      	bne.n	8005666 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e015      	b.n	8005692 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b10      	cmp	r3, #16
 800566a:	d109      	bne.n	8005680 <HAL_TIM_PWM_Start_DMA+0x94>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e008      	b.n	8005692 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
 8005698:	e1ab      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e03c      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x142>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d109      	bne.n	80056ce <HAL_TIM_PWM_Start_DMA+0xe2>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e02f      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x142>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d109      	bne.n	80056e8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e022      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x142>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d109      	bne.n	8005702 <HAL_TIM_PWM_Start_DMA+0x116>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e015      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x142>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b10      	cmp	r3, #16
 8005706:	d109      	bne.n	800571c <HAL_TIM_PWM_Start_DMA+0x130>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e008      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x142>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf0c      	ite	eq
 8005728:	2301      	moveq	r3, #1
 800572a:	2300      	movne	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d034      	beq.n	800579c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_TIM_PWM_Start_DMA+0x152>
 8005738:	887b      	ldrh	r3, [r7, #2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e157      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Start_DMA+0x166>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005750:	e026      	b.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start_DMA+0x176>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005760:	e01e      	b.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d104      	bne.n	8005772 <HAL_TIM_PWM_Start_DMA+0x186>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005770:	e016      	b.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b0c      	cmp	r3, #12
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Start_DMA+0x196>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005780:	e00e      	b.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b10      	cmp	r3, #16
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005790:	e006      	b.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2202      	movs	r2, #2
 8005796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800579a:	e001      	b.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e128      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b0c      	cmp	r3, #12
 80057a4:	f200 80ae 	bhi.w	8005904 <HAL_TIM_PWM_Start_DMA+0x318>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057e5 	.word	0x080057e5
 80057b4:	08005905 	.word	0x08005905
 80057b8:	08005905 	.word	0x08005905
 80057bc:	08005905 	.word	0x08005905
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	08005905 	.word	0x08005905
 80057c8:	08005905 	.word	0x08005905
 80057cc:	08005905 	.word	0x08005905
 80057d0:	08005875 	.word	0x08005875
 80057d4:	08005905 	.word	0x08005905
 80057d8:	08005905 	.word	0x08005905
 80057dc:	08005905 	.word	0x08005905
 80057e0:	080058bd 	.word	0x080058bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	4a84      	ldr	r2, [pc, #528]	; (80059fc <HAL_TIM_PWM_Start_DMA+0x410>)
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	4a83      	ldr	r2, [pc, #524]	; (8005a00 <HAL_TIM_PWM_Start_DMA+0x414>)
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	4a82      	ldr	r2, [pc, #520]	; (8005a04 <HAL_TIM_PWM_Start_DMA+0x418>)
 80057fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3334      	adds	r3, #52	; 0x34
 8005808:	461a      	mov	r2, r3
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	f7fd ffaa 	bl	8003764 <HAL_DMA_Start_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e0eb      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005828:	60da      	str	r2, [r3, #12]
      break;
 800582a:	e06e      	b.n	800590a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	4a72      	ldr	r2, [pc, #456]	; (80059fc <HAL_TIM_PWM_Start_DMA+0x410>)
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	4a71      	ldr	r2, [pc, #452]	; (8005a00 <HAL_TIM_PWM_Start_DMA+0x414>)
 800583a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	4a70      	ldr	r2, [pc, #448]	; (8005a04 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005842:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3338      	adds	r3, #56	; 0x38
 8005850:	461a      	mov	r2, r3
 8005852:	887b      	ldrh	r3, [r7, #2]
 8005854:	f7fd ff86 	bl	8003764 <HAL_DMA_Start_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0c7      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005870:	60da      	str	r2, [r3, #12]
      break;
 8005872:	e04a      	b.n	800590a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4a60      	ldr	r2, [pc, #384]	; (80059fc <HAL_TIM_PWM_Start_DMA+0x410>)
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	4a5f      	ldr	r2, [pc, #380]	; (8005a00 <HAL_TIM_PWM_Start_DMA+0x414>)
 8005882:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	4a5e      	ldr	r2, [pc, #376]	; (8005a04 <HAL_TIM_PWM_Start_DMA+0x418>)
 800588a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	333c      	adds	r3, #60	; 0x3c
 8005898:	461a      	mov	r2, r3
 800589a:	887b      	ldrh	r3, [r7, #2]
 800589c:	f7fd ff62 	bl	8003764 <HAL_DMA_Start_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e0a3      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b8:	60da      	str	r2, [r3, #12]
      break;
 80058ba:	e026      	b.n	800590a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	4a4e      	ldr	r2, [pc, #312]	; (80059fc <HAL_TIM_PWM_Start_DMA+0x410>)
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	4a4d      	ldr	r2, [pc, #308]	; (8005a00 <HAL_TIM_PWM_Start_DMA+0x414>)
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	4a4c      	ldr	r2, [pc, #304]	; (8005a04 <HAL_TIM_PWM_Start_DMA+0x418>)
 80058d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3340      	adds	r3, #64	; 0x40
 80058e0:	461a      	mov	r2, r3
 80058e2:	887b      	ldrh	r3, [r7, #2]
 80058e4:	f7fd ff3e 	bl	8003764 <HAL_DMA_Start_IT>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07f      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005900:	60da      	str	r2, [r3, #12]
      break;
 8005902:	e002      	b.n	800590a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	bf00      	nop
  }

  if (status == HAL_OK)
 800590a:	7dfb      	ldrb	r3, [r7, #23]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d16f      	bne.n	80059f0 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff5d 	bl	80067d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a39      	ldr	r2, [pc, #228]	; (8005a08 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <HAL_TIM_PWM_Start_DMA+0x364>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a37      	ldr	r2, [pc, #220]	; (8005a0c <HAL_TIM_PWM_Start_DMA+0x420>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <HAL_TIM_PWM_Start_DMA+0x364>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a36      	ldr	r2, [pc, #216]	; (8005a10 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_TIM_PWM_Start_DMA+0x364>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a34      	ldr	r2, [pc, #208]	; (8005a14 <HAL_TIM_PWM_Start_DMA+0x428>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_TIM_PWM_Start_DMA+0x364>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a33      	ldr	r2, [pc, #204]	; (8005a18 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d101      	bne.n	8005954 <HAL_TIM_PWM_Start_DMA+0x368>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_TIM_PWM_Start_DMA+0x36a>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597c:	d018      	beq.n	80059b0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a26      	ldr	r2, [pc, #152]	; (8005a1c <HAL_TIM_PWM_Start_DMA+0x430>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a24      	ldr	r2, [pc, #144]	; (8005a20 <HAL_TIM_PWM_Start_DMA+0x434>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <HAL_TIM_PWM_Start_DMA+0x438>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1a      	ldr	r2, [pc, #104]	; (8005a0c <HAL_TIM_PWM_Start_DMA+0x420>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <HAL_TIM_PWM_Start_DMA+0x424>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d115      	bne.n	80059dc <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b06      	cmp	r3, #6
 80059c0:	d015      	beq.n	80059ee <HAL_TIM_PWM_Start_DMA+0x402>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c8:	d011      	beq.n	80059ee <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	e008      	b.n	80059ee <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e000      	b.n	80059f0 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	08005eb5 	.word	0x08005eb5
 8005a00:	08005f5d 	.word	0x08005f5d
 8005a04:	08005e23 	.word	0x08005e23
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	00010007 	.word	0x00010007

08005a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e0ff      	b.n	8005c4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b14      	cmp	r3, #20
 8005a56:	f200 80f0 	bhi.w	8005c3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005c3b 	.word	0x08005c3b
 8005a68:	08005c3b 	.word	0x08005c3b
 8005a6c:	08005c3b 	.word	0x08005c3b
 8005a70:	08005af5 	.word	0x08005af5
 8005a74:	08005c3b 	.word	0x08005c3b
 8005a78:	08005c3b 	.word	0x08005c3b
 8005a7c:	08005c3b 	.word	0x08005c3b
 8005a80:	08005b37 	.word	0x08005b37
 8005a84:	08005c3b 	.word	0x08005c3b
 8005a88:	08005c3b 	.word	0x08005c3b
 8005a8c:	08005c3b 	.word	0x08005c3b
 8005a90:	08005b77 	.word	0x08005b77
 8005a94:	08005c3b 	.word	0x08005c3b
 8005a98:	08005c3b 	.word	0x08005c3b
 8005a9c:	08005c3b 	.word	0x08005c3b
 8005aa0:	08005bb9 	.word	0x08005bb9
 8005aa4:	08005c3b 	.word	0x08005c3b
 8005aa8:	08005c3b 	.word	0x08005c3b
 8005aac:	08005c3b 	.word	0x08005c3b
 8005ab0:	08005bf9 	.word	0x08005bf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fb1c 	bl	80060f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0208 	orr.w	r2, r2, #8
 8005ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0204 	bic.w	r2, r2, #4
 8005ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	619a      	str	r2, [r3, #24]
      break;
 8005af2:	e0a5      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fb8c 	bl	8006218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6999      	ldr	r1, [r3, #24]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	021a      	lsls	r2, r3, #8
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	619a      	str	r2, [r3, #24]
      break;
 8005b34:	e084      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fbf5 	bl	800632c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0208 	orr.w	r2, r2, #8
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0204 	bic.w	r2, r2, #4
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	61da      	str	r2, [r3, #28]
      break;
 8005b74:	e064      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fc5d 	bl	800643c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69d9      	ldr	r1, [r3, #28]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	021a      	lsls	r2, r3, #8
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	61da      	str	r2, [r3, #28]
      break;
 8005bb6:	e043      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fca6 	bl	8006510 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0208 	orr.w	r2, r2, #8
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0204 	bic.w	r2, r2, #4
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bf6:	e023      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fcea 	bl	80065d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c38:	e002      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop

08005c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIM_ConfigClockSource+0x1c>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e0b6      	b.n	8005dde <HAL_TIM_ConfigClockSource+0x18a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cac:	d03e      	beq.n	8005d2c <HAL_TIM_ConfigClockSource+0xd8>
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb2:	f200 8087 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	f000 8086 	beq.w	8005dca <HAL_TIM_ConfigClockSource+0x176>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d87f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005cc4:	2b70      	cmp	r3, #112	; 0x70
 8005cc6:	d01a      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0xaa>
 8005cc8:	2b70      	cmp	r3, #112	; 0x70
 8005cca:	d87b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005ccc:	2b60      	cmp	r3, #96	; 0x60
 8005cce:	d050      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x11e>
 8005cd0:	2b60      	cmp	r3, #96	; 0x60
 8005cd2:	d877      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005cd4:	2b50      	cmp	r3, #80	; 0x50
 8005cd6:	d03c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0xfe>
 8005cd8:	2b50      	cmp	r3, #80	; 0x50
 8005cda:	d873      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d058      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x13e>
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d86f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005ce4:	2b30      	cmp	r3, #48	; 0x30
 8005ce6:	d064      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d86b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d060      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15e>
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d867      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05c      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15e>
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d05a      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x15e>
 8005cfc:	e062      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d0e:	f000 fd43 	bl	8006798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	609a      	str	r2, [r3, #8]
      break;
 8005d2a:	e04f      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d3c:	f000 fd2c 	bl	8006798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d4e:	609a      	str	r2, [r3, #8]
      break;
 8005d50:	e03c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 fca0 	bl	80066a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2150      	movs	r1, #80	; 0x50
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fcf9 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e02c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 fcbf 	bl	8006702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2160      	movs	r1, #96	; 0x60
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fce9 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e01c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 fc80 	bl	80066a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2140      	movs	r1, #64	; 0x40
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fcd9 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8005db0:	e00c      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f000 fcd0 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 8005dc2:	e003      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc8:	e000      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d107      	bne.n	8005e4a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e48:	e02a      	b.n	8005ea0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d107      	bne.n	8005e64 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2202      	movs	r2, #2
 8005e58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e62:	e01d      	b.n	8005ea0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d107      	bne.n	8005e7e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2204      	movs	r2, #4
 8005e72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e7c:	e010      	b.n	8005ea0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d107      	bne.n	8005e98 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e96:	e003      	b.n	8005ea0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ffb4 	bl	8005e0e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d10b      	bne.n	8005ee4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d136      	bne.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee2:	e031      	b.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d10b      	bne.n	8005f06 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d125      	bne.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f04:	e020      	b.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d10b      	bne.n	8005f28 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2204      	movs	r2, #4
 8005f14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d114      	bne.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f26:	e00f      	b.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d10a      	bne.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2208      	movs	r2, #8
 8005f36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d103      	bne.n	8005f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff4c 	bl	8005de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d103      	bne.n	8005f7c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	771a      	strb	r2, [r3, #28]
 8005f7a:	e019      	b.n	8005fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d103      	bne.n	8005f8e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	771a      	strb	r2, [r3, #28]
 8005f8c:	e010      	b.n	8005fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d103      	bne.n	8005fa0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	771a      	strb	r2, [r3, #28]
 8005f9e:	e007      	b.n	8005fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d102      	bne.n	8005fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2208      	movs	r2, #8
 8005fae:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7ff ff22 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a40      	ldr	r2, [pc, #256]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3d      	ldr	r2, [pc, #244]	; (80060dc <TIM_Base_SetConfig+0x118>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3c      	ldr	r2, [pc, #240]	; (80060e0 <TIM_Base_SetConfig+0x11c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3b      	ldr	r2, [pc, #236]	; (80060e4 <TIM_Base_SetConfig+0x120>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3a      	ldr	r2, [pc, #232]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2f      	ldr	r2, [pc, #188]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01f      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d01b      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2c      	ldr	r2, [pc, #176]	; (80060dc <TIM_Base_SetConfig+0x118>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d017      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2b      	ldr	r2, [pc, #172]	; (80060e0 <TIM_Base_SetConfig+0x11c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <TIM_Base_SetConfig+0x120>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a28      	ldr	r2, [pc, #160]	; (80060ec <TIM_Base_SetConfig+0x128>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <TIM_Base_SetConfig+0x12c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_Base_SetConfig+0x9a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <TIM_Base_SetConfig+0x130>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a10      	ldr	r2, [pc, #64]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00f      	beq.n	80060bc <TIM_Base_SetConfig+0xf8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_Base_SetConfig+0xf8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a11      	ldr	r2, [pc, #68]	; (80060ec <TIM_Base_SetConfig+0x128>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_Base_SetConfig+0xf8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <TIM_Base_SetConfig+0x12c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0xf8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a0f      	ldr	r2, [pc, #60]	; (80060f4 <TIM_Base_SetConfig+0x130>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d103      	bne.n	80060c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	615a      	str	r2, [r3, #20]
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40013400 	.word	0x40013400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	f023 0201 	bic.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0302 	bic.w	r3, r3, #2
 8006144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a2c      	ldr	r2, [pc, #176]	; (8006204 <TIM_OC1_SetConfig+0x10c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00f      	beq.n	8006178 <TIM_OC1_SetConfig+0x80>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a2b      	ldr	r2, [pc, #172]	; (8006208 <TIM_OC1_SetConfig+0x110>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00b      	beq.n	8006178 <TIM_OC1_SetConfig+0x80>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a2a      	ldr	r2, [pc, #168]	; (800620c <TIM_OC1_SetConfig+0x114>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_OC1_SetConfig+0x80>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a29      	ldr	r2, [pc, #164]	; (8006210 <TIM_OC1_SetConfig+0x118>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC1_SetConfig+0x80>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a28      	ldr	r2, [pc, #160]	; (8006214 <TIM_OC1_SetConfig+0x11c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10c      	bne.n	8006192 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0308 	bic.w	r3, r3, #8
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f023 0304 	bic.w	r3, r3, #4
 8006190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <TIM_OC1_SetConfig+0x10c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00f      	beq.n	80061ba <TIM_OC1_SetConfig+0xc2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <TIM_OC1_SetConfig+0x110>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00b      	beq.n	80061ba <TIM_OC1_SetConfig+0xc2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a19      	ldr	r2, [pc, #100]	; (800620c <TIM_OC1_SetConfig+0x114>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d007      	beq.n	80061ba <TIM_OC1_SetConfig+0xc2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a18      	ldr	r2, [pc, #96]	; (8006210 <TIM_OC1_SetConfig+0x118>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_OC1_SetConfig+0xc2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a17      	ldr	r2, [pc, #92]	; (8006214 <TIM_OC1_SetConfig+0x11c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d111      	bne.n	80061de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	621a      	str	r2, [r3, #32]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40013400 	.word	0x40013400
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800

08006218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f023 0210 	bic.w	r2, r3, #16
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0320 	bic.w	r3, r3, #32
 8006266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a28      	ldr	r2, [pc, #160]	; (8006318 <TIM_OC2_SetConfig+0x100>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC2_SetConfig+0x6c>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a27      	ldr	r2, [pc, #156]	; (800631c <TIM_OC2_SetConfig+0x104>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d10d      	bne.n	80062a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <TIM_OC2_SetConfig+0x100>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <TIM_OC2_SetConfig+0xb0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	; (800631c <TIM_OC2_SetConfig+0x104>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_OC2_SetConfig+0xb0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a1b      	ldr	r2, [pc, #108]	; (8006320 <TIM_OC2_SetConfig+0x108>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_OC2_SetConfig+0xb0>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a1a      	ldr	r2, [pc, #104]	; (8006324 <TIM_OC2_SetConfig+0x10c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC2_SetConfig+0xb0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a19      	ldr	r2, [pc, #100]	; (8006328 <TIM_OC2_SetConfig+0x110>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d113      	bne.n	80062f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40014000 	.word	0x40014000
 8006324:	40014400 	.word	0x40014400
 8006328:	40014800 	.word	0x40014800

0800632c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	021b      	lsls	r3, r3, #8
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a27      	ldr	r2, [pc, #156]	; (8006428 <TIM_OC3_SetConfig+0xfc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC3_SetConfig+0x6a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a26      	ldr	r2, [pc, #152]	; (800642c <TIM_OC3_SetConfig+0x100>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d10d      	bne.n	80063b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800639c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <TIM_OC3_SetConfig+0xfc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_OC3_SetConfig+0xae>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <TIM_OC3_SetConfig+0x100>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_OC3_SetConfig+0xae>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1a      	ldr	r2, [pc, #104]	; (8006430 <TIM_OC3_SetConfig+0x104>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_OC3_SetConfig+0xae>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a19      	ldr	r2, [pc, #100]	; (8006434 <TIM_OC3_SetConfig+0x108>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC3_SetConfig+0xae>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <TIM_OC3_SetConfig+0x10c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d113      	bne.n	8006402 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800

0800643c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800648a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a18      	ldr	r2, [pc, #96]	; (80064fc <TIM_OC4_SetConfig+0xc0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00f      	beq.n	80064c0 <TIM_OC4_SetConfig+0x84>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a17      	ldr	r2, [pc, #92]	; (8006500 <TIM_OC4_SetConfig+0xc4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <TIM_OC4_SetConfig+0x84>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a16      	ldr	r2, [pc, #88]	; (8006504 <TIM_OC4_SetConfig+0xc8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_OC4_SetConfig+0x84>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <TIM_OC4_SetConfig+0xcc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC4_SetConfig+0x84>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a14      	ldr	r2, [pc, #80]	; (800650c <TIM_OC4_SetConfig+0xd0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d109      	bne.n	80064d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	019b      	lsls	r3, r3, #6
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400
 800650c:	40014800 	.word	0x40014800

08006510 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006554:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <TIM_OC5_SetConfig+0xb4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00f      	beq.n	800658a <TIM_OC5_SetConfig+0x7a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <TIM_OC5_SetConfig+0xb8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_OC5_SetConfig+0x7a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a15      	ldr	r2, [pc, #84]	; (80065cc <TIM_OC5_SetConfig+0xbc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <TIM_OC5_SetConfig+0x7a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <TIM_OC5_SetConfig+0xc0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_OC5_SetConfig+0x7a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <TIM_OC5_SetConfig+0xc4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d109      	bne.n	800659e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006590:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	621a      	str	r2, [r3, #32]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40013400 	.word	0x40013400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40014400 	.word	0x40014400
 80065d4:	40014800 	.word	0x40014800

080065d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800661e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	051b      	lsls	r3, r3, #20
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a18      	ldr	r2, [pc, #96]	; (8006690 <TIM_OC6_SetConfig+0xb8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00f      	beq.n	8006654 <TIM_OC6_SetConfig+0x7c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a17      	ldr	r2, [pc, #92]	; (8006694 <TIM_OC6_SetConfig+0xbc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00b      	beq.n	8006654 <TIM_OC6_SetConfig+0x7c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a16      	ldr	r2, [pc, #88]	; (8006698 <TIM_OC6_SetConfig+0xc0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_OC6_SetConfig+0x7c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a15      	ldr	r2, [pc, #84]	; (800669c <TIM_OC6_SetConfig+0xc4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_OC6_SetConfig+0x7c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <TIM_OC6_SetConfig+0xc8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d109      	bne.n	8006668 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	029b      	lsls	r3, r3, #10
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40013400 	.word	0x40013400
 8006698:	40014000 	.word	0x40014000
 800669c:	40014400 	.word	0x40014400
 80066a0:	40014800 	.word	0x40014800

080066a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f023 030a 	bic.w	r3, r3, #10
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b087      	sub	sp, #28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f023 0210 	bic.w	r2, r3, #16
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800672c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800673e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	f043 0307 	orr.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	021a      	lsls	r2, r3, #8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2201      	movs	r2, #1
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1a      	ldr	r2, [r3, #32]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	43db      	mvns	r3, r3
 80067fa:	401a      	ands	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a1a      	ldr	r2, [r3, #32]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	431a      	orrs	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006838:	2302      	movs	r3, #2
 800683a:	e068      	b.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a2e      	ldr	r2, [pc, #184]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2d      	ldr	r2, [pc, #180]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d108      	bne.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006876:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006888:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1e      	ldr	r2, [pc, #120]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d01d      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ae:	d018      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00e      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a18      	ldr	r2, [pc, #96]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d009      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a13      	ldr	r2, [pc, #76]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a14      	ldr	r2, [pc, #80]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10c      	bne.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40013400 	.word	0x40013400
 8006924:	40000400 	.word	0x40000400
 8006928:	40000800 	.word	0x40000800
 800692c:	40000c00 	.word	0x40000c00
 8006930:	40014000 	.word	0x40014000

08006934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e040      	b.n	80069c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb f998 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2224      	movs	r2, #36	; 0x24
 8006960:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fb6a 	bl	8007054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8af 	bl	8006ae4 <UART_SetConfig>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e01b      	b.n	80069c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800699e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fbe9 	bl	8007198 <UART_CheckIdleState>
 80069c6:	4603      	mov	r3, r0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d178      	bne.n	8006ada <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Transmit+0x24>
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e071      	b.n	8006adc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2221      	movs	r2, #33	; 0x21
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a06:	f7fb fadb 	bl	8001fc0 <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	88fa      	ldrh	r2, [r7, #6]
 8006a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a24:	d108      	bne.n	8006a38 <HAL_UART_Transmit+0x68>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e003      	b.n	8006a40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a40:	e030      	b.n	8006aa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2180      	movs	r1, #128	; 0x80
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fc4b 	bl	80072e8 <UART_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e03c      	b.n	8006adc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	881a      	ldrh	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a74:	b292      	uxth	r2, r2
 8006a76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e008      	b.n	8006a92 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	781a      	ldrb	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	b292      	uxth	r2, r2
 8006a8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1c8      	bne.n	8006a42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2140      	movs	r1, #64	; 0x40
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fc14 	bl	80072e8 <UART_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e005      	b.n	8006adc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e000      	b.n	8006adc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
  }
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ae8:	b08a      	sub	sp, #40	; 0x28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4ba4      	ldr	r3, [pc, #656]	; (8006da4 <UART_SetConfig+0x2c0>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	6812      	ldr	r2, [r2, #0]
 8006b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a99      	ldr	r2, [pc, #612]	; (8006da8 <UART_SetConfig+0x2c4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d004      	beq.n	8006b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b60:	430a      	orrs	r2, r1
 8006b62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a90      	ldr	r2, [pc, #576]	; (8006dac <UART_SetConfig+0x2c8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d126      	bne.n	8006bbc <UART_SetConfig+0xd8>
 8006b6e:	4b90      	ldr	r3, [pc, #576]	; (8006db0 <UART_SetConfig+0x2cc>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d81b      	bhi.n	8006bb4 <UART_SetConfig+0xd0>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <UART_SetConfig+0xa0>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006b95 	.word	0x08006b95
 8006b88:	08006ba5 	.word	0x08006ba5
 8006b8c:	08006b9d 	.word	0x08006b9d
 8006b90:	08006bad 	.word	0x08006bad
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e116      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e112      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006baa:	e10e      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006bac:	2308      	movs	r3, #8
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e10a      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bba:	e106      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a7c      	ldr	r2, [pc, #496]	; (8006db4 <UART_SetConfig+0x2d0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d138      	bne.n	8006c38 <UART_SetConfig+0x154>
 8006bc6:	4b7a      	ldr	r3, [pc, #488]	; (8006db0 <UART_SetConfig+0x2cc>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bcc:	f003 030c 	and.w	r3, r3, #12
 8006bd0:	2b0c      	cmp	r3, #12
 8006bd2:	d82d      	bhi.n	8006c30 <UART_SetConfig+0x14c>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0xf8>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c11 	.word	0x08006c11
 8006be0:	08006c31 	.word	0x08006c31
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006c31 	.word	0x08006c31
 8006bec:	08006c21 	.word	0x08006c21
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c31 	.word	0x08006c31
 8006bf8:	08006c31 	.word	0x08006c31
 8006bfc:	08006c19 	.word	0x08006c19
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c29 	.word	0x08006c29
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c16:	e0d8      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1e:	e0d4      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c20:	2304      	movs	r3, #4
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c26:	e0d0      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c28:	2308      	movs	r3, #8
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2e:	e0cc      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c30:	2310      	movs	r3, #16
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c36:	e0c8      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a5e      	ldr	r2, [pc, #376]	; (8006db8 <UART_SetConfig+0x2d4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d125      	bne.n	8006c8e <UART_SetConfig+0x1aa>
 8006c42:	4b5b      	ldr	r3, [pc, #364]	; (8006db0 <UART_SetConfig+0x2cc>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c4c:	2b30      	cmp	r3, #48	; 0x30
 8006c4e:	d016      	beq.n	8006c7e <UART_SetConfig+0x19a>
 8006c50:	2b30      	cmp	r3, #48	; 0x30
 8006c52:	d818      	bhi.n	8006c86 <UART_SetConfig+0x1a2>
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d00a      	beq.n	8006c6e <UART_SetConfig+0x18a>
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d814      	bhi.n	8006c86 <UART_SetConfig+0x1a2>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <UART_SetConfig+0x182>
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d008      	beq.n	8006c76 <UART_SetConfig+0x192>
 8006c64:	e00f      	b.n	8006c86 <UART_SetConfig+0x1a2>
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6c:	e0ad      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c74:	e0a9      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c76:	2304      	movs	r3, #4
 8006c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7c:	e0a5      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c84:	e0a1      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c86:	2310      	movs	r3, #16
 8006c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8c:	e09d      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a4a      	ldr	r2, [pc, #296]	; (8006dbc <UART_SetConfig+0x2d8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d125      	bne.n	8006ce4 <UART_SetConfig+0x200>
 8006c98:	4b45      	ldr	r3, [pc, #276]	; (8006db0 <UART_SetConfig+0x2cc>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ca4:	d016      	beq.n	8006cd4 <UART_SetConfig+0x1f0>
 8006ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ca8:	d818      	bhi.n	8006cdc <UART_SetConfig+0x1f8>
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d00a      	beq.n	8006cc4 <UART_SetConfig+0x1e0>
 8006cae:	2b80      	cmp	r3, #128	; 0x80
 8006cb0:	d814      	bhi.n	8006cdc <UART_SetConfig+0x1f8>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <UART_SetConfig+0x1d8>
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d008      	beq.n	8006ccc <UART_SetConfig+0x1e8>
 8006cba:	e00f      	b.n	8006cdc <UART_SetConfig+0x1f8>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc2:	e082      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cca:	e07e      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e07a      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	e076      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce2:	e072      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a35      	ldr	r2, [pc, #212]	; (8006dc0 <UART_SetConfig+0x2dc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d12a      	bne.n	8006d44 <UART_SetConfig+0x260>
 8006cee:	4b30      	ldr	r3, [pc, #192]	; (8006db0 <UART_SetConfig+0x2cc>)
 8006cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cfc:	d01a      	beq.n	8006d34 <UART_SetConfig+0x250>
 8006cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d02:	d81b      	bhi.n	8006d3c <UART_SetConfig+0x258>
 8006d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d08:	d00c      	beq.n	8006d24 <UART_SetConfig+0x240>
 8006d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0e:	d815      	bhi.n	8006d3c <UART_SetConfig+0x258>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <UART_SetConfig+0x238>
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d18:	d008      	beq.n	8006d2c <UART_SetConfig+0x248>
 8006d1a:	e00f      	b.n	8006d3c <UART_SetConfig+0x258>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d22:	e052      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2a:	e04e      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d32:	e04a      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3a:	e046      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d42:	e042      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <UART_SetConfig+0x2c4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d13a      	bne.n	8006dc4 <UART_SetConfig+0x2e0>
 8006d4e:	4b18      	ldr	r3, [pc, #96]	; (8006db0 <UART_SetConfig+0x2cc>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d5c:	d01a      	beq.n	8006d94 <UART_SetConfig+0x2b0>
 8006d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d62:	d81b      	bhi.n	8006d9c <UART_SetConfig+0x2b8>
 8006d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d68:	d00c      	beq.n	8006d84 <UART_SetConfig+0x2a0>
 8006d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6e:	d815      	bhi.n	8006d9c <UART_SetConfig+0x2b8>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <UART_SetConfig+0x298>
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d78:	d008      	beq.n	8006d8c <UART_SetConfig+0x2a8>
 8006d7a:	e00f      	b.n	8006d9c <UART_SetConfig+0x2b8>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d82:	e022      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8a:	e01e      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d92:	e01a      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e016      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da2:	e012      	b.n	8006dca <UART_SetConfig+0x2e6>
 8006da4:	efff69f3 	.word	0xefff69f3
 8006da8:	40008000 	.word	0x40008000
 8006dac:	40013800 	.word	0x40013800
 8006db0:	40021000 	.word	0x40021000
 8006db4:	40004400 	.word	0x40004400
 8006db8:	40004800 	.word	0x40004800
 8006dbc:	40004c00 	.word	0x40004c00
 8006dc0:	40005000 	.word	0x40005000
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a9f      	ldr	r2, [pc, #636]	; (800704c <UART_SetConfig+0x568>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d17a      	bne.n	8006eca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d824      	bhi.n	8006e26 <UART_SetConfig+0x342>
 8006ddc:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x300>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e27 	.word	0x08006e27
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e27 	.word	0x08006e27
 8006df4:	08006e17 	.word	0x08006e17
 8006df8:	08006e27 	.word	0x08006e27
 8006dfc:	08006e27 	.word	0x08006e27
 8006e00:	08006e27 	.word	0x08006e27
 8006e04:	08006e1f 	.word	0x08006e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7fd fd86 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8006e0c:	61f8      	str	r0, [r7, #28]
        break;
 8006e0e:	e010      	b.n	8006e32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e10:	4b8f      	ldr	r3, [pc, #572]	; (8007050 <UART_SetConfig+0x56c>)
 8006e12:	61fb      	str	r3, [r7, #28]
        break;
 8006e14:	e00d      	b.n	8006e32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e16:	f7fd fce7 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8006e1a:	61f8      	str	r0, [r7, #28]
        break;
 8006e1c:	e009      	b.n	8006e32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e22:	61fb      	str	r3, [r7, #28]
        break;
 8006e24:	e005      	b.n	8006e32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80fb 	beq.w	8007030 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	4413      	add	r3, r2
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d305      	bcc.n	8006e56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d903      	bls.n	8006e5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e5c:	e0e8      	b.n	8007030 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	2200      	movs	r2, #0
 8006e62:	461c      	mov	r4, r3
 8006e64:	4615      	mov	r5, r2
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	022b      	lsls	r3, r5, #8
 8006e70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e74:	0222      	lsls	r2, r4, #8
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	6849      	ldr	r1, [r1, #4]
 8006e7a:	0849      	lsrs	r1, r1, #1
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	4688      	mov	r8, r1
 8006e80:	4681      	mov	r9, r0
 8006e82:	eb12 0a08 	adds.w	sl, r2, r8
 8006e86:	eb43 0b09 	adc.w	fp, r3, r9
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e98:	4650      	mov	r0, sl
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	f7f9 ff34 	bl	8000d08 <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eae:	d308      	bcc.n	8006ec2 <UART_SetConfig+0x3de>
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb6:	d204      	bcs.n	8006ec2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	60da      	str	r2, [r3, #12]
 8006ec0:	e0b6      	b.n	8007030 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ec8:	e0b2      	b.n	8007030 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed2:	d15e      	bne.n	8006f92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d828      	bhi.n	8006f2e <UART_SetConfig+0x44a>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <UART_SetConfig+0x400>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f11 	.word	0x08006f11
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	08006f2f 	.word	0x08006f2f
 8006ef4:	08006f1f 	.word	0x08006f1f
 8006ef8:	08006f2f 	.word	0x08006f2f
 8006efc:	08006f2f 	.word	0x08006f2f
 8006f00:	08006f2f 	.word	0x08006f2f
 8006f04:	08006f27 	.word	0x08006f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f08:	f7fd fd06 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8006f0c:	61f8      	str	r0, [r7, #28]
        break;
 8006f0e:	e014      	b.n	8006f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f10:	f7fd fd18 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8006f14:	61f8      	str	r0, [r7, #28]
        break;
 8006f16:	e010      	b.n	8006f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f18:	4b4d      	ldr	r3, [pc, #308]	; (8007050 <UART_SetConfig+0x56c>)
 8006f1a:	61fb      	str	r3, [r7, #28]
        break;
 8006f1c:	e00d      	b.n	8006f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f1e:	f7fd fc63 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8006f22:	61f8      	str	r0, [r7, #28]
        break;
 8006f24:	e009      	b.n	8006f3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2a:	61fb      	str	r3, [r7, #28]
        break;
 8006f2c:	e005      	b.n	8006f3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d077      	beq.n	8007030 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	005a      	lsls	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	441a      	add	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b0f      	cmp	r3, #15
 8006f5a:	d916      	bls.n	8006f8a <UART_SetConfig+0x4a6>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f62:	d212      	bcs.n	8006f8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f023 030f 	bic.w	r3, r3, #15
 8006f6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	8afb      	ldrh	r3, [r7, #22]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	8afa      	ldrh	r2, [r7, #22]
 8006f86:	60da      	str	r2, [r3, #12]
 8006f88:	e052      	b.n	8007030 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f90:	e04e      	b.n	8007030 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d827      	bhi.n	8006fea <UART_SetConfig+0x506>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <UART_SetConfig+0x4bc>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fcd 	.word	0x08006fcd
 8006fa8:	08006fd5 	.word	0x08006fd5
 8006fac:	08006feb 	.word	0x08006feb
 8006fb0:	08006fdb 	.word	0x08006fdb
 8006fb4:	08006feb 	.word	0x08006feb
 8006fb8:	08006feb 	.word	0x08006feb
 8006fbc:	08006feb 	.word	0x08006feb
 8006fc0:	08006fe3 	.word	0x08006fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc4:	f7fd fca8 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8006fc8:	61f8      	str	r0, [r7, #28]
        break;
 8006fca:	e014      	b.n	8006ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fcc:	f7fd fcba 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8006fd0:	61f8      	str	r0, [r7, #28]
        break;
 8006fd2:	e010      	b.n	8006ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd4:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <UART_SetConfig+0x56c>)
 8006fd6:	61fb      	str	r3, [r7, #28]
        break;
 8006fd8:	e00d      	b.n	8006ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fda:	f7fd fc05 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8006fde:	61f8      	str	r0, [r7, #28]
        break;
 8006fe0:	e009      	b.n	8006ff6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe6:	61fb      	str	r3, [r7, #28]
        break;
 8006fe8:	e005      	b.n	8006ff6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ff4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d019      	beq.n	8007030 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	085a      	lsrs	r2, r3, #1
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b0f      	cmp	r3, #15
 8007014:	d909      	bls.n	800702a <UART_SetConfig+0x546>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701c:	d205      	bcs.n	800702a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60da      	str	r2, [r3, #12]
 8007028:	e002      	b.n	8007030 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800703c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007040:	4618      	mov	r0, r3
 8007042:	3728      	adds	r7, #40	; 0x28
 8007044:	46bd      	mov	sp, r7
 8007046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704a:	bf00      	nop
 800704c:	40008000 	.word	0x40008000
 8007050:	00f42400 	.word	0x00f42400

08007054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01a      	beq.n	800716a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007152:	d10a      	bne.n	800716a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b098      	sub	sp, #96	; 0x60
 800719c:	af02      	add	r7, sp, #8
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071a8:	f7fa ff0a 	bl	8001fc0 <HAL_GetTick>
 80071ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d12e      	bne.n	800721a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c4:	2200      	movs	r2, #0
 80071c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f88c 	bl	80072e8 <UART_WaitOnFlagUntilTimeout>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d021      	beq.n	800721a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ea:	653b      	str	r3, [r7, #80]	; 0x50
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f4:	647b      	str	r3, [r7, #68]	; 0x44
 80071f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e6      	bne.n	80071d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e062      	b.n	80072e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d149      	bne.n	80072bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007230:	2200      	movs	r2, #0
 8007232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f856 	bl	80072e8 <UART_WaitOnFlagUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d03c      	beq.n	80072bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	623b      	str	r3, [r7, #32]
   return(result);
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007260:	633b      	str	r3, [r7, #48]	; 0x30
 8007262:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	60fb      	str	r3, [r7, #12]
   return(result);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	64bb      	str	r3, [r7, #72]	; 0x48
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007294:	61fa      	str	r2, [r7, #28]
 8007296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	69b9      	ldr	r1, [r7, #24]
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	617b      	str	r3, [r7, #20]
   return(result);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e011      	b.n	80072e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3758      	adds	r7, #88	; 0x58
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f8:	e049      	b.n	800738e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d045      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007302:	f7fa fe5d 	bl	8001fc0 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <UART_WaitOnFlagUntilTimeout+0x30>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e048      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d031      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b08      	cmp	r3, #8
 8007336:	d110      	bne.n	800735a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2208      	movs	r2, #8
 800733e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f838 	bl	80073b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2208      	movs	r2, #8
 800734a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e029      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007368:	d111      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f81e 	bl	80073b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e00f      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69da      	ldr	r2, [r3, #28]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4013      	ands	r3, r2
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	429a      	cmp	r2, r3
 800739c:	bf0c      	ite	eq
 800739e:	2301      	moveq	r3, #1
 80073a0:	2300      	movne	r3, #0
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d0a6      	beq.n	80072fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b095      	sub	sp, #84	; 0x54
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073dc:	643b      	str	r3, [r7, #64]	; 0x40
 80073de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e6      	bne.n	80073be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	64bb      	str	r3, [r7, #72]	; 0x48
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e5      	bne.n	80073f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007428:	2b01      	cmp	r3, #1
 800742a:	d118      	bne.n	800745e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	60bb      	str	r3, [r7, #8]
   return(result);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	647b      	str	r3, [r7, #68]	; 0x44
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6979      	ldr	r1, [r7, #20]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	613b      	str	r3, [r7, #16]
   return(result);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e6      	bne.n	800742c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007472:	bf00      	nop
 8007474:	3754      	adds	r7, #84	; 0x54
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <arm_max_f32>:
 8007480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007484:	1e4f      	subs	r7, r1, #1
 8007486:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800748a:	f100 0e04 	add.w	lr, r0, #4
 800748e:	edd0 7a00 	vldr	s15, [r0]
 8007492:	d058      	beq.n	8007546 <arm_max_f32+0xc6>
 8007494:	3014      	adds	r0, #20
 8007496:	46c4      	mov	ip, r8
 8007498:	2604      	movs	r6, #4
 800749a:	2400      	movs	r4, #0
 800749c:	ed10 6a04 	vldr	s12, [r0, #-16]
 80074a0:	ed50 6a03 	vldr	s13, [r0, #-12]
 80074a4:	ed10 7a02 	vldr	s14, [r0, #-8]
 80074a8:	ed50 5a01 	vldr	s11, [r0, #-4]
 80074ac:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80074b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b4:	bfc8      	it	gt
 80074b6:	eef0 7a46 	vmovgt.f32	s15, s12
 80074ba:	f1a6 0503 	sub.w	r5, r6, #3
 80074be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80074c2:	bfc8      	it	gt
 80074c4:	462c      	movgt	r4, r5
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	bf48      	it	mi
 80074cc:	eef0 7a66 	vmovmi.f32	s15, s13
 80074d0:	f1a6 0502 	sub.w	r5, r6, #2
 80074d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074d8:	bf48      	it	mi
 80074da:	462c      	movmi	r4, r5
 80074dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e0:	bf48      	it	mi
 80074e2:	eef0 7a47 	vmovmi.f32	s15, s14
 80074e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80074ea:	eef4 7ae5 	vcmpe.f32	s15, s11
 80074ee:	bf48      	it	mi
 80074f0:	462c      	movmi	r4, r5
 80074f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f6:	bf48      	it	mi
 80074f8:	4634      	movmi	r4, r6
 80074fa:	bf48      	it	mi
 80074fc:	eef0 7a65 	vmovmi.f32	s15, s11
 8007500:	f1bc 0c01 	subs.w	ip, ip, #1
 8007504:	f106 0604 	add.w	r6, r6, #4
 8007508:	f100 0010 	add.w	r0, r0, #16
 800750c:	d1c6      	bne.n	800749c <arm_max_f32+0x1c>
 800750e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8007512:	f017 0003 	ands.w	r0, r7, #3
 8007516:	d018      	beq.n	800754a <arm_max_f32+0xca>
 8007518:	1a08      	subs	r0, r1, r0
 800751a:	ecbe 7a01 	vldmia	lr!, {s14}
 800751e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007526:	bfc8      	it	gt
 8007528:	4604      	movgt	r4, r0
 800752a:	f100 0001 	add.w	r0, r0, #1
 800752e:	bfd8      	it	le
 8007530:	eeb0 7a67 	vmovle.f32	s14, s15
 8007534:	4288      	cmp	r0, r1
 8007536:	eef0 7a47 	vmov.f32	s15, s14
 800753a:	d1ee      	bne.n	800751a <arm_max_f32+0x9a>
 800753c:	ed82 7a00 	vstr	s14, [r2]
 8007540:	601c      	str	r4, [r3, #0]
 8007542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007546:	4644      	mov	r4, r8
 8007548:	e7e3      	b.n	8007512 <arm_max_f32+0x92>
 800754a:	eeb0 7a67 	vmov.f32	s14, s15
 800754e:	e7f5      	b.n	800753c <arm_max_f32+0xbc>

08007550 <arm_rfft_fast_init_f32>:
 8007550:	084b      	lsrs	r3, r1, #1
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	b410      	push	{r4}
 8007556:	8201      	strh	r1, [r0, #16]
 8007558:	8003      	strh	r3, [r0, #0]
 800755a:	d047      	beq.n	80075ec <arm_rfft_fast_init_f32+0x9c>
 800755c:	d917      	bls.n	800758e <arm_rfft_fast_init_f32+0x3e>
 800755e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007562:	d03d      	beq.n	80075e0 <arm_rfft_fast_init_f32+0x90>
 8007564:	d929      	bls.n	80075ba <arm_rfft_fast_init_f32+0x6a>
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756a:	d020      	beq.n	80075ae <arm_rfft_fast_init_f32+0x5e>
 800756c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007570:	d113      	bne.n	800759a <arm_rfft_fast_init_f32+0x4a>
 8007572:	4921      	ldr	r1, [pc, #132]	; (80075f8 <arm_rfft_fast_init_f32+0xa8>)
 8007574:	4a21      	ldr	r2, [pc, #132]	; (80075fc <arm_rfft_fast_init_f32+0xac>)
 8007576:	4b22      	ldr	r3, [pc, #136]	; (8007600 <arm_rfft_fast_init_f32+0xb0>)
 8007578:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800757c:	8184      	strh	r4, [r0, #12]
 800757e:	6081      	str	r1, [r0, #8]
 8007580:	6042      	str	r2, [r0, #4]
 8007582:	6143      	str	r3, [r0, #20]
 8007584:	2000      	movs	r0, #0
 8007586:	b240      	sxtb	r0, r0
 8007588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	2b20      	cmp	r3, #32
 8007590:	d01c      	beq.n	80075cc <arm_rfft_fast_init_f32+0x7c>
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d006      	beq.n	80075a4 <arm_rfft_fast_init_f32+0x54>
 8007596:	2b10      	cmp	r3, #16
 8007598:	d01d      	beq.n	80075d6 <arm_rfft_fast_init_f32+0x86>
 800759a:	20ff      	movs	r0, #255	; 0xff
 800759c:	b240      	sxtb	r0, r0
 800759e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	2438      	movs	r4, #56	; 0x38
 80075a6:	4917      	ldr	r1, [pc, #92]	; (8007604 <arm_rfft_fast_init_f32+0xb4>)
 80075a8:	4a17      	ldr	r2, [pc, #92]	; (8007608 <arm_rfft_fast_init_f32+0xb8>)
 80075aa:	4b18      	ldr	r3, [pc, #96]	; (800760c <arm_rfft_fast_init_f32+0xbc>)
 80075ac:	e7e6      	b.n	800757c <arm_rfft_fast_init_f32+0x2c>
 80075ae:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80075b2:	4917      	ldr	r1, [pc, #92]	; (8007610 <arm_rfft_fast_init_f32+0xc0>)
 80075b4:	4a17      	ldr	r2, [pc, #92]	; (8007614 <arm_rfft_fast_init_f32+0xc4>)
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <arm_rfft_fast_init_f32+0xc8>)
 80075b8:	e7e0      	b.n	800757c <arm_rfft_fast_init_f32+0x2c>
 80075ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075be:	d1ec      	bne.n	800759a <arm_rfft_fast_init_f32+0x4a>
 80075c0:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80075c4:	4915      	ldr	r1, [pc, #84]	; (800761c <arm_rfft_fast_init_f32+0xcc>)
 80075c6:	4a16      	ldr	r2, [pc, #88]	; (8007620 <arm_rfft_fast_init_f32+0xd0>)
 80075c8:	4b16      	ldr	r3, [pc, #88]	; (8007624 <arm_rfft_fast_init_f32+0xd4>)
 80075ca:	e7d7      	b.n	800757c <arm_rfft_fast_init_f32+0x2c>
 80075cc:	2430      	movs	r4, #48	; 0x30
 80075ce:	4916      	ldr	r1, [pc, #88]	; (8007628 <arm_rfft_fast_init_f32+0xd8>)
 80075d0:	4a16      	ldr	r2, [pc, #88]	; (800762c <arm_rfft_fast_init_f32+0xdc>)
 80075d2:	4b17      	ldr	r3, [pc, #92]	; (8007630 <arm_rfft_fast_init_f32+0xe0>)
 80075d4:	e7d2      	b.n	800757c <arm_rfft_fast_init_f32+0x2c>
 80075d6:	2414      	movs	r4, #20
 80075d8:	4916      	ldr	r1, [pc, #88]	; (8007634 <arm_rfft_fast_init_f32+0xe4>)
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <arm_rfft_fast_init_f32+0xe8>)
 80075dc:	4b17      	ldr	r3, [pc, #92]	; (800763c <arm_rfft_fast_init_f32+0xec>)
 80075de:	e7cd      	b.n	800757c <arm_rfft_fast_init_f32+0x2c>
 80075e0:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80075e4:	4916      	ldr	r1, [pc, #88]	; (8007640 <arm_rfft_fast_init_f32+0xf0>)
 80075e6:	4a17      	ldr	r2, [pc, #92]	; (8007644 <arm_rfft_fast_init_f32+0xf4>)
 80075e8:	4b17      	ldr	r3, [pc, #92]	; (8007648 <arm_rfft_fast_init_f32+0xf8>)
 80075ea:	e7c7      	b.n	800757c <arm_rfft_fast_init_f32+0x2c>
 80075ec:	24d0      	movs	r4, #208	; 0xd0
 80075ee:	4917      	ldr	r1, [pc, #92]	; (800764c <arm_rfft_fast_init_f32+0xfc>)
 80075f0:	4a17      	ldr	r2, [pc, #92]	; (8007650 <arm_rfft_fast_init_f32+0x100>)
 80075f2:	4b18      	ldr	r3, [pc, #96]	; (8007654 <arm_rfft_fast_init_f32+0x104>)
 80075f4:	e7c2      	b.n	800757c <arm_rfft_fast_init_f32+0x2c>
 80075f6:	bf00      	nop
 80075f8:	0801b120 	.word	0x0801b120
 80075fc:	0800c318 	.word	0x0800c318
 8007600:	08012488 	.word	0x08012488
 8007604:	08010418 	.word	0x08010418
 8007608:	0801cee0 	.word	0x0801cee0
 800760c:	0801f3d0 	.word	0x0801f3d0
 8007610:	08018e08 	.word	0x08018e08
 8007614:	08016d08 	.word	0x08016d08
 8007618:	08010488 	.word	0x08010488
 800761c:	0801f060 	.word	0x0801f060
 8007620:	08016488 	.word	0x08016488
 8007624:	0801d0e0 	.word	0x0801d0e0
 8007628:	08019cc0 	.word	0x08019cc0
 800762c:	08018d08 	.word	0x08018d08
 8007630:	08010318 	.word	0x08010318
 8007634:	08019c18 	.word	0x08019c18
 8007638:	08016c88 	.word	0x08016c88
 800763c:	08019c40 	.word	0x08019c40
 8007640:	0801d8e0 	.word	0x0801d8e0
 8007644:	0801a120 	.word	0x0801a120
 8007648:	0801dc60 	.word	0x0801dc60
 800764c:	0801f5d0 	.word	0x0801f5d0
 8007650:	08019d20 	.word	0x08019d20
 8007654:	0801ec60 	.word	0x0801ec60

08007658 <arm_rfft_fast_f32>:
 8007658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765c:	8a06      	ldrh	r6, [r0, #16]
 800765e:	0876      	lsrs	r6, r6, #1
 8007660:	4607      	mov	r7, r0
 8007662:	4615      	mov	r5, r2
 8007664:	8006      	strh	r6, [r0, #0]
 8007666:	460c      	mov	r4, r1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d15c      	bne.n	8007726 <arm_rfft_fast_f32+0xce>
 800766c:	461a      	mov	r2, r3
 800766e:	2301      	movs	r3, #1
 8007670:	f000 fbe6 	bl	8007e40 <arm_cfft_f32>
 8007674:	edd4 7a00 	vldr	s15, [r4]
 8007678:	ed94 7a01 	vldr	s14, [r4, #4]
 800767c:	883e      	ldrh	r6, [r7, #0]
 800767e:	6978      	ldr	r0, [r7, #20]
 8007680:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007684:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007688:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800768c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007694:	3e01      	subs	r6, #1
 8007696:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800769a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800769e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80076a2:	ed85 7a00 	vstr	s14, [r5]
 80076a6:	edc5 7a01 	vstr	s15, [r5, #4]
 80076aa:	3010      	adds	r0, #16
 80076ac:	f105 0210 	add.w	r2, r5, #16
 80076b0:	3b08      	subs	r3, #8
 80076b2:	f104 0110 	add.w	r1, r4, #16
 80076b6:	ed51 4a02 	vldr	s9, [r1, #-8]
 80076ba:	ed93 5a02 	vldr	s10, [r3, #8]
 80076be:	ed11 7a01 	vldr	s14, [r1, #-4]
 80076c2:	ed10 6a02 	vldr	s12, [r0, #-8]
 80076c6:	edd3 5a03 	vldr	s11, [r3, #12]
 80076ca:	ed50 6a01 	vldr	s13, [r0, #-4]
 80076ce:	ee75 7a64 	vsub.f32	s15, s10, s9
 80076d2:	ee35 4a87 	vadd.f32	s8, s11, s14
 80076d6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80076da:	ee77 5a65 	vsub.f32	s11, s14, s11
 80076de:	ee66 4a27 	vmul.f32	s9, s12, s15
 80076e2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80076e6:	ee34 5a85 	vadd.f32	s10, s9, s10
 80076ea:	ee26 6a04 	vmul.f32	s12, s12, s8
 80076ee:	ee66 6a84 	vmul.f32	s13, s13, s8
 80076f2:	ee77 7a25 	vadd.f32	s15, s14, s11
 80076f6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80076fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80076fe:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007702:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007706:	3e01      	subs	r6, #1
 8007708:	ed42 6a02 	vstr	s13, [r2, #-8]
 800770c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007710:	f1a3 0308 	sub.w	r3, r3, #8
 8007714:	f101 0108 	add.w	r1, r1, #8
 8007718:	f100 0008 	add.w	r0, r0, #8
 800771c:	f102 0208 	add.w	r2, r2, #8
 8007720:	d1c9      	bne.n	80076b6 <arm_rfft_fast_f32+0x5e>
 8007722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007726:	edd1 7a00 	vldr	s15, [r1]
 800772a:	edd1 6a01 	vldr	s13, [r1, #4]
 800772e:	6941      	ldr	r1, [r0, #20]
 8007730:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007734:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007738:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800773c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007740:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007744:	3e01      	subs	r6, #1
 8007746:	ed82 7a00 	vstr	s14, [r2]
 800774a:	edc2 7a01 	vstr	s15, [r2, #4]
 800774e:	00f0      	lsls	r0, r6, #3
 8007750:	b3ee      	cbz	r6, 80077ce <arm_rfft_fast_f32+0x176>
 8007752:	3808      	subs	r0, #8
 8007754:	f101 0e10 	add.w	lr, r1, #16
 8007758:	4420      	add	r0, r4
 800775a:	f104 0110 	add.w	r1, r4, #16
 800775e:	f102 0c10 	add.w	ip, r2, #16
 8007762:	ed90 7a02 	vldr	s14, [r0, #8]
 8007766:	ed51 6a02 	vldr	s13, [r1, #-8]
 800776a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800776e:	ed90 4a03 	vldr	s8, [r0, #12]
 8007772:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007776:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800777a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800777e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8007782:	ee26 3a27 	vmul.f32	s6, s12, s15
 8007786:	ee77 6a26 	vadd.f32	s13, s14, s13
 800778a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800778e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8007792:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007796:	ee77 7a05 	vadd.f32	s15, s14, s10
 800779a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800779e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80077a2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80077a6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80077aa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80077ae:	ee27 7a23 	vmul.f32	s14, s14, s7
 80077b2:	3e01      	subs	r6, #1
 80077b4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80077b8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80077bc:	f1a0 0008 	sub.w	r0, r0, #8
 80077c0:	f101 0108 	add.w	r1, r1, #8
 80077c4:	f10e 0e08 	add.w	lr, lr, #8
 80077c8:	f10c 0c08 	add.w	ip, ip, #8
 80077cc:	d1c9      	bne.n	8007762 <arm_rfft_fast_f32+0x10a>
 80077ce:	4638      	mov	r0, r7
 80077d0:	4629      	mov	r1, r5
 80077d2:	461a      	mov	r2, r3
 80077d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077d8:	2301      	movs	r3, #1
 80077da:	f000 bb31 	b.w	8007e40 <arm_cfft_f32>
 80077de:	bf00      	nop

080077e0 <arm_cfft_radix8by2_f32>:
 80077e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e4:	ed2d 8b08 	vpush	{d8-d11}
 80077e8:	f8b0 e000 	ldrh.w	lr, [r0]
 80077ec:	6842      	ldr	r2, [r0, #4]
 80077ee:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80077f2:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80077f6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80077fa:	4607      	mov	r7, r0
 80077fc:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8007800:	f000 80af 	beq.w	8007962 <arm_cfft_radix8by2_f32+0x182>
 8007804:	3310      	adds	r3, #16
 8007806:	18ce      	adds	r6, r1, r3
 8007808:	3210      	adds	r2, #16
 800780a:	4443      	add	r3, r8
 800780c:	f101 0510 	add.w	r5, r1, #16
 8007810:	f108 0410 	add.w	r4, r8, #16
 8007814:	ed54 1a04 	vldr	s3, [r4, #-16]
 8007818:	ed13 4a04 	vldr	s8, [r3, #-16]
 800781c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8007820:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007824:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007828:	ed54 6a03 	vldr	s13, [r4, #-12]
 800782c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007830:	ed16 2a04 	vldr	s4, [r6, #-16]
 8007834:	ed56 2a03 	vldr	s5, [r6, #-12]
 8007838:	ed15 6a03 	vldr	s12, [r5, #-12]
 800783c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8007840:	ed15 3a04 	vldr	s6, [r5, #-16]
 8007844:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007848:	ed56 0a02 	vldr	s1, [r6, #-8]
 800784c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007850:	ed55 4a02 	vldr	s9, [r5, #-8]
 8007854:	ee73 ba21 	vadd.f32	s23, s6, s3
 8007858:	ee36 ba26 	vadd.f32	s22, s12, s13
 800785c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8007860:	ee72 9a04 	vadd.f32	s19, s4, s8
 8007864:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007868:	ee31 8a05 	vadd.f32	s16, s2, s10
 800786c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8007870:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8007874:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007878:	ed05 ba03 	vstr	s22, [r5, #-12]
 800787c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8007880:	ed05 aa01 	vstr	s20, [r5, #-4]
 8007884:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007888:	ed46 9a04 	vstr	s19, [r6, #-16]
 800788c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007890:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007894:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007898:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800789c:	ed12 6a03 	vldr	s12, [r2, #-12]
 80078a0:	ed52 2a04 	vldr	s5, [r2, #-16]
 80078a4:	ee33 3a61 	vsub.f32	s6, s6, s3
 80078a8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80078ac:	ee26 8a86 	vmul.f32	s16, s13, s12
 80078b0:	ee24 2a06 	vmul.f32	s4, s8, s12
 80078b4:	ee63 1a22 	vmul.f32	s3, s6, s5
 80078b8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80078bc:	ee23 3a06 	vmul.f32	s6, s6, s12
 80078c0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80078c4:	ee23 6a86 	vmul.f32	s12, s7, s12
 80078c8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80078cc:	ee36 6a04 	vadd.f32	s12, s12, s8
 80078d0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80078d4:	ee72 3a63 	vsub.f32	s7, s4, s7
 80078d8:	ee71 2a88 	vadd.f32	s5, s3, s16
 80078dc:	ed44 6a03 	vstr	s13, [r4, #-12]
 80078e0:	ed44 2a04 	vstr	s5, [r4, #-16]
 80078e4:	ed43 3a04 	vstr	s7, [r3, #-16]
 80078e8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80078ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078f0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80078f4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80078f8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80078fc:	ee35 6a41 	vsub.f32	s12, s10, s2
 8007900:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007904:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007908:	ee26 5a87 	vmul.f32	s10, s13, s14
 800790c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8007910:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007914:	ee64 4a87 	vmul.f32	s9, s9, s14
 8007918:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800791c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007920:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007924:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007928:	ee74 5a23 	vadd.f32	s11, s8, s7
 800792c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007930:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007934:	f1be 0e01 	subs.w	lr, lr, #1
 8007938:	ed44 5a02 	vstr	s11, [r4, #-8]
 800793c:	f105 0510 	add.w	r5, r5, #16
 8007940:	ed44 7a01 	vstr	s15, [r4, #-4]
 8007944:	f106 0610 	add.w	r6, r6, #16
 8007948:	ed03 6a02 	vstr	s12, [r3, #-8]
 800794c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8007950:	f102 0210 	add.w	r2, r2, #16
 8007954:	f104 0410 	add.w	r4, r4, #16
 8007958:	f103 0310 	add.w	r3, r3, #16
 800795c:	f47f af5a 	bne.w	8007814 <arm_cfft_radix8by2_f32+0x34>
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	fa1f f48c 	uxth.w	r4, ip
 8007966:	4608      	mov	r0, r1
 8007968:	2302      	movs	r3, #2
 800796a:	4621      	mov	r1, r4
 800796c:	f000 fbca 	bl	8008104 <arm_radix8_butterfly_f32>
 8007970:	ecbd 8b08 	vpop	{d8-d11}
 8007974:	4640      	mov	r0, r8
 8007976:	4621      	mov	r1, r4
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	2302      	movs	r3, #2
 800797c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	f000 bbc0 	b.w	8008104 <arm_radix8_butterfly_f32>

08007984 <arm_cfft_radix8by4_f32>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	ed2d 8b0a 	vpush	{d8-d12}
 800798c:	8802      	ldrh	r2, [r0, #0]
 800798e:	ed91 6a00 	vldr	s12, [r1]
 8007992:	b08f      	sub	sp, #60	; 0x3c
 8007994:	460f      	mov	r7, r1
 8007996:	0852      	lsrs	r2, r2, #1
 8007998:	0093      	lsls	r3, r2, #2
 800799a:	900c      	str	r0, [sp, #48]	; 0x30
 800799c:	9103      	str	r1, [sp, #12]
 800799e:	6841      	ldr	r1, [r0, #4]
 80079a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80079a4:	4638      	mov	r0, r7
 80079a6:	4418      	add	r0, r3
 80079a8:	4606      	mov	r6, r0
 80079aa:	9009      	str	r0, [sp, #36]	; 0x24
 80079ac:	4418      	add	r0, r3
 80079ae:	edd0 6a00 	vldr	s13, [r0]
 80079b2:	edd6 3a00 	vldr	s7, [r6]
 80079b6:	edd6 2a01 	vldr	s5, [r6, #4]
 80079ba:	edd0 7a01 	vldr	s15, [r0, #4]
 80079be:	900a      	str	r0, [sp, #40]	; 0x28
 80079c0:	ee76 5a26 	vadd.f32	s11, s12, s13
 80079c4:	4604      	mov	r4, r0
 80079c6:	4625      	mov	r5, r4
 80079c8:	441c      	add	r4, r3
 80079ca:	ed94 4a00 	vldr	s8, [r4]
 80079ce:	ed94 5a01 	vldr	s10, [r4, #4]
 80079d2:	9401      	str	r4, [sp, #4]
 80079d4:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80079d8:	4630      	mov	r0, r6
 80079da:	ee74 4a24 	vadd.f32	s9, s8, s9
 80079de:	463e      	mov	r6, r7
 80079e0:	ee14 ea90 	vmov	lr, s9
 80079e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80079e8:	f846 eb08 	str.w	lr, [r6], #8
 80079ec:	ee37 6a27 	vadd.f32	s12, s14, s15
 80079f0:	edd0 4a01 	vldr	s9, [r0, #4]
 80079f4:	9604      	str	r6, [sp, #16]
 80079f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079fa:	9e01      	ldr	r6, [sp, #4]
 80079fc:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8007a00:	ed96 2a01 	vldr	s4, [r6, #4]
 8007a04:	ee36 7a24 	vadd.f32	s14, s12, s9
 8007a08:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8007a0c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8007a10:	ee36 6a62 	vsub.f32	s12, s12, s5
 8007a14:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007a18:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007a1c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8007a20:	4604      	mov	r4, r0
 8007a22:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007a26:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007a2a:	46a3      	mov	fp, r4
 8007a2c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007a30:	ee34 5a84 	vadd.f32	s10, s9, s8
 8007a34:	ee13 8a90 	vmov	r8, s7
 8007a38:	46a4      	mov	ip, r4
 8007a3a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8007a3e:	ed87 7a01 	vstr	s14, [r7, #4]
 8007a42:	f84b 8b08 	str.w	r8, [fp], #8
 8007a46:	f1ac 0704 	sub.w	r7, ip, #4
 8007a4a:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007a4e:	f101 0c08 	add.w	ip, r1, #8
 8007a52:	462c      	mov	r4, r5
 8007a54:	f8cd c014 	str.w	ip, [sp, #20]
 8007a58:	ee15 ca90 	vmov	ip, s11
 8007a5c:	f844 cb08 	str.w	ip, [r4], #8
 8007a60:	9407      	str	r4, [sp, #28]
 8007a62:	f101 0410 	add.w	r4, r1, #16
 8007a66:	ed85 6a01 	vstr	s12, [r5, #4]
 8007a6a:	0852      	lsrs	r2, r2, #1
 8007a6c:	9402      	str	r4, [sp, #8]
 8007a6e:	462c      	mov	r4, r5
 8007a70:	f101 0518 	add.w	r5, r1, #24
 8007a74:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a76:	46b2      	mov	sl, r6
 8007a78:	9506      	str	r5, [sp, #24]
 8007a7a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8007a7e:	3a02      	subs	r2, #2
 8007a80:	ee16 5a90 	vmov	r5, s13
 8007a84:	46b6      	mov	lr, r6
 8007a86:	4630      	mov	r0, r6
 8007a88:	0852      	lsrs	r2, r2, #1
 8007a8a:	f84a 5b08 	str.w	r5, [sl], #8
 8007a8e:	f1a0 0604 	sub.w	r6, r0, #4
 8007a92:	edce 7a01 	vstr	s15, [lr, #4]
 8007a96:	9208      	str	r2, [sp, #32]
 8007a98:	f000 8130 	beq.w	8007cfc <arm_cfft_radix8by4_f32+0x378>
 8007a9c:	4691      	mov	r9, r2
 8007a9e:	9a03      	ldr	r2, [sp, #12]
 8007aa0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007aa4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007aa8:	3b08      	subs	r3, #8
 8007aaa:	f102 0510 	add.w	r5, r2, #16
 8007aae:	f101 0c20 	add.w	ip, r1, #32
 8007ab2:	f1a4 020c 	sub.w	r2, r4, #12
 8007ab6:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007aba:	4433      	add	r3, r6
 8007abc:	3410      	adds	r4, #16
 8007abe:	4650      	mov	r0, sl
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	ed55 3a02 	vldr	s7, [r5, #-8]
 8007ac6:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007aca:	ed91 7a00 	vldr	s14, [r1]
 8007ace:	edd0 7a00 	vldr	s15, [r0]
 8007ad2:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007ad6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007ada:	edd0 6a01 	vldr	s13, [r0, #4]
 8007ade:	ed91 6a01 	vldr	s12, [r1, #4]
 8007ae2:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007ae6:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007aea:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007aee:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007af2:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8007af6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007afa:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007afe:	edd1 4a01 	vldr	s9, [r1, #4]
 8007b02:	ed90 4a01 	vldr	s8, [r0, #4]
 8007b06:	ee70 4a24 	vadd.f32	s9, s0, s9
 8007b0a:	ee76 aa05 	vadd.f32	s21, s12, s10
 8007b0e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007b12:	ee35 aac7 	vsub.f32	s20, s11, s14
 8007b16:	ed45 4a01 	vstr	s9, [r5, #-4]
 8007b1a:	edd6 1a00 	vldr	s3, [r6]
 8007b1e:	edd7 0a00 	vldr	s1, [r7]
 8007b22:	ed92 4a02 	vldr	s8, [r2, #8]
 8007b26:	edd3 3a02 	vldr	s7, [r3, #8]
 8007b2a:	ed93 2a01 	vldr	s4, [r3, #4]
 8007b2e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007b32:	edd2 2a01 	vldr	s5, [r2, #4]
 8007b36:	ed57 9a01 	vldr	s19, [r7, #-4]
 8007b3a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8007b3e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8007b42:	ee74 8a84 	vadd.f32	s17, s9, s8
 8007b46:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8007b4a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8007b4e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8007b52:	ee18 aa90 	vmov	sl, s17
 8007b56:	f847 a908 	str.w	sl, [r7], #-8
 8007b5a:	edd2 8a01 	vldr	s17, [r2, #4]
 8007b5e:	ed93 9a01 	vldr	s18, [r3, #4]
 8007b62:	ee73 8a28 	vadd.f32	s17, s6, s17
 8007b66:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007b6a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007b6e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8007b72:	edc7 8a01 	vstr	s17, [r7, #4]
 8007b76:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007b7a:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007b7e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8007b82:	ee6a ba28 	vmul.f32	s23, s20, s17
 8007b86:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007b8a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007b8e:	ee30 9a81 	vadd.f32	s18, s1, s2
 8007b92:	ee79 9a82 	vadd.f32	s19, s19, s4
 8007b96:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007b9a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007b9e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8007ba2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8007ba6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007baa:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007bae:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8007bb2:	ee1c aa10 	vmov	sl, s24
 8007bb6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007bba:	f841 ab08 	str.w	sl, [r1], #8
 8007bbe:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8007bc2:	ee3b bacb 	vsub.f32	s22, s23, s22
 8007bc6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007bca:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007bce:	ed01 aa01 	vstr	s20, [r1, #-4]
 8007bd2:	edc2 8a01 	vstr	s17, [r2, #4]
 8007bd6:	ed82 ba02 	vstr	s22, [r2, #8]
 8007bda:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007bde:	ee74 3a63 	vsub.f32	s7, s8, s7
 8007be2:	ee38 8a47 	vsub.f32	s16, s16, s14
 8007be6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007bea:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007bee:	ee33 3a42 	vsub.f32	s6, s6, s4
 8007bf2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007bf6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007bfa:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007bfe:	ee63 8a04 	vmul.f32	s17, s6, s8
 8007c02:	ee28 aa24 	vmul.f32	s20, s16, s9
 8007c06:	ee60 9a04 	vmul.f32	s19, s0, s8
 8007c0a:	ee28 8a04 	vmul.f32	s16, s16, s8
 8007c0e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8007c12:	ee63 3a84 	vmul.f32	s7, s7, s8
 8007c16:	ee39 4a68 	vsub.f32	s8, s18, s17
 8007c1a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8007c1e:	ee14 aa10 	vmov	sl, s8
 8007c22:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007c26:	ee63 4a24 	vmul.f32	s9, s6, s9
 8007c2a:	ed44 9a02 	vstr	s19, [r4, #-8]
 8007c2e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007c32:	ed04 0a01 	vstr	s0, [r4, #-4]
 8007c36:	f846 a908 	str.w	sl, [r6], #-8
 8007c3a:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007c3e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8007c42:	edc6 3a01 	vstr	s7, [r6, #4]
 8007c46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c4e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8007c52:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8007c56:	ee67 5a86 	vmul.f32	s11, s15, s12
 8007c5a:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007c5e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8007c62:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007c66:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007c6a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007c6e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8007c72:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c7a:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007c7e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8007c82:	ee21 1a07 	vmul.f32	s2, s2, s14
 8007c86:	ee15 aa90 	vmov	sl, s11
 8007c8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c8e:	f840 ab08 	str.w	sl, [r0], #8
 8007c92:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007c96:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8007c9e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8007ca2:	f105 0508 	add.w	r5, r5, #8
 8007ca6:	ed83 1a02 	vstr	s2, [r3, #8]
 8007caa:	edc3 2a01 	vstr	s5, [r3, #4]
 8007cae:	f108 0808 	add.w	r8, r8, #8
 8007cb2:	f1a2 0208 	sub.w	r2, r2, #8
 8007cb6:	f10c 0c10 	add.w	ip, ip, #16
 8007cba:	f104 0408 	add.w	r4, r4, #8
 8007cbe:	f10e 0e18 	add.w	lr, lr, #24
 8007cc2:	f1a3 0308 	sub.w	r3, r3, #8
 8007cc6:	f47f aefc 	bne.w	8007ac2 <arm_cfft_radix8by4_f32+0x13e>
 8007cca:	9908      	ldr	r1, [sp, #32]
 8007ccc:	9802      	ldr	r0, [sp, #8]
 8007cce:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8007cd2:	00cb      	lsls	r3, r1, #3
 8007cd4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007cd8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007cdc:	9102      	str	r1, [sp, #8]
 8007cde:	9904      	ldr	r1, [sp, #16]
 8007ce0:	4419      	add	r1, r3
 8007ce2:	9104      	str	r1, [sp, #16]
 8007ce4:	9905      	ldr	r1, [sp, #20]
 8007ce6:	4419      	add	r1, r3
 8007ce8:	9105      	str	r1, [sp, #20]
 8007cea:	9907      	ldr	r1, [sp, #28]
 8007cec:	449b      	add	fp, r3
 8007cee:	4419      	add	r1, r3
 8007cf0:	449a      	add	sl, r3
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	9107      	str	r1, [sp, #28]
 8007cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cfa:	9306      	str	r3, [sp, #24]
 8007cfc:	9a04      	ldr	r2, [sp, #16]
 8007cfe:	9807      	ldr	r0, [sp, #28]
 8007d00:	edd2 3a00 	vldr	s7, [r2]
 8007d04:	ed90 4a00 	vldr	s8, [r0]
 8007d08:	eddb 7a00 	vldr	s15, [fp]
 8007d0c:	ed9a 3a00 	vldr	s6, [sl]
 8007d10:	edd2 4a01 	vldr	s9, [r2, #4]
 8007d14:	ed90 7a01 	vldr	s14, [r0, #4]
 8007d18:	ed9b 2a01 	vldr	s4, [fp, #4]
 8007d1c:	edda 5a01 	vldr	s11, [sl, #4]
 8007d20:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007d24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d26:	ee73 6a84 	vadd.f32	s13, s7, s8
 8007d2a:	ee34 6a87 	vadd.f32	s12, s9, s14
 8007d2e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8007d32:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8007d36:	ee33 5a05 	vadd.f32	s10, s6, s10
 8007d3a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007d3e:	ed82 5a00 	vstr	s10, [r2]
 8007d42:	ed9b 5a01 	vldr	s10, [fp, #4]
 8007d46:	edda 4a01 	vldr	s9, [sl, #4]
 8007d4a:	ee36 5a05 	vadd.f32	s10, s12, s10
 8007d4e:	ee72 3a04 	vadd.f32	s7, s4, s8
 8007d52:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007d56:	ee77 4a67 	vsub.f32	s9, s14, s15
 8007d5a:	ed82 5a01 	vstr	s10, [r2, #4]
 8007d5e:	9a05      	ldr	r2, [sp, #20]
 8007d60:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007d64:	edd2 1a00 	vldr	s3, [r2]
 8007d68:	edd2 2a01 	vldr	s5, [r2, #4]
 8007d6c:	9a02      	ldr	r2, [sp, #8]
 8007d6e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8007d72:	ee36 6a42 	vsub.f32	s12, s12, s4
 8007d76:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8007d7a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007d7e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007d82:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007d86:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007d8a:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007d8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007d92:	edcb 2a00 	vstr	s5, [fp]
 8007d96:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007d9a:	edd2 3a01 	vldr	s7, [r2, #4]
 8007d9e:	ed92 5a00 	vldr	s10, [r2]
 8007da2:	9a06      	ldr	r2, [sp, #24]
 8007da4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007da8:	ee36 6a65 	vsub.f32	s12, s12, s11
 8007dac:	ee66 4a85 	vmul.f32	s9, s13, s10
 8007db0:	ee26 5a05 	vmul.f32	s10, s12, s10
 8007db4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007db8:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007dbc:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007dc0:	ee34 6a86 	vadd.f32	s12, s9, s12
 8007dc4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dcc:	edc0 6a01 	vstr	s13, [r0, #4]
 8007dd0:	ed80 6a00 	vstr	s12, [r0]
 8007dd4:	ed92 6a01 	vldr	s12, [r2, #4]
 8007dd8:	9803      	ldr	r0, [sp, #12]
 8007dda:	ee77 7a43 	vsub.f32	s15, s14, s6
 8007dde:	ee75 5a84 	vadd.f32	s11, s11, s8
 8007de2:	ed92 7a00 	vldr	s14, [r2]
 8007de6:	ee65 6a87 	vmul.f32	s13, s11, s14
 8007dea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007dee:	ee65 5a86 	vmul.f32	s11, s11, s12
 8007df2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007df6:	ee77 5a65 	vsub.f32	s11, s14, s11
 8007dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfe:	edca 5a01 	vstr	s11, [sl, #4]
 8007e02:	edca 7a00 	vstr	s15, [sl]
 8007e06:	6872      	ldr	r2, [r6, #4]
 8007e08:	4621      	mov	r1, r4
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	f000 f97a 	bl	8008104 <arm_radix8_butterfly_f32>
 8007e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e12:	6872      	ldr	r2, [r6, #4]
 8007e14:	4621      	mov	r1, r4
 8007e16:	2304      	movs	r3, #4
 8007e18:	f000 f974 	bl	8008104 <arm_radix8_butterfly_f32>
 8007e1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e1e:	6872      	ldr	r2, [r6, #4]
 8007e20:	4621      	mov	r1, r4
 8007e22:	2304      	movs	r3, #4
 8007e24:	f000 f96e 	bl	8008104 <arm_radix8_butterfly_f32>
 8007e28:	9801      	ldr	r0, [sp, #4]
 8007e2a:	6872      	ldr	r2, [r6, #4]
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	2304      	movs	r3, #4
 8007e30:	b00f      	add	sp, #60	; 0x3c
 8007e32:	ecbd 8b0a 	vpop	{d8-d12}
 8007e36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f000 b963 	b.w	8008104 <arm_radix8_butterfly_f32>
 8007e3e:	bf00      	nop

08007e40 <arm_cfft_f32>:
 8007e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e44:	2a01      	cmp	r2, #1
 8007e46:	4606      	mov	r6, r0
 8007e48:	4617      	mov	r7, r2
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	4698      	mov	r8, r3
 8007e4e:	8805      	ldrh	r5, [r0, #0]
 8007e50:	d054      	beq.n	8007efc <arm_cfft_f32+0xbc>
 8007e52:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007e56:	d04c      	beq.n	8007ef2 <arm_cfft_f32+0xb2>
 8007e58:	d916      	bls.n	8007e88 <arm_cfft_f32+0x48>
 8007e5a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007e5e:	d01a      	beq.n	8007e96 <arm_cfft_f32+0x56>
 8007e60:	d95c      	bls.n	8007f1c <arm_cfft_f32+0xdc>
 8007e62:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007e66:	d044      	beq.n	8007ef2 <arm_cfft_f32+0xb2>
 8007e68:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007e6c:	d105      	bne.n	8007e7a <arm_cfft_f32+0x3a>
 8007e6e:	4620      	mov	r0, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	6872      	ldr	r2, [r6, #4]
 8007e74:	2301      	movs	r3, #1
 8007e76:	f000 f945 	bl	8008104 <arm_radix8_butterfly_f32>
 8007e7a:	f1b8 0f00 	cmp.w	r8, #0
 8007e7e:	d111      	bne.n	8007ea4 <arm_cfft_f32+0x64>
 8007e80:	2f01      	cmp	r7, #1
 8007e82:	d016      	beq.n	8007eb2 <arm_cfft_f32+0x72>
 8007e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e88:	2d20      	cmp	r5, #32
 8007e8a:	d032      	beq.n	8007ef2 <arm_cfft_f32+0xb2>
 8007e8c:	d94a      	bls.n	8007f24 <arm_cfft_f32+0xe4>
 8007e8e:	2d40      	cmp	r5, #64	; 0x40
 8007e90:	d0ed      	beq.n	8007e6e <arm_cfft_f32+0x2e>
 8007e92:	2d80      	cmp	r5, #128	; 0x80
 8007e94:	d1f1      	bne.n	8007e7a <arm_cfft_f32+0x3a>
 8007e96:	4630      	mov	r0, r6
 8007e98:	4621      	mov	r1, r4
 8007e9a:	f7ff fca1 	bl	80077e0 <arm_cfft_radix8by2_f32>
 8007e9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ea2:	d0ed      	beq.n	8007e80 <arm_cfft_f32+0x40>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	89b1      	ldrh	r1, [r6, #12]
 8007ea8:	68b2      	ldr	r2, [r6, #8]
 8007eaa:	f7f8 f991 	bl	80001d0 <arm_bitreversal_32>
 8007eae:	2f01      	cmp	r7, #1
 8007eb0:	d1e8      	bne.n	8007e84 <arm_cfft_f32+0x44>
 8007eb2:	ee07 5a90 	vmov	s15, r5
 8007eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ebe:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	d0de      	beq.n	8007e84 <arm_cfft_f32+0x44>
 8007ec6:	f104 0108 	add.w	r1, r4, #8
 8007eca:	2300      	movs	r3, #0
 8007ecc:	3301      	adds	r3, #1
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	f101 0108 	add.w	r1, r1, #8
 8007ed4:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007ed8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007edc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007ee0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007ee4:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007ee8:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007eec:	d1ee      	bne.n	8007ecc <arm_cfft_f32+0x8c>
 8007eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f7ff fd45 	bl	8007984 <arm_cfft_radix8by4_f32>
 8007efa:	e7be      	b.n	8007e7a <arm_cfft_f32+0x3a>
 8007efc:	b1ad      	cbz	r5, 8007f2a <arm_cfft_f32+0xea>
 8007efe:	f101 030c 	add.w	r3, r1, #12
 8007f02:	2200      	movs	r2, #0
 8007f04:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007f08:	3201      	adds	r2, #1
 8007f0a:	eef1 7a67 	vneg.f32	s15, s15
 8007f0e:	4295      	cmp	r5, r2
 8007f10:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007f14:	f103 0308 	add.w	r3, r3, #8
 8007f18:	d1f4      	bne.n	8007f04 <arm_cfft_f32+0xc4>
 8007f1a:	e79a      	b.n	8007e52 <arm_cfft_f32+0x12>
 8007f1c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007f20:	d0a5      	beq.n	8007e6e <arm_cfft_f32+0x2e>
 8007f22:	e7aa      	b.n	8007e7a <arm_cfft_f32+0x3a>
 8007f24:	2d10      	cmp	r5, #16
 8007f26:	d0b6      	beq.n	8007e96 <arm_cfft_f32+0x56>
 8007f28:	e7a7      	b.n	8007e7a <arm_cfft_f32+0x3a>
 8007f2a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007f2e:	d894      	bhi.n	8007e5a <arm_cfft_f32+0x1a>
 8007f30:	e7aa      	b.n	8007e88 <arm_cfft_f32+0x48>
 8007f32:	bf00      	nop

08007f34 <arm_cmplx_mag_f32>:
 8007f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f38:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	d07f      	beq.n	8008040 <arm_cmplx_mag_f32+0x10c>
 8007f40:	2700      	movs	r7, #0
 8007f42:	f100 0420 	add.w	r4, r0, #32
 8007f46:	f101 0510 	add.w	r5, r1, #16
 8007f4a:	4646      	mov	r6, r8
 8007f4c:	e05a      	b.n	8008004 <arm_cmplx_mag_f32+0xd0>
 8007f4e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007f52:	eeb4 0a40 	vcmp.f32	s0, s0
 8007f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5a:	f040 80a4 	bne.w	80080a6 <arm_cmplx_mag_f32+0x172>
 8007f5e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8007f62:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8007f66:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8007f6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f6e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007f72:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7e:	f2c0 808f 	blt.w	80080a0 <arm_cmplx_mag_f32+0x16c>
 8007f82:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007f86:	eeb4 0a40 	vcmp.f32	s0, s0
 8007f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8e:	f040 80af 	bne.w	80080f0 <arm_cmplx_mag_f32+0x1bc>
 8007f92:	ed05 0a03 	vstr	s0, [r5, #-12]
 8007f96:	ed54 7a04 	vldr	s15, [r4, #-16]
 8007f9a:	ed14 0a03 	vldr	s0, [r4, #-12]
 8007f9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007fa2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007fa6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb2:	db72      	blt.n	800809a <arm_cmplx_mag_f32+0x166>
 8007fb4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007fb8:	eeb4 0a40 	vcmp.f32	s0, s0
 8007fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc0:	f040 808c 	bne.w	80080dc <arm_cmplx_mag_f32+0x1a8>
 8007fc4:	ed05 0a02 	vstr	s0, [r5, #-8]
 8007fc8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8007fcc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007fd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007fd4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007fd8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe4:	db20      	blt.n	8008028 <arm_cmplx_mag_f32+0xf4>
 8007fe6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007fea:	eeb4 0a40 	vcmp.f32	s0, s0
 8007fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff2:	d169      	bne.n	80080c8 <arm_cmplx_mag_f32+0x194>
 8007ff4:	3e01      	subs	r6, #1
 8007ff6:	ed05 0a01 	vstr	s0, [r5, #-4]
 8007ffa:	f104 0420 	add.w	r4, r4, #32
 8007ffe:	f105 0510 	add.w	r5, r5, #16
 8008002:	d019      	beq.n	8008038 <arm_cmplx_mag_f32+0x104>
 8008004:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008008:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800800c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008010:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008014:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800801c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008020:	da95      	bge.n	8007f4e <arm_cmplx_mag_f32+0x1a>
 8008022:	f845 7c10 	str.w	r7, [r5, #-16]
 8008026:	e79c      	b.n	8007f62 <arm_cmplx_mag_f32+0x2e>
 8008028:	3e01      	subs	r6, #1
 800802a:	f845 7c04 	str.w	r7, [r5, #-4]
 800802e:	f104 0420 	add.w	r4, r4, #32
 8008032:	f105 0510 	add.w	r5, r5, #16
 8008036:	d1e5      	bne.n	8008004 <arm_cmplx_mag_f32+0xd0>
 8008038:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800803c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008040:	f012 0503 	ands.w	r5, r2, #3
 8008044:	d026      	beq.n	8008094 <arm_cmplx_mag_f32+0x160>
 8008046:	2600      	movs	r6, #0
 8008048:	f100 0408 	add.w	r4, r0, #8
 800804c:	e00c      	b.n	8008068 <arm_cmplx_mag_f32+0x134>
 800804e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008052:	eeb4 0a40 	vcmp.f32	s0, s0
 8008056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805a:	d12e      	bne.n	80080ba <arm_cmplx_mag_f32+0x186>
 800805c:	3d01      	subs	r5, #1
 800805e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008062:	f104 0408 	add.w	r4, r4, #8
 8008066:	d015      	beq.n	8008094 <arm_cmplx_mag_f32+0x160>
 8008068:	ed54 7a02 	vldr	s15, [r4, #-8]
 800806c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008070:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008074:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008078:	3104      	adds	r1, #4
 800807a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800807e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008086:	dae2      	bge.n	800804e <arm_cmplx_mag_f32+0x11a>
 8008088:	3d01      	subs	r5, #1
 800808a:	f841 6c04 	str.w	r6, [r1, #-4]
 800808e:	f104 0408 	add.w	r4, r4, #8
 8008092:	d1e9      	bne.n	8008068 <arm_cmplx_mag_f32+0x134>
 8008094:	b004      	add	sp, #16
 8008096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809a:	f845 7c08 	str.w	r7, [r5, #-8]
 800809e:	e793      	b.n	8007fc8 <arm_cmplx_mag_f32+0x94>
 80080a0:	f845 7c0c 	str.w	r7, [r5, #-12]
 80080a4:	e777      	b.n	8007f96 <arm_cmplx_mag_f32+0x62>
 80080a6:	eeb0 0a67 	vmov.f32	s0, s15
 80080aa:	9203      	str	r2, [sp, #12]
 80080ac:	9102      	str	r1, [sp, #8]
 80080ae:	9001      	str	r0, [sp, #4]
 80080b0:	f003 f85e 	bl	800b170 <sqrtf>
 80080b4:	a801      	add	r0, sp, #4
 80080b6:	c807      	ldmia	r0, {r0, r1, r2}
 80080b8:	e751      	b.n	8007f5e <arm_cmplx_mag_f32+0x2a>
 80080ba:	eeb0 0a67 	vmov.f32	s0, s15
 80080be:	9101      	str	r1, [sp, #4]
 80080c0:	f003 f856 	bl	800b170 <sqrtf>
 80080c4:	9901      	ldr	r1, [sp, #4]
 80080c6:	e7c9      	b.n	800805c <arm_cmplx_mag_f32+0x128>
 80080c8:	eeb0 0a67 	vmov.f32	s0, s15
 80080cc:	9203      	str	r2, [sp, #12]
 80080ce:	9102      	str	r1, [sp, #8]
 80080d0:	9001      	str	r0, [sp, #4]
 80080d2:	f003 f84d 	bl	800b170 <sqrtf>
 80080d6:	a801      	add	r0, sp, #4
 80080d8:	c807      	ldmia	r0, {r0, r1, r2}
 80080da:	e78b      	b.n	8007ff4 <arm_cmplx_mag_f32+0xc0>
 80080dc:	eeb0 0a67 	vmov.f32	s0, s15
 80080e0:	9203      	str	r2, [sp, #12]
 80080e2:	9102      	str	r1, [sp, #8]
 80080e4:	9001      	str	r0, [sp, #4]
 80080e6:	f003 f843 	bl	800b170 <sqrtf>
 80080ea:	a801      	add	r0, sp, #4
 80080ec:	c807      	ldmia	r0, {r0, r1, r2}
 80080ee:	e769      	b.n	8007fc4 <arm_cmplx_mag_f32+0x90>
 80080f0:	eeb0 0a67 	vmov.f32	s0, s15
 80080f4:	9203      	str	r2, [sp, #12]
 80080f6:	9102      	str	r1, [sp, #8]
 80080f8:	9001      	str	r0, [sp, #4]
 80080fa:	f003 f839 	bl	800b170 <sqrtf>
 80080fe:	a801      	add	r0, sp, #4
 8008100:	c807      	ldmia	r0, {r0, r1, r2}
 8008102:	e746      	b.n	8007f92 <arm_cmplx_mag_f32+0x5e>

08008104 <arm_radix8_butterfly_f32>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	ed2d 8b10 	vpush	{d8-d15}
 800810c:	b09d      	sub	sp, #116	; 0x74
 800810e:	461c      	mov	r4, r3
 8008110:	ed9f bac8 	vldr	s22, [pc, #800]	; 8008434 <arm_radix8_butterfly_f32+0x330>
 8008114:	921a      	str	r2, [sp, #104]	; 0x68
 8008116:	1d03      	adds	r3, r0, #4
 8008118:	4682      	mov	sl, r0
 800811a:	4689      	mov	r9, r1
 800811c:	468b      	mov	fp, r1
 800811e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008120:	9400      	str	r4, [sp, #0]
 8008122:	469e      	mov	lr, r3
 8008124:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008128:	005a      	lsls	r2, r3, #1
 800812a:	18d6      	adds	r6, r2, r3
 800812c:	18f5      	adds	r5, r6, r3
 800812e:	9203      	str	r2, [sp, #12]
 8008130:	195a      	adds	r2, r3, r5
 8008132:	18d0      	adds	r0, r2, r3
 8008134:	00df      	lsls	r7, r3, #3
 8008136:	1819      	adds	r1, r3, r0
 8008138:	463c      	mov	r4, r7
 800813a:	9701      	str	r7, [sp, #4]
 800813c:	4457      	add	r7, sl
 800813e:	930c      	str	r3, [sp, #48]	; 0x30
 8008140:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800814a:	eb07 0c04 	add.w	ip, r7, r4
 800814e:	9c00      	ldr	r4, [sp, #0]
 8008150:	9302      	str	r3, [sp, #8]
 8008152:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8008156:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800815a:	3204      	adds	r2, #4
 800815c:	3104      	adds	r1, #4
 800815e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8008162:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	eddc 7a00 	vldr	s15, [ip]
 800816e:	edd7 6a00 	vldr	s13, [r7]
 8008172:	edd6 3a00 	vldr	s7, [r6]
 8008176:	ed5e aa01 	vldr	s21, [lr, #-4]
 800817a:	edd5 4a00 	vldr	s9, [r5]
 800817e:	ed90 2a00 	vldr	s4, [r0]
 8008182:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008186:	ed51 0a01 	vldr	s1, [r1, #-4]
 800818a:	ee77 8a82 	vadd.f32	s17, s15, s4
 800818e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8008192:	ee76 1a87 	vadd.f32	s3, s13, s14
 8008196:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800819a:	ee31 6a84 	vadd.f32	s12, s3, s8
 800819e:	ee33 5a28 	vadd.f32	s10, s6, s17
 80081a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80081a6:	ee75 6a06 	vadd.f32	s13, s10, s12
 80081aa:	ee35 5a46 	vsub.f32	s10, s10, s12
 80081ae:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80081b2:	ed85 5a00 	vstr	s10, [r5]
 80081b6:	ed96 1a01 	vldr	s2, [r6, #4]
 80081ba:	edd7 5a01 	vldr	s11, [r7, #4]
 80081be:	ed92 aa00 	vldr	s20, [r2]
 80081c2:	ed91 6a00 	vldr	s12, [r1]
 80081c6:	ed9e 9a00 	vldr	s18, [lr]
 80081ca:	ed95 5a01 	vldr	s10, [r5, #4]
 80081ce:	eddc 6a01 	vldr	s13, [ip, #4]
 80081d2:	edd0 9a01 	vldr	s19, [r0, #4]
 80081d6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80081da:	ee71 2a46 	vsub.f32	s5, s2, s12
 80081de:	ee75 3aca 	vsub.f32	s7, s11, s20
 80081e2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80081e6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80081ea:	ee37 7a20 	vadd.f32	s14, s14, s1
 80081ee:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80081f2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80081f6:	ee79 3a05 	vadd.f32	s7, s18, s10
 80081fa:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80081fe:	ee39 5a45 	vsub.f32	s10, s18, s10
 8008202:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8008206:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800820a:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800820e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008212:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008216:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800821a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800821e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008222:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008226:	ee36 0a88 	vadd.f32	s0, s13, s16
 800822a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800822e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008232:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8008236:	ee75 6a62 	vsub.f32	s13, s10, s5
 800823a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800823e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008242:	ee33 1a89 	vadd.f32	s2, s7, s18
 8008246:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800824a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800824e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8008252:	ee32 5a27 	vadd.f32	s10, s4, s15
 8008256:	ee72 7a67 	vsub.f32	s15, s4, s15
 800825a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800825e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8008262:	ee31 9a28 	vadd.f32	s18, s2, s17
 8008266:	ee33 6a46 	vsub.f32	s12, s6, s12
 800826a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800826e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8008272:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008276:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800827a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800827e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8008282:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008286:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800828a:	ee74 4a85 	vadd.f32	s9, s9, s10
 800828e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008292:	44d8      	add	r8, fp
 8008294:	45c1      	cmp	r9, r8
 8008296:	ed8e 9a00 	vstr	s18, [lr]
 800829a:	ed85 1a01 	vstr	s2, [r5, #4]
 800829e:	449e      	add	lr, r3
 80082a0:	ed8c 8a00 	vstr	s16, [ip]
 80082a4:	441d      	add	r5, r3
 80082a6:	ed80 6a00 	vstr	s12, [r0]
 80082aa:	edcc 0a01 	vstr	s1, [ip, #4]
 80082ae:	ed80 4a01 	vstr	s8, [r0, #4]
 80082b2:	449c      	add	ip, r3
 80082b4:	ed87 2a00 	vstr	s4, [r7]
 80082b8:	4418      	add	r0, r3
 80082ba:	ed41 3a01 	vstr	s7, [r1, #-4]
 80082be:	ed42 2a01 	vstr	s5, [r2, #-4]
 80082c2:	ed86 7a00 	vstr	s14, [r6]
 80082c6:	ed87 3a01 	vstr	s6, [r7, #4]
 80082ca:	edc1 4a00 	vstr	s9, [r1]
 80082ce:	441f      	add	r7, r3
 80082d0:	edc2 5a00 	vstr	s11, [r2]
 80082d4:	4419      	add	r1, r3
 80082d6:	edc6 6a01 	vstr	s13, [r6, #4]
 80082da:	441a      	add	r2, r3
 80082dc:	441e      	add	r6, r3
 80082de:	f63f af44 	bhi.w	800816a <arm_radix8_butterfly_f32+0x66>
 80082e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082e4:	2907      	cmp	r1, #7
 80082e6:	4620      	mov	r0, r4
 80082e8:	f240 81e9 	bls.w	80086be <arm_radix8_butterfly_f32+0x5ba>
 80082ec:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80082f0:	193e      	adds	r6, r7, r4
 80082f2:	1935      	adds	r5, r6, r4
 80082f4:	9c03      	ldr	r4, [sp, #12]
 80082f6:	9000      	str	r0, [sp, #0]
 80082f8:	4622      	mov	r2, r4
 80082fa:	3201      	adds	r2, #1
 80082fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008300:	9900      	ldr	r1, [sp, #0]
 8008302:	1828      	adds	r0, r5, r0
 8008304:	eb00 0e01 	add.w	lr, r0, r1
 8008308:	990c      	ldr	r1, [sp, #48]	; 0x30
 800830a:	440a      	add	r2, r1
 800830c:	eb04 0c01 	add.w	ip, r4, r1
 8008310:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8008314:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8008318:	9a00      	ldr	r2, [sp, #0]
 800831a:	940f      	str	r4, [sp, #60]	; 0x3c
 800831c:	00ed      	lsls	r5, r5, #3
 800831e:	9511      	str	r5, [sp, #68]	; 0x44
 8008320:	00d5      	lsls	r5, r2, #3
 8008322:	950d      	str	r5, [sp, #52]	; 0x34
 8008324:	9d01      	ldr	r5, [sp, #4]
 8008326:	3508      	adds	r5, #8
 8008328:	9516      	str	r5, [sp, #88]	; 0x58
 800832a:	9d02      	ldr	r5, [sp, #8]
 800832c:	3508      	adds	r5, #8
 800832e:	0114      	lsls	r4, r2, #4
 8008330:	9517      	str	r5, [sp, #92]	; 0x5c
 8008332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008334:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008336:	940e      	str	r4, [sp, #56]	; 0x38
 8008338:	00c0      	lsls	r0, r0, #3
 800833a:	9010      	str	r0, [sp, #64]	; 0x40
 800833c:	18aa      	adds	r2, r5, r2
 800833e:	9207      	str	r2, [sp, #28]
 8008340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008342:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008344:	18aa      	adds	r2, r5, r2
 8008346:	9208      	str	r2, [sp, #32]
 8008348:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800834a:	18aa      	adds	r2, r5, r2
 800834c:	9209      	str	r2, [sp, #36]	; 0x24
 800834e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008352:	f10e 0204 	add.w	r2, lr, #4
 8008356:	920a      	str	r2, [sp, #40]	; 0x28
 8008358:	00c9      	lsls	r1, r1, #3
 800835a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800835c:	310c      	adds	r1, #12
 800835e:	00f6      	lsls	r6, r6, #3
 8008360:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8008364:	9114      	str	r1, [sp, #80]	; 0x50
 8008366:	18a9      	adds	r1, r5, r2
 8008368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800836a:	9612      	str	r6, [sp, #72]	; 0x48
 800836c:	00ff      	lsls	r7, r7, #3
 800836e:	19ae      	adds	r6, r5, r6
 8008370:	3008      	adds	r0, #8
 8008372:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8008376:	9606      	str	r6, [sp, #24]
 8008378:	9019      	str	r0, [sp, #100]	; 0x64
 800837a:	18aa      	adds	r2, r5, r2
 800837c:	0164      	lsls	r4, r4, #5
 800837e:	19ee      	adds	r6, r5, r7
 8008380:	f10c 000c 	add.w	r0, ip, #12
 8008384:	9713      	str	r7, [sp, #76]	; 0x4c
 8008386:	9604      	str	r6, [sp, #16]
 8008388:	9015      	str	r0, [sp, #84]	; 0x54
 800838a:	9103      	str	r1, [sp, #12]
 800838c:	9205      	str	r2, [sp, #20]
 800838e:	f104 0208 	add.w	r2, r4, #8
 8008392:	9218      	str	r2, [sp, #96]	; 0x60
 8008394:	f04f 0801 	mov.w	r8, #1
 8008398:	2200      	movs	r2, #0
 800839a:	f102 0108 	add.w	r1, r2, #8
 800839e:	460f      	mov	r7, r1
 80083a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80083a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083a4:	188e      	adds	r6, r1, r2
 80083a6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80083a8:	188d      	adds	r5, r1, r2
 80083aa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80083ac:	188c      	adds	r4, r1, r2
 80083ae:	9919      	ldr	r1, [sp, #100]	; 0x64
 80083b0:	1888      	adds	r0, r1, r2
 80083b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80083b4:	eb01 0c02 	add.w	ip, r1, r2
 80083b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80083ba:	440a      	add	r2, r1
 80083bc:	9903      	ldr	r1, [sp, #12]
 80083be:	edd1 fa00 	vldr	s31, [r1]
 80083c2:	9905      	ldr	r1, [sp, #20]
 80083c4:	ed91 fa00 	vldr	s30, [r1]
 80083c8:	9904      	ldr	r1, [sp, #16]
 80083ca:	edd1 ea00 	vldr	s29, [r1]
 80083ce:	9906      	ldr	r1, [sp, #24]
 80083d0:	ed91 ea00 	vldr	s28, [r1]
 80083d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083d6:	edd1 da00 	vldr	s27, [r1]
 80083da:	9908      	ldr	r1, [sp, #32]
 80083dc:	ed91 da00 	vldr	s26, [r1]
 80083e0:	9907      	ldr	r1, [sp, #28]
 80083e2:	edd1 ca00 	vldr	s25, [r1]
 80083e6:	9903      	ldr	r1, [sp, #12]
 80083e8:	ed91 ca01 	vldr	s24, [r1, #4]
 80083ec:	9905      	ldr	r1, [sp, #20]
 80083ee:	edd1 ba01 	vldr	s23, [r1, #4]
 80083f2:	9904      	ldr	r1, [sp, #16]
 80083f4:	edd1 aa01 	vldr	s21, [r1, #4]
 80083f8:	9906      	ldr	r1, [sp, #24]
 80083fa:	ed91 aa01 	vldr	s20, [r1, #4]
 80083fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008400:	edd1 7a01 	vldr	s15, [r1, #4]
 8008404:	9908      	ldr	r1, [sp, #32]
 8008406:	edcd 7a00 	vstr	s15, [sp]
 800840a:	edd1 7a01 	vldr	s15, [r1, #4]
 800840e:	9907      	ldr	r1, [sp, #28]
 8008410:	edcd 7a01 	vstr	s15, [sp, #4]
 8008414:	edd1 7a01 	vldr	s15, [r1, #4]
 8008418:	eb0a 0e07 	add.w	lr, sl, r7
 800841c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800841e:	edcd 7a02 	vstr	s15, [sp, #8]
 8008422:	eb0c 010a 	add.w	r1, ip, sl
 8008426:	4456      	add	r6, sl
 8008428:	4455      	add	r5, sl
 800842a:	4454      	add	r4, sl
 800842c:	4450      	add	r0, sl
 800842e:	4452      	add	r2, sl
 8008430:	46c4      	mov	ip, r8
 8008432:	e001      	b.n	8008438 <arm_radix8_butterfly_f32+0x334>
 8008434:	3f3504f3 	.word	0x3f3504f3
 8008438:	ed96 5a00 	vldr	s10, [r6]
 800843c:	ed52 9a01 	vldr	s19, [r2, #-4]
 8008440:	ed11 6a01 	vldr	s12, [r1, #-4]
 8008444:	edd0 7a00 	vldr	s15, [r0]
 8008448:	ed17 7a01 	vldr	s14, [r7, #-4]
 800844c:	edde 3a00 	vldr	s7, [lr]
 8008450:	ed94 3a00 	vldr	s6, [r4]
 8008454:	ed95 2a00 	vldr	s4, [r5]
 8008458:	ed9e 0a01 	vldr	s0, [lr, #4]
 800845c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008460:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008464:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008468:	ee77 4a87 	vadd.f32	s9, s15, s14
 800846c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008470:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008474:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008478:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800847c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008480:	ed8e 6a00 	vstr	s12, [lr]
 8008484:	edd0 8a01 	vldr	s17, [r0, #4]
 8008488:	ed95 9a01 	vldr	s18, [r5, #4]
 800848c:	edd1 2a00 	vldr	s5, [r1]
 8008490:	ed97 7a00 	vldr	s14, [r7]
 8008494:	edd4 0a01 	vldr	s1, [r4, #4]
 8008498:	ed96 6a01 	vldr	s12, [r6, #4]
 800849c:	edd2 5a00 	vldr	s11, [r2]
 80084a0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80084a4:	ee33 3a69 	vsub.f32	s6, s6, s19
 80084a8:	ee39 5a62 	vsub.f32	s10, s18, s5
 80084ac:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80084b0:	ee38 4a44 	vsub.f32	s8, s16, s8
 80084b4:	ee38 7a87 	vadd.f32	s14, s17, s14
 80084b8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80084bc:	ee79 2a22 	vadd.f32	s5, s18, s5
 80084c0:	ee75 8a69 	vsub.f32	s17, s10, s19
 80084c4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80084c8:	ee35 5a29 	vadd.f32	s10, s10, s19
 80084cc:	ee72 7a67 	vsub.f32	s15, s4, s15
 80084d0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80084d4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80084d8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80084dc:	ee32 9a08 	vadd.f32	s18, s4, s16
 80084e0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80084e4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80084e8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80084ec:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80084f0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80084f4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80084f8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80084fc:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008500:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008504:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008508:	ee33 3a69 	vsub.f32	s6, s6, s19
 800850c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008510:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008514:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008518:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800851c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008520:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008524:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008528:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800852c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008530:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8008534:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008538:	ee74 2a62 	vsub.f32	s5, s8, s5
 800853c:	ee72 4a24 	vadd.f32	s9, s4, s9
 8008540:	ee30 4a60 	vsub.f32	s8, s0, s1
 8008544:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008548:	ee30 0a20 	vadd.f32	s0, s0, s1
 800854c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008550:	ee36 6a03 	vadd.f32	s12, s12, s6
 8008554:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008558:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800855c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8008560:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8008564:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8008568:	ee39 1a01 	vadd.f32	s2, s18, s2
 800856c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8008570:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8008574:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8008578:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800857c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8008580:	ee35 3a03 	vadd.f32	s6, s10, s6
 8008584:	ee72 6a66 	vsub.f32	s13, s4, s13
 8008588:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800858c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8008590:	ed9d 4a02 	vldr	s8, [sp, #8]
 8008594:	ed8e 1a01 	vstr	s2, [lr, #4]
 8008598:	ee77 3a63 	vsub.f32	s7, s14, s7
 800859c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80085a0:	ed9d 7a01 	vldr	s14, [sp, #4]
 80085a4:	ed86 3a00 	vstr	s6, [r6]
 80085a8:	ee30 9a89 	vadd.f32	s18, s1, s18
 80085ac:	ee32 2a05 	vadd.f32	s4, s4, s10
 80085b0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80085b4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80085b8:	ee67 2a22 	vmul.f32	s5, s14, s5
 80085bc:	ee64 1a00 	vmul.f32	s3, s8, s0
 80085c0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80085c4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80085c8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80085cc:	ee64 8a28 	vmul.f32	s17, s8, s17
 80085d0:	ed9d 4a00 	vldr	s8, [sp]
 80085d4:	edc6 6a01 	vstr	s13, [r6, #4]
 80085d8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80085dc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80085e0:	ee64 9a29 	vmul.f32	s19, s8, s19
 80085e4:	ee24 4a25 	vmul.f32	s8, s8, s11
 80085e8:	ee30 7a87 	vadd.f32	s14, s1, s14
 80085ec:	ee74 4a84 	vadd.f32	s9, s9, s8
 80085f0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80085f4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80085f8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80085fc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8008600:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008604:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008608:	ee75 1a21 	vadd.f32	s3, s10, s3
 800860c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8008610:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8008614:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008618:	ee36 6a67 	vsub.f32	s12, s12, s15
 800861c:	44dc      	add	ip, fp
 800861e:	45e1      	cmp	r9, ip
 8008620:	ed84 9a00 	vstr	s18, [r4]
 8008624:	edc4 3a01 	vstr	s7, [r4, #4]
 8008628:	449e      	add	lr, r3
 800862a:	ed02 7a01 	vstr	s14, [r2, #-4]
 800862e:	edc2 2a00 	vstr	s5, [r2]
 8008632:	441e      	add	r6, r3
 8008634:	ed85 2a00 	vstr	s4, [r5]
 8008638:	ed85 8a01 	vstr	s16, [r5, #4]
 800863c:	441c      	add	r4, r3
 800863e:	ed47 1a01 	vstr	s3, [r7, #-4]
 8008642:	ed87 0a00 	vstr	s0, [r7]
 8008646:	441a      	add	r2, r3
 8008648:	ed41 4a01 	vstr	s9, [r1, #-4]
 800864c:	edc1 9a00 	vstr	s19, [r1]
 8008650:	441d      	add	r5, r3
 8008652:	edc0 0a00 	vstr	s1, [r0]
 8008656:	441f      	add	r7, r3
 8008658:	ed80 6a01 	vstr	s12, [r0, #4]
 800865c:	4419      	add	r1, r3
 800865e:	4418      	add	r0, r3
 8008660:	f63f aeea 	bhi.w	8008438 <arm_radix8_butterfly_f32+0x334>
 8008664:	9a03      	ldr	r2, [sp, #12]
 8008666:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008668:	440a      	add	r2, r1
 800866a:	9203      	str	r2, [sp, #12]
 800866c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800866e:	9a05      	ldr	r2, [sp, #20]
 8008670:	440a      	add	r2, r1
 8008672:	9205      	str	r2, [sp, #20]
 8008674:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008676:	9a04      	ldr	r2, [sp, #16]
 8008678:	440a      	add	r2, r1
 800867a:	9204      	str	r2, [sp, #16]
 800867c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800867e:	9a06      	ldr	r2, [sp, #24]
 8008680:	440a      	add	r2, r1
 8008682:	9206      	str	r2, [sp, #24]
 8008684:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008688:	440a      	add	r2, r1
 800868a:	9209      	str	r2, [sp, #36]	; 0x24
 800868c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800868e:	9a08      	ldr	r2, [sp, #32]
 8008690:	440a      	add	r2, r1
 8008692:	9208      	str	r2, [sp, #32]
 8008694:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008696:	9a07      	ldr	r2, [sp, #28]
 8008698:	440a      	add	r2, r1
 800869a:	9207      	str	r2, [sp, #28]
 800869c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800869e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a0:	f108 0801 	add.w	r8, r8, #1
 80086a4:	3208      	adds	r2, #8
 80086a6:	4588      	cmp	r8, r1
 80086a8:	920a      	str	r2, [sp, #40]	; 0x28
 80086aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ac:	f47f ae75 	bne.w	800839a <arm_radix8_butterfly_f32+0x296>
 80086b0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	46c3      	mov	fp, r8
 80086b8:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80086bc:	e532      	b.n	8008124 <arm_radix8_butterfly_f32+0x20>
 80086be:	b01d      	add	sp, #116	; 0x74
 80086c0:	ecbd 8b10 	vpop	{d8-d15}
 80086c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086c8 <rand>:
 80086c8:	4b16      	ldr	r3, [pc, #88]	; (8008724 <rand+0x5c>)
 80086ca:	b510      	push	{r4, lr}
 80086cc:	681c      	ldr	r4, [r3, #0]
 80086ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086d0:	b9b3      	cbnz	r3, 8008700 <rand+0x38>
 80086d2:	2018      	movs	r0, #24
 80086d4:	f001 fd06 	bl	800a0e4 <malloc>
 80086d8:	4602      	mov	r2, r0
 80086da:	6320      	str	r0, [r4, #48]	; 0x30
 80086dc:	b920      	cbnz	r0, 80086e8 <rand+0x20>
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <rand+0x60>)
 80086e0:	4812      	ldr	r0, [pc, #72]	; (800872c <rand+0x64>)
 80086e2:	2152      	movs	r1, #82	; 0x52
 80086e4:	f000 fe18 	bl	8009318 <__assert_func>
 80086e8:	4911      	ldr	r1, [pc, #68]	; (8008730 <rand+0x68>)
 80086ea:	4b12      	ldr	r3, [pc, #72]	; (8008734 <rand+0x6c>)
 80086ec:	e9c0 1300 	strd	r1, r3, [r0]
 80086f0:	4b11      	ldr	r3, [pc, #68]	; (8008738 <rand+0x70>)
 80086f2:	6083      	str	r3, [r0, #8]
 80086f4:	230b      	movs	r3, #11
 80086f6:	8183      	strh	r3, [r0, #12]
 80086f8:	2100      	movs	r1, #0
 80086fa:	2001      	movs	r0, #1
 80086fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008700:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008702:	480e      	ldr	r0, [pc, #56]	; (800873c <rand+0x74>)
 8008704:	690b      	ldr	r3, [r1, #16]
 8008706:	694c      	ldr	r4, [r1, #20]
 8008708:	4a0d      	ldr	r2, [pc, #52]	; (8008740 <rand+0x78>)
 800870a:	4358      	muls	r0, r3
 800870c:	fb02 0004 	mla	r0, r2, r4, r0
 8008710:	fba3 3202 	umull	r3, r2, r3, r2
 8008714:	3301      	adds	r3, #1
 8008716:	eb40 0002 	adc.w	r0, r0, r2
 800871a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800871e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008722:	bd10      	pop	{r4, pc}
 8008724:	20000068 	.word	0x20000068
 8008728:	0801f770 	.word	0x0801f770
 800872c:	0801f787 	.word	0x0801f787
 8008730:	abcd330e 	.word	0xabcd330e
 8008734:	e66d1234 	.word	0xe66d1234
 8008738:	0005deec 	.word	0x0005deec
 800873c:	5851f42d 	.word	0x5851f42d
 8008740:	4c957f2d 	.word	0x4c957f2d

08008744 <__cvt>:
 8008744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	ec55 4b10 	vmov	r4, r5, d0
 800874c:	2d00      	cmp	r5, #0
 800874e:	460e      	mov	r6, r1
 8008750:	4619      	mov	r1, r3
 8008752:	462b      	mov	r3, r5
 8008754:	bfbb      	ittet	lt
 8008756:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800875a:	461d      	movlt	r5, r3
 800875c:	2300      	movge	r3, #0
 800875e:	232d      	movlt	r3, #45	; 0x2d
 8008760:	700b      	strb	r3, [r1, #0]
 8008762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008764:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008768:	4691      	mov	r9, r2
 800876a:	f023 0820 	bic.w	r8, r3, #32
 800876e:	bfbc      	itt	lt
 8008770:	4622      	movlt	r2, r4
 8008772:	4614      	movlt	r4, r2
 8008774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008778:	d005      	beq.n	8008786 <__cvt+0x42>
 800877a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800877e:	d100      	bne.n	8008782 <__cvt+0x3e>
 8008780:	3601      	adds	r6, #1
 8008782:	2102      	movs	r1, #2
 8008784:	e000      	b.n	8008788 <__cvt+0x44>
 8008786:	2103      	movs	r1, #3
 8008788:	ab03      	add	r3, sp, #12
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	ab02      	add	r3, sp, #8
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	ec45 4b10 	vmov	d0, r4, r5
 8008794:	4653      	mov	r3, sl
 8008796:	4632      	mov	r2, r6
 8008798:	f000 fe66 	bl	8009468 <_dtoa_r>
 800879c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087a0:	4607      	mov	r7, r0
 80087a2:	d102      	bne.n	80087aa <__cvt+0x66>
 80087a4:	f019 0f01 	tst.w	r9, #1
 80087a8:	d022      	beq.n	80087f0 <__cvt+0xac>
 80087aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087ae:	eb07 0906 	add.w	r9, r7, r6
 80087b2:	d110      	bne.n	80087d6 <__cvt+0x92>
 80087b4:	783b      	ldrb	r3, [r7, #0]
 80087b6:	2b30      	cmp	r3, #48	; 0x30
 80087b8:	d10a      	bne.n	80087d0 <__cvt+0x8c>
 80087ba:	2200      	movs	r2, #0
 80087bc:	2300      	movs	r3, #0
 80087be:	4620      	mov	r0, r4
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f8 f9e1 	bl	8000b88 <__aeabi_dcmpeq>
 80087c6:	b918      	cbnz	r0, 80087d0 <__cvt+0x8c>
 80087c8:	f1c6 0601 	rsb	r6, r6, #1
 80087cc:	f8ca 6000 	str.w	r6, [sl]
 80087d0:	f8da 3000 	ldr.w	r3, [sl]
 80087d4:	4499      	add	r9, r3
 80087d6:	2200      	movs	r2, #0
 80087d8:	2300      	movs	r3, #0
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f8 f9d3 	bl	8000b88 <__aeabi_dcmpeq>
 80087e2:	b108      	cbz	r0, 80087e8 <__cvt+0xa4>
 80087e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80087e8:	2230      	movs	r2, #48	; 0x30
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	454b      	cmp	r3, r9
 80087ee:	d307      	bcc.n	8008800 <__cvt+0xbc>
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087f4:	1bdb      	subs	r3, r3, r7
 80087f6:	4638      	mov	r0, r7
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	b004      	add	sp, #16
 80087fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008800:	1c59      	adds	r1, r3, #1
 8008802:	9103      	str	r1, [sp, #12]
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e7f0      	b.n	80087ea <__cvt+0xa6>

08008808 <__exponent>:
 8008808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800880a:	4603      	mov	r3, r0
 800880c:	2900      	cmp	r1, #0
 800880e:	bfb8      	it	lt
 8008810:	4249      	neglt	r1, r1
 8008812:	f803 2b02 	strb.w	r2, [r3], #2
 8008816:	bfb4      	ite	lt
 8008818:	222d      	movlt	r2, #45	; 0x2d
 800881a:	222b      	movge	r2, #43	; 0x2b
 800881c:	2909      	cmp	r1, #9
 800881e:	7042      	strb	r2, [r0, #1]
 8008820:	dd2a      	ble.n	8008878 <__exponent+0x70>
 8008822:	f10d 0207 	add.w	r2, sp, #7
 8008826:	4617      	mov	r7, r2
 8008828:	260a      	movs	r6, #10
 800882a:	4694      	mov	ip, r2
 800882c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008830:	fb06 1415 	mls	r4, r6, r5, r1
 8008834:	3430      	adds	r4, #48	; 0x30
 8008836:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800883a:	460c      	mov	r4, r1
 800883c:	2c63      	cmp	r4, #99	; 0x63
 800883e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008842:	4629      	mov	r1, r5
 8008844:	dcf1      	bgt.n	800882a <__exponent+0x22>
 8008846:	3130      	adds	r1, #48	; 0x30
 8008848:	f1ac 0402 	sub.w	r4, ip, #2
 800884c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008850:	1c41      	adds	r1, r0, #1
 8008852:	4622      	mov	r2, r4
 8008854:	42ba      	cmp	r2, r7
 8008856:	d30a      	bcc.n	800886e <__exponent+0x66>
 8008858:	f10d 0209 	add.w	r2, sp, #9
 800885c:	eba2 020c 	sub.w	r2, r2, ip
 8008860:	42bc      	cmp	r4, r7
 8008862:	bf88      	it	hi
 8008864:	2200      	movhi	r2, #0
 8008866:	4413      	add	r3, r2
 8008868:	1a18      	subs	r0, r3, r0
 800886a:	b003      	add	sp, #12
 800886c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008872:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008876:	e7ed      	b.n	8008854 <__exponent+0x4c>
 8008878:	2330      	movs	r3, #48	; 0x30
 800887a:	3130      	adds	r1, #48	; 0x30
 800887c:	7083      	strb	r3, [r0, #2]
 800887e:	70c1      	strb	r1, [r0, #3]
 8008880:	1d03      	adds	r3, r0, #4
 8008882:	e7f1      	b.n	8008868 <__exponent+0x60>

08008884 <_printf_float>:
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	ed2d 8b02 	vpush	{d8}
 800888c:	b08d      	sub	sp, #52	; 0x34
 800888e:	460c      	mov	r4, r1
 8008890:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008894:	4616      	mov	r6, r2
 8008896:	461f      	mov	r7, r3
 8008898:	4605      	mov	r5, r0
 800889a:	f000 fcc7 	bl	800922c <_localeconv_r>
 800889e:	f8d0 a000 	ldr.w	sl, [r0]
 80088a2:	4650      	mov	r0, sl
 80088a4:	f7f7 fd44 	bl	8000330 <strlen>
 80088a8:	2300      	movs	r3, #0
 80088aa:	930a      	str	r3, [sp, #40]	; 0x28
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	f8d8 3000 	ldr.w	r3, [r8]
 80088b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088b8:	3307      	adds	r3, #7
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	f103 0208 	add.w	r2, r3, #8
 80088c2:	f8c8 2000 	str.w	r2, [r8]
 80088c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088ce:	9307      	str	r3, [sp, #28]
 80088d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80088d4:	ee08 0a10 	vmov	s16, r0
 80088d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80088dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088e0:	4b9e      	ldr	r3, [pc, #632]	; (8008b5c <_printf_float+0x2d8>)
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	f7f8 f981 	bl	8000bec <__aeabi_dcmpun>
 80088ea:	bb88      	cbnz	r0, 8008950 <_printf_float+0xcc>
 80088ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088f0:	4b9a      	ldr	r3, [pc, #616]	; (8008b5c <_printf_float+0x2d8>)
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295
 80088f6:	f7f8 f95b 	bl	8000bb0 <__aeabi_dcmple>
 80088fa:	bb48      	cbnz	r0, 8008950 <_printf_float+0xcc>
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	f7f8 f94a 	bl	8000b9c <__aeabi_dcmplt>
 8008908:	b110      	cbz	r0, 8008910 <_printf_float+0x8c>
 800890a:	232d      	movs	r3, #45	; 0x2d
 800890c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008910:	4a93      	ldr	r2, [pc, #588]	; (8008b60 <_printf_float+0x2dc>)
 8008912:	4b94      	ldr	r3, [pc, #592]	; (8008b64 <_printf_float+0x2e0>)
 8008914:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008918:	bf94      	ite	ls
 800891a:	4690      	movls	r8, r2
 800891c:	4698      	movhi	r8, r3
 800891e:	2303      	movs	r3, #3
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	9b05      	ldr	r3, [sp, #20]
 8008924:	f023 0304 	bic.w	r3, r3, #4
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	f04f 0900 	mov.w	r9, #0
 800892e:	9700      	str	r7, [sp, #0]
 8008930:	4633      	mov	r3, r6
 8008932:	aa0b      	add	r2, sp, #44	; 0x2c
 8008934:	4621      	mov	r1, r4
 8008936:	4628      	mov	r0, r5
 8008938:	f000 f9da 	bl	8008cf0 <_printf_common>
 800893c:	3001      	adds	r0, #1
 800893e:	f040 8090 	bne.w	8008a62 <_printf_float+0x1de>
 8008942:	f04f 30ff 	mov.w	r0, #4294967295
 8008946:	b00d      	add	sp, #52	; 0x34
 8008948:	ecbd 8b02 	vpop	{d8}
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	4642      	mov	r2, r8
 8008952:	464b      	mov	r3, r9
 8008954:	4640      	mov	r0, r8
 8008956:	4649      	mov	r1, r9
 8008958:	f7f8 f948 	bl	8000bec <__aeabi_dcmpun>
 800895c:	b140      	cbz	r0, 8008970 <_printf_float+0xec>
 800895e:	464b      	mov	r3, r9
 8008960:	2b00      	cmp	r3, #0
 8008962:	bfbc      	itt	lt
 8008964:	232d      	movlt	r3, #45	; 0x2d
 8008966:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800896a:	4a7f      	ldr	r2, [pc, #508]	; (8008b68 <_printf_float+0x2e4>)
 800896c:	4b7f      	ldr	r3, [pc, #508]	; (8008b6c <_printf_float+0x2e8>)
 800896e:	e7d1      	b.n	8008914 <_printf_float+0x90>
 8008970:	6863      	ldr	r3, [r4, #4]
 8008972:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008976:	9206      	str	r2, [sp, #24]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	d13f      	bne.n	80089fc <_printf_float+0x178>
 800897c:	2306      	movs	r3, #6
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	9b05      	ldr	r3, [sp, #20]
 8008982:	6861      	ldr	r1, [r4, #4]
 8008984:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008988:	2300      	movs	r3, #0
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	ab0a      	add	r3, sp, #40	; 0x28
 800898e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008992:	ab09      	add	r3, sp, #36	; 0x24
 8008994:	ec49 8b10 	vmov	d0, r8, r9
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	6022      	str	r2, [r4, #0]
 800899c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089a0:	4628      	mov	r0, r5
 80089a2:	f7ff fecf 	bl	8008744 <__cvt>
 80089a6:	9b06      	ldr	r3, [sp, #24]
 80089a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089aa:	2b47      	cmp	r3, #71	; 0x47
 80089ac:	4680      	mov	r8, r0
 80089ae:	d108      	bne.n	80089c2 <_printf_float+0x13e>
 80089b0:	1cc8      	adds	r0, r1, #3
 80089b2:	db02      	blt.n	80089ba <_printf_float+0x136>
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	4299      	cmp	r1, r3
 80089b8:	dd41      	ble.n	8008a3e <_printf_float+0x1ba>
 80089ba:	f1ab 0302 	sub.w	r3, fp, #2
 80089be:	fa5f fb83 	uxtb.w	fp, r3
 80089c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089c6:	d820      	bhi.n	8008a0a <_printf_float+0x186>
 80089c8:	3901      	subs	r1, #1
 80089ca:	465a      	mov	r2, fp
 80089cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089d0:	9109      	str	r1, [sp, #36]	; 0x24
 80089d2:	f7ff ff19 	bl	8008808 <__exponent>
 80089d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089d8:	1813      	adds	r3, r2, r0
 80089da:	2a01      	cmp	r2, #1
 80089dc:	4681      	mov	r9, r0
 80089de:	6123      	str	r3, [r4, #16]
 80089e0:	dc02      	bgt.n	80089e8 <_printf_float+0x164>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	07d2      	lsls	r2, r2, #31
 80089e6:	d501      	bpl.n	80089ec <_printf_float+0x168>
 80089e8:	3301      	adds	r3, #1
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d09c      	beq.n	800892e <_printf_float+0xaa>
 80089f4:	232d      	movs	r3, #45	; 0x2d
 80089f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fa:	e798      	b.n	800892e <_printf_float+0xaa>
 80089fc:	9a06      	ldr	r2, [sp, #24]
 80089fe:	2a47      	cmp	r2, #71	; 0x47
 8008a00:	d1be      	bne.n	8008980 <_printf_float+0xfc>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1bc      	bne.n	8008980 <_printf_float+0xfc>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e7b9      	b.n	800897e <_printf_float+0xfa>
 8008a0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a0e:	d118      	bne.n	8008a42 <_printf_float+0x1be>
 8008a10:	2900      	cmp	r1, #0
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	dd0b      	ble.n	8008a2e <_printf_float+0x1aa>
 8008a16:	6121      	str	r1, [r4, #16]
 8008a18:	b913      	cbnz	r3, 8008a20 <_printf_float+0x19c>
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	07d0      	lsls	r0, r2, #31
 8008a1e:	d502      	bpl.n	8008a26 <_printf_float+0x1a2>
 8008a20:	3301      	adds	r3, #1
 8008a22:	440b      	add	r3, r1
 8008a24:	6123      	str	r3, [r4, #16]
 8008a26:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a28:	f04f 0900 	mov.w	r9, #0
 8008a2c:	e7de      	b.n	80089ec <_printf_float+0x168>
 8008a2e:	b913      	cbnz	r3, 8008a36 <_printf_float+0x1b2>
 8008a30:	6822      	ldr	r2, [r4, #0]
 8008a32:	07d2      	lsls	r2, r2, #31
 8008a34:	d501      	bpl.n	8008a3a <_printf_float+0x1b6>
 8008a36:	3302      	adds	r3, #2
 8008a38:	e7f4      	b.n	8008a24 <_printf_float+0x1a0>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e7f2      	b.n	8008a24 <_printf_float+0x1a0>
 8008a3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a44:	4299      	cmp	r1, r3
 8008a46:	db05      	blt.n	8008a54 <_printf_float+0x1d0>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	6121      	str	r1, [r4, #16]
 8008a4c:	07d8      	lsls	r0, r3, #31
 8008a4e:	d5ea      	bpl.n	8008a26 <_printf_float+0x1a2>
 8008a50:	1c4b      	adds	r3, r1, #1
 8008a52:	e7e7      	b.n	8008a24 <_printf_float+0x1a0>
 8008a54:	2900      	cmp	r1, #0
 8008a56:	bfd4      	ite	le
 8008a58:	f1c1 0202 	rsble	r2, r1, #2
 8008a5c:	2201      	movgt	r2, #1
 8008a5e:	4413      	add	r3, r2
 8008a60:	e7e0      	b.n	8008a24 <_printf_float+0x1a0>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	055a      	lsls	r2, r3, #21
 8008a66:	d407      	bmi.n	8008a78 <_printf_float+0x1f4>
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	d12c      	bne.n	8008ad0 <_printf_float+0x24c>
 8008a76:	e764      	b.n	8008942 <_printf_float+0xbe>
 8008a78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a7c:	f240 80e0 	bls.w	8008c40 <_printf_float+0x3bc>
 8008a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a84:	2200      	movs	r2, #0
 8008a86:	2300      	movs	r3, #0
 8008a88:	f7f8 f87e 	bl	8000b88 <__aeabi_dcmpeq>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d034      	beq.n	8008afa <_printf_float+0x276>
 8008a90:	4a37      	ldr	r2, [pc, #220]	; (8008b70 <_printf_float+0x2ec>)
 8008a92:	2301      	movs	r3, #1
 8008a94:	4631      	mov	r1, r6
 8008a96:	4628      	mov	r0, r5
 8008a98:	47b8      	blx	r7
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	f43f af51 	beq.w	8008942 <_printf_float+0xbe>
 8008aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	db02      	blt.n	8008aae <_printf_float+0x22a>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	07d8      	lsls	r0, r3, #31
 8008aac:	d510      	bpl.n	8008ad0 <_printf_float+0x24c>
 8008aae:	ee18 3a10 	vmov	r3, s16
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f af41 	beq.w	8008942 <_printf_float+0xbe>
 8008ac0:	f04f 0800 	mov.w	r8, #0
 8008ac4:	f104 091a 	add.w	r9, r4, #26
 8008ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aca:	3b01      	subs	r3, #1
 8008acc:	4543      	cmp	r3, r8
 8008ace:	dc09      	bgt.n	8008ae4 <_printf_float+0x260>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	079b      	lsls	r3, r3, #30
 8008ad4:	f100 8107 	bmi.w	8008ce6 <_printf_float+0x462>
 8008ad8:	68e0      	ldr	r0, [r4, #12]
 8008ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008adc:	4298      	cmp	r0, r3
 8008ade:	bfb8      	it	lt
 8008ae0:	4618      	movlt	r0, r3
 8008ae2:	e730      	b.n	8008946 <_printf_float+0xc2>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	464a      	mov	r2, r9
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	f43f af27 	beq.w	8008942 <_printf_float+0xbe>
 8008af4:	f108 0801 	add.w	r8, r8, #1
 8008af8:	e7e6      	b.n	8008ac8 <_printf_float+0x244>
 8008afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dc39      	bgt.n	8008b74 <_printf_float+0x2f0>
 8008b00:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <_printf_float+0x2ec>)
 8008b02:	2301      	movs	r3, #1
 8008b04:	4631      	mov	r1, r6
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f af19 	beq.w	8008942 <_printf_float+0xbe>
 8008b10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d102      	bne.n	8008b1e <_printf_float+0x29a>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	07d9      	lsls	r1, r3, #31
 8008b1c:	d5d8      	bpl.n	8008ad0 <_printf_float+0x24c>
 8008b1e:	ee18 3a10 	vmov	r3, s16
 8008b22:	4652      	mov	r2, sl
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f af09 	beq.w	8008942 <_printf_float+0xbe>
 8008b30:	f04f 0900 	mov.w	r9, #0
 8008b34:	f104 0a1a 	add.w	sl, r4, #26
 8008b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3a:	425b      	negs	r3, r3
 8008b3c:	454b      	cmp	r3, r9
 8008b3e:	dc01      	bgt.n	8008b44 <_printf_float+0x2c0>
 8008b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b42:	e792      	b.n	8008a6a <_printf_float+0x1e6>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4652      	mov	r2, sl
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b8      	blx	r7
 8008b4e:	3001      	adds	r0, #1
 8008b50:	f43f aef7 	beq.w	8008942 <_printf_float+0xbe>
 8008b54:	f109 0901 	add.w	r9, r9, #1
 8008b58:	e7ee      	b.n	8008b38 <_printf_float+0x2b4>
 8008b5a:	bf00      	nop
 8008b5c:	7fefffff 	.word	0x7fefffff
 8008b60:	0801f7df 	.word	0x0801f7df
 8008b64:	0801f7e3 	.word	0x0801f7e3
 8008b68:	0801f7e7 	.word	0x0801f7e7
 8008b6c:	0801f7eb 	.word	0x0801f7eb
 8008b70:	0801f7ef 	.word	0x0801f7ef
 8008b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	bfa8      	it	ge
 8008b7c:	461a      	movge	r2, r3
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	4691      	mov	r9, r2
 8008b82:	dc37      	bgt.n	8008bf4 <_printf_float+0x370>
 8008b84:	f04f 0b00 	mov.w	fp, #0
 8008b88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b8c:	f104 021a 	add.w	r2, r4, #26
 8008b90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b92:	9305      	str	r3, [sp, #20]
 8008b94:	eba3 0309 	sub.w	r3, r3, r9
 8008b98:	455b      	cmp	r3, fp
 8008b9a:	dc33      	bgt.n	8008c04 <_printf_float+0x380>
 8008b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	db3b      	blt.n	8008c1c <_printf_float+0x398>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	07da      	lsls	r2, r3, #31
 8008ba8:	d438      	bmi.n	8008c1c <_printf_float+0x398>
 8008baa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008bae:	eba2 0903 	sub.w	r9, r2, r3
 8008bb2:	9b05      	ldr	r3, [sp, #20]
 8008bb4:	1ad2      	subs	r2, r2, r3
 8008bb6:	4591      	cmp	r9, r2
 8008bb8:	bfa8      	it	ge
 8008bba:	4691      	movge	r9, r2
 8008bbc:	f1b9 0f00 	cmp.w	r9, #0
 8008bc0:	dc35      	bgt.n	8008c2e <_printf_float+0x3aa>
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bca:	f104 0a1a 	add.w	sl, r4, #26
 8008bce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bd2:	1a9b      	subs	r3, r3, r2
 8008bd4:	eba3 0309 	sub.w	r3, r3, r9
 8008bd8:	4543      	cmp	r3, r8
 8008bda:	f77f af79 	ble.w	8008ad0 <_printf_float+0x24c>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4652      	mov	r2, sl
 8008be2:	4631      	mov	r1, r6
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b8      	blx	r7
 8008be8:	3001      	adds	r0, #1
 8008bea:	f43f aeaa 	beq.w	8008942 <_printf_float+0xbe>
 8008bee:	f108 0801 	add.w	r8, r8, #1
 8008bf2:	e7ec      	b.n	8008bce <_printf_float+0x34a>
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d1c0      	bne.n	8008b84 <_printf_float+0x300>
 8008c02:	e69e      	b.n	8008942 <_printf_float+0xbe>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	9205      	str	r2, [sp, #20]
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f43f ae97 	beq.w	8008942 <_printf_float+0xbe>
 8008c14:	9a05      	ldr	r2, [sp, #20]
 8008c16:	f10b 0b01 	add.w	fp, fp, #1
 8008c1a:	e7b9      	b.n	8008b90 <_printf_float+0x30c>
 8008c1c:	ee18 3a10 	vmov	r3, s16
 8008c20:	4652      	mov	r2, sl
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d1be      	bne.n	8008baa <_printf_float+0x326>
 8008c2c:	e689      	b.n	8008942 <_printf_float+0xbe>
 8008c2e:	9a05      	ldr	r2, [sp, #20]
 8008c30:	464b      	mov	r3, r9
 8008c32:	4442      	add	r2, r8
 8008c34:	4631      	mov	r1, r6
 8008c36:	4628      	mov	r0, r5
 8008c38:	47b8      	blx	r7
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d1c1      	bne.n	8008bc2 <_printf_float+0x33e>
 8008c3e:	e680      	b.n	8008942 <_printf_float+0xbe>
 8008c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c42:	2a01      	cmp	r2, #1
 8008c44:	dc01      	bgt.n	8008c4a <_printf_float+0x3c6>
 8008c46:	07db      	lsls	r3, r3, #31
 8008c48:	d53a      	bpl.n	8008cc0 <_printf_float+0x43c>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b8      	blx	r7
 8008c54:	3001      	adds	r0, #1
 8008c56:	f43f ae74 	beq.w	8008942 <_printf_float+0xbe>
 8008c5a:	ee18 3a10 	vmov	r3, s16
 8008c5e:	4652      	mov	r2, sl
 8008c60:	4631      	mov	r1, r6
 8008c62:	4628      	mov	r0, r5
 8008c64:	47b8      	blx	r7
 8008c66:	3001      	adds	r0, #1
 8008c68:	f43f ae6b 	beq.w	8008942 <_printf_float+0xbe>
 8008c6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c70:	2200      	movs	r2, #0
 8008c72:	2300      	movs	r3, #0
 8008c74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008c78:	f7f7 ff86 	bl	8000b88 <__aeabi_dcmpeq>
 8008c7c:	b9d8      	cbnz	r0, 8008cb6 <_printf_float+0x432>
 8008c7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c82:	f108 0201 	add.w	r2, r8, #1
 8008c86:	4631      	mov	r1, r6
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d10e      	bne.n	8008cae <_printf_float+0x42a>
 8008c90:	e657      	b.n	8008942 <_printf_float+0xbe>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4652      	mov	r2, sl
 8008c96:	4631      	mov	r1, r6
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b8      	blx	r7
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	f43f ae50 	beq.w	8008942 <_printf_float+0xbe>
 8008ca2:	f108 0801 	add.w	r8, r8, #1
 8008ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	4543      	cmp	r3, r8
 8008cac:	dcf1      	bgt.n	8008c92 <_printf_float+0x40e>
 8008cae:	464b      	mov	r3, r9
 8008cb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cb4:	e6da      	b.n	8008a6c <_printf_float+0x1e8>
 8008cb6:	f04f 0800 	mov.w	r8, #0
 8008cba:	f104 0a1a 	add.w	sl, r4, #26
 8008cbe:	e7f2      	b.n	8008ca6 <_printf_float+0x422>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4642      	mov	r2, r8
 8008cc4:	e7df      	b.n	8008c86 <_printf_float+0x402>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	464a      	mov	r2, r9
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b8      	blx	r7
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	f43f ae36 	beq.w	8008942 <_printf_float+0xbe>
 8008cd6:	f108 0801 	add.w	r8, r8, #1
 8008cda:	68e3      	ldr	r3, [r4, #12]
 8008cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cde:	1a5b      	subs	r3, r3, r1
 8008ce0:	4543      	cmp	r3, r8
 8008ce2:	dcf0      	bgt.n	8008cc6 <_printf_float+0x442>
 8008ce4:	e6f8      	b.n	8008ad8 <_printf_float+0x254>
 8008ce6:	f04f 0800 	mov.w	r8, #0
 8008cea:	f104 0919 	add.w	r9, r4, #25
 8008cee:	e7f4      	b.n	8008cda <_printf_float+0x456>

08008cf0 <_printf_common>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	4699      	mov	r9, r3
 8008cf8:	688a      	ldr	r2, [r1, #8]
 8008cfa:	690b      	ldr	r3, [r1, #16]
 8008cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	bfb8      	it	lt
 8008d04:	4613      	movlt	r3, r2
 8008d06:	6033      	str	r3, [r6, #0]
 8008d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b10a      	cbz	r2, 8008d16 <_printf_common+0x26>
 8008d12:	3301      	adds	r3, #1
 8008d14:	6033      	str	r3, [r6, #0]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	0699      	lsls	r1, r3, #26
 8008d1a:	bf42      	ittt	mi
 8008d1c:	6833      	ldrmi	r3, [r6, #0]
 8008d1e:	3302      	addmi	r3, #2
 8008d20:	6033      	strmi	r3, [r6, #0]
 8008d22:	6825      	ldr	r5, [r4, #0]
 8008d24:	f015 0506 	ands.w	r5, r5, #6
 8008d28:	d106      	bne.n	8008d38 <_printf_common+0x48>
 8008d2a:	f104 0a19 	add.w	sl, r4, #25
 8008d2e:	68e3      	ldr	r3, [r4, #12]
 8008d30:	6832      	ldr	r2, [r6, #0]
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	42ab      	cmp	r3, r5
 8008d36:	dc26      	bgt.n	8008d86 <_printf_common+0x96>
 8008d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d3c:	1e13      	subs	r3, r2, #0
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	bf18      	it	ne
 8008d42:	2301      	movne	r3, #1
 8008d44:	0692      	lsls	r2, r2, #26
 8008d46:	d42b      	bmi.n	8008da0 <_printf_common+0xb0>
 8008d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4638      	mov	r0, r7
 8008d50:	47c0      	blx	r8
 8008d52:	3001      	adds	r0, #1
 8008d54:	d01e      	beq.n	8008d94 <_printf_common+0xa4>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	6922      	ldr	r2, [r4, #16]
 8008d5a:	f003 0306 	and.w	r3, r3, #6
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	bf02      	ittt	eq
 8008d62:	68e5      	ldreq	r5, [r4, #12]
 8008d64:	6833      	ldreq	r3, [r6, #0]
 8008d66:	1aed      	subeq	r5, r5, r3
 8008d68:	68a3      	ldr	r3, [r4, #8]
 8008d6a:	bf0c      	ite	eq
 8008d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d70:	2500      	movne	r5, #0
 8008d72:	4293      	cmp	r3, r2
 8008d74:	bfc4      	itt	gt
 8008d76:	1a9b      	subgt	r3, r3, r2
 8008d78:	18ed      	addgt	r5, r5, r3
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	341a      	adds	r4, #26
 8008d7e:	42b5      	cmp	r5, r6
 8008d80:	d11a      	bne.n	8008db8 <_printf_common+0xc8>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e008      	b.n	8008d98 <_printf_common+0xa8>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4652      	mov	r2, sl
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	47c0      	blx	r8
 8008d90:	3001      	adds	r0, #1
 8008d92:	d103      	bne.n	8008d9c <_printf_common+0xac>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	e7c6      	b.n	8008d2e <_printf_common+0x3e>
 8008da0:	18e1      	adds	r1, r4, r3
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	2030      	movs	r0, #48	; 0x30
 8008da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008daa:	4422      	add	r2, r4
 8008dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db4:	3302      	adds	r3, #2
 8008db6:	e7c7      	b.n	8008d48 <_printf_common+0x58>
 8008db8:	2301      	movs	r3, #1
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	47c0      	blx	r8
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d0e6      	beq.n	8008d94 <_printf_common+0xa4>
 8008dc6:	3601      	adds	r6, #1
 8008dc8:	e7d9      	b.n	8008d7e <_printf_common+0x8e>
	...

08008dcc <_printf_i>:
 8008dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	7e0f      	ldrb	r7, [r1, #24]
 8008dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd4:	2f78      	cmp	r7, #120	; 0x78
 8008dd6:	4691      	mov	r9, r2
 8008dd8:	4680      	mov	r8, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	469a      	mov	sl, r3
 8008dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de2:	d807      	bhi.n	8008df4 <_printf_i+0x28>
 8008de4:	2f62      	cmp	r7, #98	; 0x62
 8008de6:	d80a      	bhi.n	8008dfe <_printf_i+0x32>
 8008de8:	2f00      	cmp	r7, #0
 8008dea:	f000 80d4 	beq.w	8008f96 <_printf_i+0x1ca>
 8008dee:	2f58      	cmp	r7, #88	; 0x58
 8008df0:	f000 80c0 	beq.w	8008f74 <_printf_i+0x1a8>
 8008df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dfc:	e03a      	b.n	8008e74 <_printf_i+0xa8>
 8008dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e02:	2b15      	cmp	r3, #21
 8008e04:	d8f6      	bhi.n	8008df4 <_printf_i+0x28>
 8008e06:	a101      	add	r1, pc, #4	; (adr r1, 8008e0c <_printf_i+0x40>)
 8008e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	08008e79 	.word	0x08008e79
 8008e14:	08008df5 	.word	0x08008df5
 8008e18:	08008df5 	.word	0x08008df5
 8008e1c:	08008df5 	.word	0x08008df5
 8008e20:	08008df5 	.word	0x08008df5
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008df5 	.word	0x08008df5
 8008e2c:	08008df5 	.word	0x08008df5
 8008e30:	08008df5 	.word	0x08008df5
 8008e34:	08008df5 	.word	0x08008df5
 8008e38:	08008f7d 	.word	0x08008f7d
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008f37 	.word	0x08008f37
 8008e44:	08008df5 	.word	0x08008df5
 8008e48:	08008df5 	.word	0x08008df5
 8008e4c:	08008f9f 	.word	0x08008f9f
 8008e50:	08008df5 	.word	0x08008df5
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008df5 	.word	0x08008df5
 8008e5c:	08008df5 	.word	0x08008df5
 8008e60:	08008f3f 	.word	0x08008f3f
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	602a      	str	r2, [r5, #0]
 8008e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e74:	2301      	movs	r3, #1
 8008e76:	e09f      	b.n	8008fb8 <_printf_i+0x1ec>
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	0607      	lsls	r7, r0, #24
 8008e7e:	f103 0104 	add.w	r1, r3, #4
 8008e82:	6029      	str	r1, [r5, #0]
 8008e84:	d501      	bpl.n	8008e8a <_printf_i+0xbe>
 8008e86:	681e      	ldr	r6, [r3, #0]
 8008e88:	e003      	b.n	8008e92 <_printf_i+0xc6>
 8008e8a:	0646      	lsls	r6, r0, #25
 8008e8c:	d5fb      	bpl.n	8008e86 <_printf_i+0xba>
 8008e8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	da03      	bge.n	8008e9e <_printf_i+0xd2>
 8008e96:	232d      	movs	r3, #45	; 0x2d
 8008e98:	4276      	negs	r6, r6
 8008e9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9e:	485a      	ldr	r0, [pc, #360]	; (8009008 <_printf_i+0x23c>)
 8008ea0:	230a      	movs	r3, #10
 8008ea2:	e012      	b.n	8008eca <_printf_i+0xfe>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	6820      	ldr	r0, [r4, #0]
 8008ea8:	1d19      	adds	r1, r3, #4
 8008eaa:	6029      	str	r1, [r5, #0]
 8008eac:	0605      	lsls	r5, r0, #24
 8008eae:	d501      	bpl.n	8008eb4 <_printf_i+0xe8>
 8008eb0:	681e      	ldr	r6, [r3, #0]
 8008eb2:	e002      	b.n	8008eba <_printf_i+0xee>
 8008eb4:	0641      	lsls	r1, r0, #25
 8008eb6:	d5fb      	bpl.n	8008eb0 <_printf_i+0xe4>
 8008eb8:	881e      	ldrh	r6, [r3, #0]
 8008eba:	4853      	ldr	r0, [pc, #332]	; (8009008 <_printf_i+0x23c>)
 8008ebc:	2f6f      	cmp	r7, #111	; 0x6f
 8008ebe:	bf0c      	ite	eq
 8008ec0:	2308      	moveq	r3, #8
 8008ec2:	230a      	movne	r3, #10
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008eca:	6865      	ldr	r5, [r4, #4]
 8008ecc:	60a5      	str	r5, [r4, #8]
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	bfa2      	ittt	ge
 8008ed2:	6821      	ldrge	r1, [r4, #0]
 8008ed4:	f021 0104 	bicge.w	r1, r1, #4
 8008ed8:	6021      	strge	r1, [r4, #0]
 8008eda:	b90e      	cbnz	r6, 8008ee0 <_printf_i+0x114>
 8008edc:	2d00      	cmp	r5, #0
 8008ede:	d04b      	beq.n	8008f78 <_printf_i+0x1ac>
 8008ee0:	4615      	mov	r5, r2
 8008ee2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ee6:	fb03 6711 	mls	r7, r3, r1, r6
 8008eea:	5dc7      	ldrb	r7, [r0, r7]
 8008eec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef0:	4637      	mov	r7, r6
 8008ef2:	42bb      	cmp	r3, r7
 8008ef4:	460e      	mov	r6, r1
 8008ef6:	d9f4      	bls.n	8008ee2 <_printf_i+0x116>
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d10b      	bne.n	8008f14 <_printf_i+0x148>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	07de      	lsls	r6, r3, #31
 8008f00:	d508      	bpl.n	8008f14 <_printf_i+0x148>
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	6861      	ldr	r1, [r4, #4]
 8008f06:	4299      	cmp	r1, r3
 8008f08:	bfde      	ittt	le
 8008f0a:	2330      	movle	r3, #48	; 0x30
 8008f0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f14:	1b52      	subs	r2, r2, r5
 8008f16:	6122      	str	r2, [r4, #16]
 8008f18:	f8cd a000 	str.w	sl, [sp]
 8008f1c:	464b      	mov	r3, r9
 8008f1e:	aa03      	add	r2, sp, #12
 8008f20:	4621      	mov	r1, r4
 8008f22:	4640      	mov	r0, r8
 8008f24:	f7ff fee4 	bl	8008cf0 <_printf_common>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d14a      	bne.n	8008fc2 <_printf_i+0x1f6>
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	b004      	add	sp, #16
 8008f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	f043 0320 	orr.w	r3, r3, #32
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	4833      	ldr	r0, [pc, #204]	; (800900c <_printf_i+0x240>)
 8008f40:	2778      	movs	r7, #120	; 0x78
 8008f42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	6829      	ldr	r1, [r5, #0]
 8008f4a:	061f      	lsls	r7, r3, #24
 8008f4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f50:	d402      	bmi.n	8008f58 <_printf_i+0x18c>
 8008f52:	065f      	lsls	r7, r3, #25
 8008f54:	bf48      	it	mi
 8008f56:	b2b6      	uxthmi	r6, r6
 8008f58:	07df      	lsls	r7, r3, #31
 8008f5a:	bf48      	it	mi
 8008f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8008f60:	6029      	str	r1, [r5, #0]
 8008f62:	bf48      	it	mi
 8008f64:	6023      	strmi	r3, [r4, #0]
 8008f66:	b91e      	cbnz	r6, 8008f70 <_printf_i+0x1a4>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	f023 0320 	bic.w	r3, r3, #32
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	2310      	movs	r3, #16
 8008f72:	e7a7      	b.n	8008ec4 <_printf_i+0xf8>
 8008f74:	4824      	ldr	r0, [pc, #144]	; (8009008 <_printf_i+0x23c>)
 8008f76:	e7e4      	b.n	8008f42 <_printf_i+0x176>
 8008f78:	4615      	mov	r5, r2
 8008f7a:	e7bd      	b.n	8008ef8 <_printf_i+0x12c>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	6826      	ldr	r6, [r4, #0]
 8008f80:	6961      	ldr	r1, [r4, #20]
 8008f82:	1d18      	adds	r0, r3, #4
 8008f84:	6028      	str	r0, [r5, #0]
 8008f86:	0635      	lsls	r5, r6, #24
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	d501      	bpl.n	8008f90 <_printf_i+0x1c4>
 8008f8c:	6019      	str	r1, [r3, #0]
 8008f8e:	e002      	b.n	8008f96 <_printf_i+0x1ca>
 8008f90:	0670      	lsls	r0, r6, #25
 8008f92:	d5fb      	bpl.n	8008f8c <_printf_i+0x1c0>
 8008f94:	8019      	strh	r1, [r3, #0]
 8008f96:	2300      	movs	r3, #0
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	4615      	mov	r5, r2
 8008f9c:	e7bc      	b.n	8008f18 <_printf_i+0x14c>
 8008f9e:	682b      	ldr	r3, [r5, #0]
 8008fa0:	1d1a      	adds	r2, r3, #4
 8008fa2:	602a      	str	r2, [r5, #0]
 8008fa4:	681d      	ldr	r5, [r3, #0]
 8008fa6:	6862      	ldr	r2, [r4, #4]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4628      	mov	r0, r5
 8008fac:	f7f7 f970 	bl	8000290 <memchr>
 8008fb0:	b108      	cbz	r0, 8008fb6 <_printf_i+0x1ea>
 8008fb2:	1b40      	subs	r0, r0, r5
 8008fb4:	6060      	str	r0, [r4, #4]
 8008fb6:	6863      	ldr	r3, [r4, #4]
 8008fb8:	6123      	str	r3, [r4, #16]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc0:	e7aa      	b.n	8008f18 <_printf_i+0x14c>
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4640      	mov	r0, r8
 8008fca:	47d0      	blx	sl
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d0ad      	beq.n	8008f2c <_printf_i+0x160>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	079b      	lsls	r3, r3, #30
 8008fd4:	d413      	bmi.n	8008ffe <_printf_i+0x232>
 8008fd6:	68e0      	ldr	r0, [r4, #12]
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	4298      	cmp	r0, r3
 8008fdc:	bfb8      	it	lt
 8008fde:	4618      	movlt	r0, r3
 8008fe0:	e7a6      	b.n	8008f30 <_printf_i+0x164>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	4640      	mov	r0, r8
 8008fea:	47d0      	blx	sl
 8008fec:	3001      	adds	r0, #1
 8008fee:	d09d      	beq.n	8008f2c <_printf_i+0x160>
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	68e3      	ldr	r3, [r4, #12]
 8008ff4:	9903      	ldr	r1, [sp, #12]
 8008ff6:	1a5b      	subs	r3, r3, r1
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	dcf2      	bgt.n	8008fe2 <_printf_i+0x216>
 8008ffc:	e7eb      	b.n	8008fd6 <_printf_i+0x20a>
 8008ffe:	2500      	movs	r5, #0
 8009000:	f104 0619 	add.w	r6, r4, #25
 8009004:	e7f5      	b.n	8008ff2 <_printf_i+0x226>
 8009006:	bf00      	nop
 8009008:	0801f7f1 	.word	0x0801f7f1
 800900c:	0801f802 	.word	0x0801f802

08009010 <std>:
 8009010:	2300      	movs	r3, #0
 8009012:	b510      	push	{r4, lr}
 8009014:	4604      	mov	r4, r0
 8009016:	e9c0 3300 	strd	r3, r3, [r0]
 800901a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800901e:	6083      	str	r3, [r0, #8]
 8009020:	8181      	strh	r1, [r0, #12]
 8009022:	6643      	str	r3, [r0, #100]	; 0x64
 8009024:	81c2      	strh	r2, [r0, #14]
 8009026:	6183      	str	r3, [r0, #24]
 8009028:	4619      	mov	r1, r3
 800902a:	2208      	movs	r2, #8
 800902c:	305c      	adds	r0, #92	; 0x5c
 800902e:	f000 f8f4 	bl	800921a <memset>
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <std+0x38>)
 8009034:	6263      	str	r3, [r4, #36]	; 0x24
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x3c>)
 8009038:	62a3      	str	r3, [r4, #40]	; 0x28
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <std+0x40>)
 800903c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <std+0x44>)
 8009040:	6224      	str	r4, [r4, #32]
 8009042:	6323      	str	r3, [r4, #48]	; 0x30
 8009044:	bd10      	pop	{r4, pc}
 8009046:	bf00      	nop
 8009048:	08009195 	.word	0x08009195
 800904c:	080091b7 	.word	0x080091b7
 8009050:	080091ef 	.word	0x080091ef
 8009054:	08009213 	.word	0x08009213

08009058 <stdio_exit_handler>:
 8009058:	4a02      	ldr	r2, [pc, #8]	; (8009064 <stdio_exit_handler+0xc>)
 800905a:	4903      	ldr	r1, [pc, #12]	; (8009068 <stdio_exit_handler+0x10>)
 800905c:	4803      	ldr	r0, [pc, #12]	; (800906c <stdio_exit_handler+0x14>)
 800905e:	f000 b869 	b.w	8009134 <_fwalk_sglue>
 8009062:	bf00      	nop
 8009064:	20000010 	.word	0x20000010
 8009068:	0800acd9 	.word	0x0800acd9
 800906c:	2000001c 	.word	0x2000001c

08009070 <cleanup_stdio>:
 8009070:	6841      	ldr	r1, [r0, #4]
 8009072:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <cleanup_stdio+0x34>)
 8009074:	4299      	cmp	r1, r3
 8009076:	b510      	push	{r4, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	d001      	beq.n	8009080 <cleanup_stdio+0x10>
 800907c:	f001 fe2c 	bl	800acd8 <_fflush_r>
 8009080:	68a1      	ldr	r1, [r4, #8]
 8009082:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <cleanup_stdio+0x38>)
 8009084:	4299      	cmp	r1, r3
 8009086:	d002      	beq.n	800908e <cleanup_stdio+0x1e>
 8009088:	4620      	mov	r0, r4
 800908a:	f001 fe25 	bl	800acd8 <_fflush_r>
 800908e:	68e1      	ldr	r1, [r4, #12]
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <cleanup_stdio+0x3c>)
 8009092:	4299      	cmp	r1, r3
 8009094:	d004      	beq.n	80090a0 <cleanup_stdio+0x30>
 8009096:	4620      	mov	r0, r4
 8009098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800909c:	f001 be1c 	b.w	800acd8 <_fflush_r>
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	bf00      	nop
 80090a4:	20003684 	.word	0x20003684
 80090a8:	200036ec 	.word	0x200036ec
 80090ac:	20003754 	.word	0x20003754

080090b0 <global_stdio_init.part.0>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <global_stdio_init.part.0+0x30>)
 80090b4:	4c0b      	ldr	r4, [pc, #44]	; (80090e4 <global_stdio_init.part.0+0x34>)
 80090b6:	4a0c      	ldr	r2, [pc, #48]	; (80090e8 <global_stdio_init.part.0+0x38>)
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	4620      	mov	r0, r4
 80090bc:	2200      	movs	r2, #0
 80090be:	2104      	movs	r1, #4
 80090c0:	f7ff ffa6 	bl	8009010 <std>
 80090c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090c8:	2201      	movs	r2, #1
 80090ca:	2109      	movs	r1, #9
 80090cc:	f7ff ffa0 	bl	8009010 <std>
 80090d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090d4:	2202      	movs	r2, #2
 80090d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090da:	2112      	movs	r1, #18
 80090dc:	f7ff bf98 	b.w	8009010 <std>
 80090e0:	200037bc 	.word	0x200037bc
 80090e4:	20003684 	.word	0x20003684
 80090e8:	08009059 	.word	0x08009059

080090ec <__sfp_lock_acquire>:
 80090ec:	4801      	ldr	r0, [pc, #4]	; (80090f4 <__sfp_lock_acquire+0x8>)
 80090ee:	f000 b911 	b.w	8009314 <__retarget_lock_acquire_recursive>
 80090f2:	bf00      	nop
 80090f4:	200037c5 	.word	0x200037c5

080090f8 <__sfp_lock_release>:
 80090f8:	4801      	ldr	r0, [pc, #4]	; (8009100 <__sfp_lock_release+0x8>)
 80090fa:	f000 b90c 	b.w	8009316 <__retarget_lock_release_recursive>
 80090fe:	bf00      	nop
 8009100:	200037c5 	.word	0x200037c5

08009104 <__sinit>:
 8009104:	b510      	push	{r4, lr}
 8009106:	4604      	mov	r4, r0
 8009108:	f7ff fff0 	bl	80090ec <__sfp_lock_acquire>
 800910c:	6a23      	ldr	r3, [r4, #32]
 800910e:	b11b      	cbz	r3, 8009118 <__sinit+0x14>
 8009110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009114:	f7ff bff0 	b.w	80090f8 <__sfp_lock_release>
 8009118:	4b04      	ldr	r3, [pc, #16]	; (800912c <__sinit+0x28>)
 800911a:	6223      	str	r3, [r4, #32]
 800911c:	4b04      	ldr	r3, [pc, #16]	; (8009130 <__sinit+0x2c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f5      	bne.n	8009110 <__sinit+0xc>
 8009124:	f7ff ffc4 	bl	80090b0 <global_stdio_init.part.0>
 8009128:	e7f2      	b.n	8009110 <__sinit+0xc>
 800912a:	bf00      	nop
 800912c:	08009071 	.word	0x08009071
 8009130:	200037bc 	.word	0x200037bc

08009134 <_fwalk_sglue>:
 8009134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009138:	4607      	mov	r7, r0
 800913a:	4688      	mov	r8, r1
 800913c:	4614      	mov	r4, r2
 800913e:	2600      	movs	r6, #0
 8009140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009144:	f1b9 0901 	subs.w	r9, r9, #1
 8009148:	d505      	bpl.n	8009156 <_fwalk_sglue+0x22>
 800914a:	6824      	ldr	r4, [r4, #0]
 800914c:	2c00      	cmp	r4, #0
 800914e:	d1f7      	bne.n	8009140 <_fwalk_sglue+0xc>
 8009150:	4630      	mov	r0, r6
 8009152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d907      	bls.n	800916c <_fwalk_sglue+0x38>
 800915c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009160:	3301      	adds	r3, #1
 8009162:	d003      	beq.n	800916c <_fwalk_sglue+0x38>
 8009164:	4629      	mov	r1, r5
 8009166:	4638      	mov	r0, r7
 8009168:	47c0      	blx	r8
 800916a:	4306      	orrs	r6, r0
 800916c:	3568      	adds	r5, #104	; 0x68
 800916e:	e7e9      	b.n	8009144 <_fwalk_sglue+0x10>

08009170 <iprintf>:
 8009170:	b40f      	push	{r0, r1, r2, r3}
 8009172:	b507      	push	{r0, r1, r2, lr}
 8009174:	4906      	ldr	r1, [pc, #24]	; (8009190 <iprintf+0x20>)
 8009176:	ab04      	add	r3, sp, #16
 8009178:	6808      	ldr	r0, [r1, #0]
 800917a:	f853 2b04 	ldr.w	r2, [r3], #4
 800917e:	6881      	ldr	r1, [r0, #8]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	f001 fc09 	bl	800a998 <_vfiprintf_r>
 8009186:	b003      	add	sp, #12
 8009188:	f85d eb04 	ldr.w	lr, [sp], #4
 800918c:	b004      	add	sp, #16
 800918e:	4770      	bx	lr
 8009190:	20000068 	.word	0x20000068

08009194 <__sread>:
 8009194:	b510      	push	{r4, lr}
 8009196:	460c      	mov	r4, r1
 8009198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919c:	f000 f86c 	bl	8009278 <_read_r>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	bfab      	itete	ge
 80091a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091a6:	89a3      	ldrhlt	r3, [r4, #12]
 80091a8:	181b      	addge	r3, r3, r0
 80091aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091ae:	bfac      	ite	ge
 80091b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80091b2:	81a3      	strhlt	r3, [r4, #12]
 80091b4:	bd10      	pop	{r4, pc}

080091b6 <__swrite>:
 80091b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ba:	461f      	mov	r7, r3
 80091bc:	898b      	ldrh	r3, [r1, #12]
 80091be:	05db      	lsls	r3, r3, #23
 80091c0:	4605      	mov	r5, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	4616      	mov	r6, r2
 80091c6:	d505      	bpl.n	80091d4 <__swrite+0x1e>
 80091c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091cc:	2302      	movs	r3, #2
 80091ce:	2200      	movs	r2, #0
 80091d0:	f000 f840 	bl	8009254 <_lseek_r>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	4632      	mov	r2, r6
 80091e2:	463b      	mov	r3, r7
 80091e4:	4628      	mov	r0, r5
 80091e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ea:	f000 b857 	b.w	800929c <_write_r>

080091ee <__sseek>:
 80091ee:	b510      	push	{r4, lr}
 80091f0:	460c      	mov	r4, r1
 80091f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f6:	f000 f82d 	bl	8009254 <_lseek_r>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	bf15      	itete	ne
 8009200:	6560      	strne	r0, [r4, #84]	; 0x54
 8009202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800920a:	81a3      	strheq	r3, [r4, #12]
 800920c:	bf18      	it	ne
 800920e:	81a3      	strhne	r3, [r4, #12]
 8009210:	bd10      	pop	{r4, pc}

08009212 <__sclose>:
 8009212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009216:	f000 b80d 	b.w	8009234 <_close_r>

0800921a <memset>:
 800921a:	4402      	add	r2, r0
 800921c:	4603      	mov	r3, r0
 800921e:	4293      	cmp	r3, r2
 8009220:	d100      	bne.n	8009224 <memset+0xa>
 8009222:	4770      	bx	lr
 8009224:	f803 1b01 	strb.w	r1, [r3], #1
 8009228:	e7f9      	b.n	800921e <memset+0x4>
	...

0800922c <_localeconv_r>:
 800922c:	4800      	ldr	r0, [pc, #0]	; (8009230 <_localeconv_r+0x4>)
 800922e:	4770      	bx	lr
 8009230:	2000015c 	.word	0x2000015c

08009234 <_close_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_close_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f8 fb2f 	bl	80018a2 <_close>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_close_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_close_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	200037c0 	.word	0x200037c0

08009254 <_lseek_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	; (8009274 <_lseek_r+0x20>)
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	2200      	movs	r2, #0
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7f8 fb44 	bl	80018f0 <_lseek>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_lseek_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_lseek_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	200037c0 	.word	0x200037c0

08009278 <_read_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d07      	ldr	r5, [pc, #28]	; (8009298 <_read_r+0x20>)
 800927c:	4604      	mov	r4, r0
 800927e:	4608      	mov	r0, r1
 8009280:	4611      	mov	r1, r2
 8009282:	2200      	movs	r2, #0
 8009284:	602a      	str	r2, [r5, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f7f8 fad2 	bl	8001830 <_read>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_read_r+0x1e>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_read_r+0x1e>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	200037c0 	.word	0x200037c0

0800929c <_write_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d07      	ldr	r5, [pc, #28]	; (80092bc <_write_r+0x20>)
 80092a0:	4604      	mov	r4, r0
 80092a2:	4608      	mov	r0, r1
 80092a4:	4611      	mov	r1, r2
 80092a6:	2200      	movs	r2, #0
 80092a8:	602a      	str	r2, [r5, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f7f8 fadd 	bl	800186a <_write>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_write_r+0x1e>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_write_r+0x1e>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	200037c0 	.word	0x200037c0

080092c0 <__errno>:
 80092c0:	4b01      	ldr	r3, [pc, #4]	; (80092c8 <__errno+0x8>)
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20000068 	.word	0x20000068

080092cc <__libc_init_array>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4d0d      	ldr	r5, [pc, #52]	; (8009304 <__libc_init_array+0x38>)
 80092d0:	4c0d      	ldr	r4, [pc, #52]	; (8009308 <__libc_init_array+0x3c>)
 80092d2:	1b64      	subs	r4, r4, r5
 80092d4:	10a4      	asrs	r4, r4, #2
 80092d6:	2600      	movs	r6, #0
 80092d8:	42a6      	cmp	r6, r4
 80092da:	d109      	bne.n	80092f0 <__libc_init_array+0x24>
 80092dc:	4d0b      	ldr	r5, [pc, #44]	; (800930c <__libc_init_array+0x40>)
 80092de:	4c0c      	ldr	r4, [pc, #48]	; (8009310 <__libc_init_array+0x44>)
 80092e0:	f002 ff52 	bl	800c188 <_init>
 80092e4:	1b64      	subs	r4, r4, r5
 80092e6:	10a4      	asrs	r4, r4, #2
 80092e8:	2600      	movs	r6, #0
 80092ea:	42a6      	cmp	r6, r4
 80092ec:	d105      	bne.n	80092fa <__libc_init_array+0x2e>
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f4:	4798      	blx	r3
 80092f6:	3601      	adds	r6, #1
 80092f8:	e7ee      	b.n	80092d8 <__libc_init_array+0xc>
 80092fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fe:	4798      	blx	r3
 8009300:	3601      	adds	r6, #1
 8009302:	e7f2      	b.n	80092ea <__libc_init_array+0x1e>
 8009304:	0801fd18 	.word	0x0801fd18
 8009308:	0801fd18 	.word	0x0801fd18
 800930c:	0801fd18 	.word	0x0801fd18
 8009310:	0801fd1c 	.word	0x0801fd1c

08009314 <__retarget_lock_acquire_recursive>:
 8009314:	4770      	bx	lr

08009316 <__retarget_lock_release_recursive>:
 8009316:	4770      	bx	lr

08009318 <__assert_func>:
 8009318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800931a:	4614      	mov	r4, r2
 800931c:	461a      	mov	r2, r3
 800931e:	4b09      	ldr	r3, [pc, #36]	; (8009344 <__assert_func+0x2c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4605      	mov	r5, r0
 8009324:	68d8      	ldr	r0, [r3, #12]
 8009326:	b14c      	cbz	r4, 800933c <__assert_func+0x24>
 8009328:	4b07      	ldr	r3, [pc, #28]	; (8009348 <__assert_func+0x30>)
 800932a:	9100      	str	r1, [sp, #0]
 800932c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009330:	4906      	ldr	r1, [pc, #24]	; (800934c <__assert_func+0x34>)
 8009332:	462b      	mov	r3, r5
 8009334:	f001 fcf8 	bl	800ad28 <fiprintf>
 8009338:	f001 fdbc 	bl	800aeb4 <abort>
 800933c:	4b04      	ldr	r3, [pc, #16]	; (8009350 <__assert_func+0x38>)
 800933e:	461c      	mov	r4, r3
 8009340:	e7f3      	b.n	800932a <__assert_func+0x12>
 8009342:	bf00      	nop
 8009344:	20000068 	.word	0x20000068
 8009348:	0801f813 	.word	0x0801f813
 800934c:	0801f820 	.word	0x0801f820
 8009350:	0801f84e 	.word	0x0801f84e

08009354 <quorem>:
 8009354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	6903      	ldr	r3, [r0, #16]
 800935a:	690c      	ldr	r4, [r1, #16]
 800935c:	42a3      	cmp	r3, r4
 800935e:	4607      	mov	r7, r0
 8009360:	db7e      	blt.n	8009460 <quorem+0x10c>
 8009362:	3c01      	subs	r4, #1
 8009364:	f101 0814 	add.w	r8, r1, #20
 8009368:	f100 0514 	add.w	r5, r0, #20
 800936c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800937a:	3301      	adds	r3, #1
 800937c:	429a      	cmp	r2, r3
 800937e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009382:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009386:	fbb2 f6f3 	udiv	r6, r2, r3
 800938a:	d331      	bcc.n	80093f0 <quorem+0x9c>
 800938c:	f04f 0e00 	mov.w	lr, #0
 8009390:	4640      	mov	r0, r8
 8009392:	46ac      	mov	ip, r5
 8009394:	46f2      	mov	sl, lr
 8009396:	f850 2b04 	ldr.w	r2, [r0], #4
 800939a:	b293      	uxth	r3, r2
 800939c:	fb06 e303 	mla	r3, r6, r3, lr
 80093a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093a4:	0c1a      	lsrs	r2, r3, #16
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	ebaa 0303 	sub.w	r3, sl, r3
 80093ac:	f8dc a000 	ldr.w	sl, [ip]
 80093b0:	fa13 f38a 	uxtah	r3, r3, sl
 80093b4:	fb06 220e 	mla	r2, r6, lr, r2
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	9b00      	ldr	r3, [sp, #0]
 80093bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093c0:	b292      	uxth	r2, r2
 80093c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80093ce:	4581      	cmp	r9, r0
 80093d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d4:	f84c 3b04 	str.w	r3, [ip], #4
 80093d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093dc:	d2db      	bcs.n	8009396 <quorem+0x42>
 80093de:	f855 300b 	ldr.w	r3, [r5, fp]
 80093e2:	b92b      	cbnz	r3, 80093f0 <quorem+0x9c>
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	3b04      	subs	r3, #4
 80093e8:	429d      	cmp	r5, r3
 80093ea:	461a      	mov	r2, r3
 80093ec:	d32c      	bcc.n	8009448 <quorem+0xf4>
 80093ee:	613c      	str	r4, [r7, #16]
 80093f0:	4638      	mov	r0, r7
 80093f2:	f001 f9a7 	bl	800a744 <__mcmp>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	db22      	blt.n	8009440 <quorem+0xec>
 80093fa:	3601      	adds	r6, #1
 80093fc:	4629      	mov	r1, r5
 80093fe:	2000      	movs	r0, #0
 8009400:	f858 2b04 	ldr.w	r2, [r8], #4
 8009404:	f8d1 c000 	ldr.w	ip, [r1]
 8009408:	b293      	uxth	r3, r2
 800940a:	1ac3      	subs	r3, r0, r3
 800940c:	0c12      	lsrs	r2, r2, #16
 800940e:	fa13 f38c 	uxtah	r3, r3, ip
 8009412:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009416:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800941a:	b29b      	uxth	r3, r3
 800941c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009420:	45c1      	cmp	r9, r8
 8009422:	f841 3b04 	str.w	r3, [r1], #4
 8009426:	ea4f 4022 	mov.w	r0, r2, asr #16
 800942a:	d2e9      	bcs.n	8009400 <quorem+0xac>
 800942c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009430:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009434:	b922      	cbnz	r2, 8009440 <quorem+0xec>
 8009436:	3b04      	subs	r3, #4
 8009438:	429d      	cmp	r5, r3
 800943a:	461a      	mov	r2, r3
 800943c:	d30a      	bcc.n	8009454 <quorem+0x100>
 800943e:	613c      	str	r4, [r7, #16]
 8009440:	4630      	mov	r0, r6
 8009442:	b003      	add	sp, #12
 8009444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	3b04      	subs	r3, #4
 800944c:	2a00      	cmp	r2, #0
 800944e:	d1ce      	bne.n	80093ee <quorem+0x9a>
 8009450:	3c01      	subs	r4, #1
 8009452:	e7c9      	b.n	80093e8 <quorem+0x94>
 8009454:	6812      	ldr	r2, [r2, #0]
 8009456:	3b04      	subs	r3, #4
 8009458:	2a00      	cmp	r2, #0
 800945a:	d1f0      	bne.n	800943e <quorem+0xea>
 800945c:	3c01      	subs	r4, #1
 800945e:	e7eb      	b.n	8009438 <quorem+0xe4>
 8009460:	2000      	movs	r0, #0
 8009462:	e7ee      	b.n	8009442 <quorem+0xee>
 8009464:	0000      	movs	r0, r0
	...

08009468 <_dtoa_r>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	ed2d 8b04 	vpush	{d8-d9}
 8009470:	69c5      	ldr	r5, [r0, #28]
 8009472:	b093      	sub	sp, #76	; 0x4c
 8009474:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009478:	ec57 6b10 	vmov	r6, r7, d0
 800947c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009480:	9107      	str	r1, [sp, #28]
 8009482:	4604      	mov	r4, r0
 8009484:	920a      	str	r2, [sp, #40]	; 0x28
 8009486:	930d      	str	r3, [sp, #52]	; 0x34
 8009488:	b975      	cbnz	r5, 80094a8 <_dtoa_r+0x40>
 800948a:	2010      	movs	r0, #16
 800948c:	f000 fe2a 	bl	800a0e4 <malloc>
 8009490:	4602      	mov	r2, r0
 8009492:	61e0      	str	r0, [r4, #28]
 8009494:	b920      	cbnz	r0, 80094a0 <_dtoa_r+0x38>
 8009496:	4bae      	ldr	r3, [pc, #696]	; (8009750 <_dtoa_r+0x2e8>)
 8009498:	21ef      	movs	r1, #239	; 0xef
 800949a:	48ae      	ldr	r0, [pc, #696]	; (8009754 <_dtoa_r+0x2ec>)
 800949c:	f7ff ff3c 	bl	8009318 <__assert_func>
 80094a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094a4:	6005      	str	r5, [r0, #0]
 80094a6:	60c5      	str	r5, [r0, #12]
 80094a8:	69e3      	ldr	r3, [r4, #28]
 80094aa:	6819      	ldr	r1, [r3, #0]
 80094ac:	b151      	cbz	r1, 80094c4 <_dtoa_r+0x5c>
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	604a      	str	r2, [r1, #4]
 80094b2:	2301      	movs	r3, #1
 80094b4:	4093      	lsls	r3, r2
 80094b6:	608b      	str	r3, [r1, #8]
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 ff07 	bl	800a2cc <_Bfree>
 80094be:	69e3      	ldr	r3, [r4, #28]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	1e3b      	subs	r3, r7, #0
 80094c6:	bfbb      	ittet	lt
 80094c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094cc:	9303      	strlt	r3, [sp, #12]
 80094ce:	2300      	movge	r3, #0
 80094d0:	2201      	movlt	r2, #1
 80094d2:	bfac      	ite	ge
 80094d4:	f8c8 3000 	strge.w	r3, [r8]
 80094d8:	f8c8 2000 	strlt.w	r2, [r8]
 80094dc:	4b9e      	ldr	r3, [pc, #632]	; (8009758 <_dtoa_r+0x2f0>)
 80094de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80094e2:	ea33 0308 	bics.w	r3, r3, r8
 80094e6:	d11b      	bne.n	8009520 <_dtoa_r+0xb8>
 80094e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80094f4:	4333      	orrs	r3, r6
 80094f6:	f000 8593 	beq.w	800a020 <_dtoa_r+0xbb8>
 80094fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094fc:	b963      	cbnz	r3, 8009518 <_dtoa_r+0xb0>
 80094fe:	4b97      	ldr	r3, [pc, #604]	; (800975c <_dtoa_r+0x2f4>)
 8009500:	e027      	b.n	8009552 <_dtoa_r+0xea>
 8009502:	4b97      	ldr	r3, [pc, #604]	; (8009760 <_dtoa_r+0x2f8>)
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	9800      	ldr	r0, [sp, #0]
 800950e:	b013      	add	sp, #76	; 0x4c
 8009510:	ecbd 8b04 	vpop	{d8-d9}
 8009514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009518:	4b90      	ldr	r3, [pc, #576]	; (800975c <_dtoa_r+0x2f4>)
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	3303      	adds	r3, #3
 800951e:	e7f3      	b.n	8009508 <_dtoa_r+0xa0>
 8009520:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009524:	2200      	movs	r2, #0
 8009526:	ec51 0b17 	vmov	r0, r1, d7
 800952a:	eeb0 8a47 	vmov.f32	s16, s14
 800952e:	eef0 8a67 	vmov.f32	s17, s15
 8009532:	2300      	movs	r3, #0
 8009534:	f7f7 fb28 	bl	8000b88 <__aeabi_dcmpeq>
 8009538:	4681      	mov	r9, r0
 800953a:	b160      	cbz	r0, 8009556 <_dtoa_r+0xee>
 800953c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800953e:	2301      	movs	r3, #1
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8568 	beq.w	800a01a <_dtoa_r+0xbb2>
 800954a:	4b86      	ldr	r3, [pc, #536]	; (8009764 <_dtoa_r+0x2fc>)
 800954c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	3b01      	subs	r3, #1
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	e7da      	b.n	800950c <_dtoa_r+0xa4>
 8009556:	aa10      	add	r2, sp, #64	; 0x40
 8009558:	a911      	add	r1, sp, #68	; 0x44
 800955a:	4620      	mov	r0, r4
 800955c:	eeb0 0a48 	vmov.f32	s0, s16
 8009560:	eef0 0a68 	vmov.f32	s1, s17
 8009564:	f001 f994 	bl	800a890 <__d2b>
 8009568:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800956c:	4682      	mov	sl, r0
 800956e:	2d00      	cmp	r5, #0
 8009570:	d07f      	beq.n	8009672 <_dtoa_r+0x20a>
 8009572:	ee18 3a90 	vmov	r3, s17
 8009576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800957a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800957e:	ec51 0b18 	vmov	r0, r1, d8
 8009582:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009586:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800958a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800958e:	4619      	mov	r1, r3
 8009590:	2200      	movs	r2, #0
 8009592:	4b75      	ldr	r3, [pc, #468]	; (8009768 <_dtoa_r+0x300>)
 8009594:	f7f6 fed8 	bl	8000348 <__aeabi_dsub>
 8009598:	a367      	add	r3, pc, #412	; (adr r3, 8009738 <_dtoa_r+0x2d0>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f7f7 f88b 	bl	80006b8 <__aeabi_dmul>
 80095a2:	a367      	add	r3, pc, #412	; (adr r3, 8009740 <_dtoa_r+0x2d8>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f6 fed0 	bl	800034c <__adddf3>
 80095ac:	4606      	mov	r6, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	460f      	mov	r7, r1
 80095b2:	f7f7 f817 	bl	80005e4 <__aeabi_i2d>
 80095b6:	a364      	add	r3, pc, #400	; (adr r3, 8009748 <_dtoa_r+0x2e0>)
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	f7f7 f87c 	bl	80006b8 <__aeabi_dmul>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4630      	mov	r0, r6
 80095c6:	4639      	mov	r1, r7
 80095c8:	f7f6 fec0 	bl	800034c <__adddf3>
 80095cc:	4606      	mov	r6, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	f7f7 fb22 	bl	8000c18 <__aeabi_d2iz>
 80095d4:	2200      	movs	r2, #0
 80095d6:	4683      	mov	fp, r0
 80095d8:	2300      	movs	r3, #0
 80095da:	4630      	mov	r0, r6
 80095dc:	4639      	mov	r1, r7
 80095de:	f7f7 fadd 	bl	8000b9c <__aeabi_dcmplt>
 80095e2:	b148      	cbz	r0, 80095f8 <_dtoa_r+0x190>
 80095e4:	4658      	mov	r0, fp
 80095e6:	f7f6 fffd 	bl	80005e4 <__aeabi_i2d>
 80095ea:	4632      	mov	r2, r6
 80095ec:	463b      	mov	r3, r7
 80095ee:	f7f7 facb 	bl	8000b88 <__aeabi_dcmpeq>
 80095f2:	b908      	cbnz	r0, 80095f8 <_dtoa_r+0x190>
 80095f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095f8:	f1bb 0f16 	cmp.w	fp, #22
 80095fc:	d857      	bhi.n	80096ae <_dtoa_r+0x246>
 80095fe:	4b5b      	ldr	r3, [pc, #364]	; (800976c <_dtoa_r+0x304>)
 8009600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	ec51 0b18 	vmov	r0, r1, d8
 800960c:	f7f7 fac6 	bl	8000b9c <__aeabi_dcmplt>
 8009610:	2800      	cmp	r0, #0
 8009612:	d04e      	beq.n	80096b2 <_dtoa_r+0x24a>
 8009614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009618:	2300      	movs	r3, #0
 800961a:	930c      	str	r3, [sp, #48]	; 0x30
 800961c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800961e:	1b5b      	subs	r3, r3, r5
 8009620:	1e5a      	subs	r2, r3, #1
 8009622:	bf45      	ittet	mi
 8009624:	f1c3 0301 	rsbmi	r3, r3, #1
 8009628:	9305      	strmi	r3, [sp, #20]
 800962a:	2300      	movpl	r3, #0
 800962c:	2300      	movmi	r3, #0
 800962e:	9206      	str	r2, [sp, #24]
 8009630:	bf54      	ite	pl
 8009632:	9305      	strpl	r3, [sp, #20]
 8009634:	9306      	strmi	r3, [sp, #24]
 8009636:	f1bb 0f00 	cmp.w	fp, #0
 800963a:	db3c      	blt.n	80096b6 <_dtoa_r+0x24e>
 800963c:	9b06      	ldr	r3, [sp, #24]
 800963e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009642:	445b      	add	r3, fp
 8009644:	9306      	str	r3, [sp, #24]
 8009646:	2300      	movs	r3, #0
 8009648:	9308      	str	r3, [sp, #32]
 800964a:	9b07      	ldr	r3, [sp, #28]
 800964c:	2b09      	cmp	r3, #9
 800964e:	d868      	bhi.n	8009722 <_dtoa_r+0x2ba>
 8009650:	2b05      	cmp	r3, #5
 8009652:	bfc4      	itt	gt
 8009654:	3b04      	subgt	r3, #4
 8009656:	9307      	strgt	r3, [sp, #28]
 8009658:	9b07      	ldr	r3, [sp, #28]
 800965a:	f1a3 0302 	sub.w	r3, r3, #2
 800965e:	bfcc      	ite	gt
 8009660:	2500      	movgt	r5, #0
 8009662:	2501      	movle	r5, #1
 8009664:	2b03      	cmp	r3, #3
 8009666:	f200 8085 	bhi.w	8009774 <_dtoa_r+0x30c>
 800966a:	e8df f003 	tbb	[pc, r3]
 800966e:	3b2e      	.short	0x3b2e
 8009670:	5839      	.short	0x5839
 8009672:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009676:	441d      	add	r5, r3
 8009678:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800967c:	2b20      	cmp	r3, #32
 800967e:	bfc1      	itttt	gt
 8009680:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009684:	fa08 f803 	lslgt.w	r8, r8, r3
 8009688:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800968c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009690:	bfd6      	itet	le
 8009692:	f1c3 0320 	rsble	r3, r3, #32
 8009696:	ea48 0003 	orrgt.w	r0, r8, r3
 800969a:	fa06 f003 	lslle.w	r0, r6, r3
 800969e:	f7f6 ff91 	bl	80005c4 <__aeabi_ui2d>
 80096a2:	2201      	movs	r2, #1
 80096a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80096a8:	3d01      	subs	r5, #1
 80096aa:	920e      	str	r2, [sp, #56]	; 0x38
 80096ac:	e76f      	b.n	800958e <_dtoa_r+0x126>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e7b3      	b.n	800961a <_dtoa_r+0x1b2>
 80096b2:	900c      	str	r0, [sp, #48]	; 0x30
 80096b4:	e7b2      	b.n	800961c <_dtoa_r+0x1b4>
 80096b6:	9b05      	ldr	r3, [sp, #20]
 80096b8:	eba3 030b 	sub.w	r3, r3, fp
 80096bc:	9305      	str	r3, [sp, #20]
 80096be:	f1cb 0300 	rsb	r3, fp, #0
 80096c2:	9308      	str	r3, [sp, #32]
 80096c4:	2300      	movs	r3, #0
 80096c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80096c8:	e7bf      	b.n	800964a <_dtoa_r+0x1e2>
 80096ca:	2300      	movs	r3, #0
 80096cc:	9309      	str	r3, [sp, #36]	; 0x24
 80096ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dc52      	bgt.n	800977a <_dtoa_r+0x312>
 80096d4:	2301      	movs	r3, #1
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	461a      	mov	r2, r3
 80096dc:	920a      	str	r2, [sp, #40]	; 0x28
 80096de:	e00b      	b.n	80096f8 <_dtoa_r+0x290>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e7f3      	b.n	80096cc <_dtoa_r+0x264>
 80096e4:	2300      	movs	r3, #0
 80096e6:	9309      	str	r3, [sp, #36]	; 0x24
 80096e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ea:	445b      	add	r3, fp
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	3301      	adds	r3, #1
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	9304      	str	r3, [sp, #16]
 80096f4:	bfb8      	it	lt
 80096f6:	2301      	movlt	r3, #1
 80096f8:	69e0      	ldr	r0, [r4, #28]
 80096fa:	2100      	movs	r1, #0
 80096fc:	2204      	movs	r2, #4
 80096fe:	f102 0614 	add.w	r6, r2, #20
 8009702:	429e      	cmp	r6, r3
 8009704:	d93d      	bls.n	8009782 <_dtoa_r+0x31a>
 8009706:	6041      	str	r1, [r0, #4]
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fd9f 	bl	800a24c <_Balloc>
 800970e:	9000      	str	r0, [sp, #0]
 8009710:	2800      	cmp	r0, #0
 8009712:	d139      	bne.n	8009788 <_dtoa_r+0x320>
 8009714:	4b16      	ldr	r3, [pc, #88]	; (8009770 <_dtoa_r+0x308>)
 8009716:	4602      	mov	r2, r0
 8009718:	f240 11af 	movw	r1, #431	; 0x1af
 800971c:	e6bd      	b.n	800949a <_dtoa_r+0x32>
 800971e:	2301      	movs	r3, #1
 8009720:	e7e1      	b.n	80096e6 <_dtoa_r+0x27e>
 8009722:	2501      	movs	r5, #1
 8009724:	2300      	movs	r3, #0
 8009726:	9307      	str	r3, [sp, #28]
 8009728:	9509      	str	r5, [sp, #36]	; 0x24
 800972a:	f04f 33ff 	mov.w	r3, #4294967295
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	9304      	str	r3, [sp, #16]
 8009732:	2200      	movs	r2, #0
 8009734:	2312      	movs	r3, #18
 8009736:	e7d1      	b.n	80096dc <_dtoa_r+0x274>
 8009738:	636f4361 	.word	0x636f4361
 800973c:	3fd287a7 	.word	0x3fd287a7
 8009740:	8b60c8b3 	.word	0x8b60c8b3
 8009744:	3fc68a28 	.word	0x3fc68a28
 8009748:	509f79fb 	.word	0x509f79fb
 800974c:	3fd34413 	.word	0x3fd34413
 8009750:	0801f770 	.word	0x0801f770
 8009754:	0801f85c 	.word	0x0801f85c
 8009758:	7ff00000 	.word	0x7ff00000
 800975c:	0801f858 	.word	0x0801f858
 8009760:	0801f84f 	.word	0x0801f84f
 8009764:	0801f7f0 	.word	0x0801f7f0
 8009768:	3ff80000 	.word	0x3ff80000
 800976c:	0801f948 	.word	0x0801f948
 8009770:	0801f8b4 	.word	0x0801f8b4
 8009774:	2301      	movs	r3, #1
 8009776:	9309      	str	r3, [sp, #36]	; 0x24
 8009778:	e7d7      	b.n	800972a <_dtoa_r+0x2c2>
 800977a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	e7ba      	b.n	80096f8 <_dtoa_r+0x290>
 8009782:	3101      	adds	r1, #1
 8009784:	0052      	lsls	r2, r2, #1
 8009786:	e7ba      	b.n	80096fe <_dtoa_r+0x296>
 8009788:	69e3      	ldr	r3, [r4, #28]
 800978a:	9a00      	ldr	r2, [sp, #0]
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	2b0e      	cmp	r3, #14
 8009792:	f200 80a8 	bhi.w	80098e6 <_dtoa_r+0x47e>
 8009796:	2d00      	cmp	r5, #0
 8009798:	f000 80a5 	beq.w	80098e6 <_dtoa_r+0x47e>
 800979c:	f1bb 0f00 	cmp.w	fp, #0
 80097a0:	dd38      	ble.n	8009814 <_dtoa_r+0x3ac>
 80097a2:	4bc0      	ldr	r3, [pc, #768]	; (8009aa4 <_dtoa_r+0x63c>)
 80097a4:	f00b 020f 	and.w	r2, fp, #15
 80097a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80097b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80097b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80097b8:	d019      	beq.n	80097ee <_dtoa_r+0x386>
 80097ba:	4bbb      	ldr	r3, [pc, #748]	; (8009aa8 <_dtoa_r+0x640>)
 80097bc:	ec51 0b18 	vmov	r0, r1, d8
 80097c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097c4:	f7f7 f8a2 	bl	800090c <__aeabi_ddiv>
 80097c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097cc:	f008 080f 	and.w	r8, r8, #15
 80097d0:	2503      	movs	r5, #3
 80097d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009aa8 <_dtoa_r+0x640>
 80097d6:	f1b8 0f00 	cmp.w	r8, #0
 80097da:	d10a      	bne.n	80097f2 <_dtoa_r+0x38a>
 80097dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e0:	4632      	mov	r2, r6
 80097e2:	463b      	mov	r3, r7
 80097e4:	f7f7 f892 	bl	800090c <__aeabi_ddiv>
 80097e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ec:	e02b      	b.n	8009846 <_dtoa_r+0x3de>
 80097ee:	2502      	movs	r5, #2
 80097f0:	e7ef      	b.n	80097d2 <_dtoa_r+0x36a>
 80097f2:	f018 0f01 	tst.w	r8, #1
 80097f6:	d008      	beq.n	800980a <_dtoa_r+0x3a2>
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009800:	f7f6 ff5a 	bl	80006b8 <__aeabi_dmul>
 8009804:	3501      	adds	r5, #1
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800980e:	f109 0908 	add.w	r9, r9, #8
 8009812:	e7e0      	b.n	80097d6 <_dtoa_r+0x36e>
 8009814:	f000 809f 	beq.w	8009956 <_dtoa_r+0x4ee>
 8009818:	f1cb 0600 	rsb	r6, fp, #0
 800981c:	4ba1      	ldr	r3, [pc, #644]	; (8009aa4 <_dtoa_r+0x63c>)
 800981e:	4fa2      	ldr	r7, [pc, #648]	; (8009aa8 <_dtoa_r+0x640>)
 8009820:	f006 020f 	and.w	r2, r6, #15
 8009824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	ec51 0b18 	vmov	r0, r1, d8
 8009830:	f7f6 ff42 	bl	80006b8 <__aeabi_dmul>
 8009834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009838:	1136      	asrs	r6, r6, #4
 800983a:	2300      	movs	r3, #0
 800983c:	2502      	movs	r5, #2
 800983e:	2e00      	cmp	r6, #0
 8009840:	d17e      	bne.n	8009940 <_dtoa_r+0x4d8>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1d0      	bne.n	80097e8 <_dtoa_r+0x380>
 8009846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009848:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 8084 	beq.w	800995a <_dtoa_r+0x4f2>
 8009852:	4b96      	ldr	r3, [pc, #600]	; (8009aac <_dtoa_r+0x644>)
 8009854:	2200      	movs	r2, #0
 8009856:	4640      	mov	r0, r8
 8009858:	4649      	mov	r1, r9
 800985a:	f7f7 f99f 	bl	8000b9c <__aeabi_dcmplt>
 800985e:	2800      	cmp	r0, #0
 8009860:	d07b      	beq.n	800995a <_dtoa_r+0x4f2>
 8009862:	9b04      	ldr	r3, [sp, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d078      	beq.n	800995a <_dtoa_r+0x4f2>
 8009868:	9b01      	ldr	r3, [sp, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	dd39      	ble.n	80098e2 <_dtoa_r+0x47a>
 800986e:	4b90      	ldr	r3, [pc, #576]	; (8009ab0 <_dtoa_r+0x648>)
 8009870:	2200      	movs	r2, #0
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f6 ff1f 	bl	80006b8 <__aeabi_dmul>
 800987a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800987e:	9e01      	ldr	r6, [sp, #4]
 8009880:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009884:	3501      	adds	r5, #1
 8009886:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800988a:	4628      	mov	r0, r5
 800988c:	f7f6 feaa 	bl	80005e4 <__aeabi_i2d>
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	f7f6 ff10 	bl	80006b8 <__aeabi_dmul>
 8009898:	4b86      	ldr	r3, [pc, #536]	; (8009ab4 <_dtoa_r+0x64c>)
 800989a:	2200      	movs	r2, #0
 800989c:	f7f6 fd56 	bl	800034c <__adddf3>
 80098a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80098a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	d158      	bne.n	8009960 <_dtoa_r+0x4f8>
 80098ae:	4b82      	ldr	r3, [pc, #520]	; (8009ab8 <_dtoa_r+0x650>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f6 fd47 	bl	8000348 <__aeabi_dsub>
 80098ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098be:	4680      	mov	r8, r0
 80098c0:	4689      	mov	r9, r1
 80098c2:	f7f7 f989 	bl	8000bd8 <__aeabi_dcmpgt>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f040 8296 	bne.w	8009df8 <_dtoa_r+0x990>
 80098cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80098d0:	4640      	mov	r0, r8
 80098d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f7 f960 	bl	8000b9c <__aeabi_dcmplt>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f040 8289 	bne.w	8009df4 <_dtoa_r+0x98c>
 80098e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80098e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f2c0 814e 	blt.w	8009b8a <_dtoa_r+0x722>
 80098ee:	f1bb 0f0e 	cmp.w	fp, #14
 80098f2:	f300 814a 	bgt.w	8009b8a <_dtoa_r+0x722>
 80098f6:	4b6b      	ldr	r3, [pc, #428]	; (8009aa4 <_dtoa_r+0x63c>)
 80098f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009902:	2b00      	cmp	r3, #0
 8009904:	f280 80dc 	bge.w	8009ac0 <_dtoa_r+0x658>
 8009908:	9b04      	ldr	r3, [sp, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f300 80d8 	bgt.w	8009ac0 <_dtoa_r+0x658>
 8009910:	f040 826f 	bne.w	8009df2 <_dtoa_r+0x98a>
 8009914:	4b68      	ldr	r3, [pc, #416]	; (8009ab8 <_dtoa_r+0x650>)
 8009916:	2200      	movs	r2, #0
 8009918:	4640      	mov	r0, r8
 800991a:	4649      	mov	r1, r9
 800991c:	f7f6 fecc 	bl	80006b8 <__aeabi_dmul>
 8009920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009924:	f7f7 f94e 	bl	8000bc4 <__aeabi_dcmpge>
 8009928:	9e04      	ldr	r6, [sp, #16]
 800992a:	4637      	mov	r7, r6
 800992c:	2800      	cmp	r0, #0
 800992e:	f040 8245 	bne.w	8009dbc <_dtoa_r+0x954>
 8009932:	9d00      	ldr	r5, [sp, #0]
 8009934:	2331      	movs	r3, #49	; 0x31
 8009936:	f805 3b01 	strb.w	r3, [r5], #1
 800993a:	f10b 0b01 	add.w	fp, fp, #1
 800993e:	e241      	b.n	8009dc4 <_dtoa_r+0x95c>
 8009940:	07f2      	lsls	r2, r6, #31
 8009942:	d505      	bpl.n	8009950 <_dtoa_r+0x4e8>
 8009944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009948:	f7f6 feb6 	bl	80006b8 <__aeabi_dmul>
 800994c:	3501      	adds	r5, #1
 800994e:	2301      	movs	r3, #1
 8009950:	1076      	asrs	r6, r6, #1
 8009952:	3708      	adds	r7, #8
 8009954:	e773      	b.n	800983e <_dtoa_r+0x3d6>
 8009956:	2502      	movs	r5, #2
 8009958:	e775      	b.n	8009846 <_dtoa_r+0x3de>
 800995a:	9e04      	ldr	r6, [sp, #16]
 800995c:	465f      	mov	r7, fp
 800995e:	e792      	b.n	8009886 <_dtoa_r+0x41e>
 8009960:	9900      	ldr	r1, [sp, #0]
 8009962:	4b50      	ldr	r3, [pc, #320]	; (8009aa4 <_dtoa_r+0x63c>)
 8009964:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009968:	4431      	add	r1, r6
 800996a:	9102      	str	r1, [sp, #8]
 800996c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800996e:	eeb0 9a47 	vmov.f32	s18, s14
 8009972:	eef0 9a67 	vmov.f32	s19, s15
 8009976:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800997a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800997e:	2900      	cmp	r1, #0
 8009980:	d044      	beq.n	8009a0c <_dtoa_r+0x5a4>
 8009982:	494e      	ldr	r1, [pc, #312]	; (8009abc <_dtoa_r+0x654>)
 8009984:	2000      	movs	r0, #0
 8009986:	f7f6 ffc1 	bl	800090c <__aeabi_ddiv>
 800998a:	ec53 2b19 	vmov	r2, r3, d9
 800998e:	f7f6 fcdb 	bl	8000348 <__aeabi_dsub>
 8009992:	9d00      	ldr	r5, [sp, #0]
 8009994:	ec41 0b19 	vmov	d9, r0, r1
 8009998:	4649      	mov	r1, r9
 800999a:	4640      	mov	r0, r8
 800999c:	f7f7 f93c 	bl	8000c18 <__aeabi_d2iz>
 80099a0:	4606      	mov	r6, r0
 80099a2:	f7f6 fe1f 	bl	80005e4 <__aeabi_i2d>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	f7f6 fccb 	bl	8000348 <__aeabi_dsub>
 80099b2:	3630      	adds	r6, #48	; 0x30
 80099b4:	f805 6b01 	strb.w	r6, [r5], #1
 80099b8:	ec53 2b19 	vmov	r2, r3, d9
 80099bc:	4680      	mov	r8, r0
 80099be:	4689      	mov	r9, r1
 80099c0:	f7f7 f8ec 	bl	8000b9c <__aeabi_dcmplt>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d164      	bne.n	8009a92 <_dtoa_r+0x62a>
 80099c8:	4642      	mov	r2, r8
 80099ca:	464b      	mov	r3, r9
 80099cc:	4937      	ldr	r1, [pc, #220]	; (8009aac <_dtoa_r+0x644>)
 80099ce:	2000      	movs	r0, #0
 80099d0:	f7f6 fcba 	bl	8000348 <__aeabi_dsub>
 80099d4:	ec53 2b19 	vmov	r2, r3, d9
 80099d8:	f7f7 f8e0 	bl	8000b9c <__aeabi_dcmplt>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f040 80b6 	bne.w	8009b4e <_dtoa_r+0x6e6>
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	429d      	cmp	r5, r3
 80099e6:	f43f af7c 	beq.w	80098e2 <_dtoa_r+0x47a>
 80099ea:	4b31      	ldr	r3, [pc, #196]	; (8009ab0 <_dtoa_r+0x648>)
 80099ec:	ec51 0b19 	vmov	r0, r1, d9
 80099f0:	2200      	movs	r2, #0
 80099f2:	f7f6 fe61 	bl	80006b8 <__aeabi_dmul>
 80099f6:	4b2e      	ldr	r3, [pc, #184]	; (8009ab0 <_dtoa_r+0x648>)
 80099f8:	ec41 0b19 	vmov	d9, r0, r1
 80099fc:	2200      	movs	r2, #0
 80099fe:	4640      	mov	r0, r8
 8009a00:	4649      	mov	r1, r9
 8009a02:	f7f6 fe59 	bl	80006b8 <__aeabi_dmul>
 8009a06:	4680      	mov	r8, r0
 8009a08:	4689      	mov	r9, r1
 8009a0a:	e7c5      	b.n	8009998 <_dtoa_r+0x530>
 8009a0c:	ec51 0b17 	vmov	r0, r1, d7
 8009a10:	f7f6 fe52 	bl	80006b8 <__aeabi_dmul>
 8009a14:	9b02      	ldr	r3, [sp, #8]
 8009a16:	9d00      	ldr	r5, [sp, #0]
 8009a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a1a:	ec41 0b19 	vmov	d9, r0, r1
 8009a1e:	4649      	mov	r1, r9
 8009a20:	4640      	mov	r0, r8
 8009a22:	f7f7 f8f9 	bl	8000c18 <__aeabi_d2iz>
 8009a26:	4606      	mov	r6, r0
 8009a28:	f7f6 fddc 	bl	80005e4 <__aeabi_i2d>
 8009a2c:	3630      	adds	r6, #48	; 0x30
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7f6 fc87 	bl	8000348 <__aeabi_dsub>
 8009a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a3e:	9b02      	ldr	r3, [sp, #8]
 8009a40:	429d      	cmp	r5, r3
 8009a42:	4680      	mov	r8, r0
 8009a44:	4689      	mov	r9, r1
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	d124      	bne.n	8009a96 <_dtoa_r+0x62e>
 8009a4c:	4b1b      	ldr	r3, [pc, #108]	; (8009abc <_dtoa_r+0x654>)
 8009a4e:	ec51 0b19 	vmov	r0, r1, d9
 8009a52:	f7f6 fc7b 	bl	800034c <__adddf3>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	f7f7 f8bb 	bl	8000bd8 <__aeabi_dcmpgt>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d173      	bne.n	8009b4e <_dtoa_r+0x6e6>
 8009a66:	ec53 2b19 	vmov	r2, r3, d9
 8009a6a:	4914      	ldr	r1, [pc, #80]	; (8009abc <_dtoa_r+0x654>)
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f7f6 fc6b 	bl	8000348 <__aeabi_dsub>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	4640      	mov	r0, r8
 8009a78:	4649      	mov	r1, r9
 8009a7a:	f7f7 f88f 	bl	8000b9c <__aeabi_dcmplt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f af2f 	beq.w	80098e2 <_dtoa_r+0x47a>
 8009a84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a86:	1e6b      	subs	r3, r5, #1
 8009a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a8e:	2b30      	cmp	r3, #48	; 0x30
 8009a90:	d0f8      	beq.n	8009a84 <_dtoa_r+0x61c>
 8009a92:	46bb      	mov	fp, r7
 8009a94:	e04a      	b.n	8009b2c <_dtoa_r+0x6c4>
 8009a96:	4b06      	ldr	r3, [pc, #24]	; (8009ab0 <_dtoa_r+0x648>)
 8009a98:	f7f6 fe0e 	bl	80006b8 <__aeabi_dmul>
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	4689      	mov	r9, r1
 8009aa0:	e7bd      	b.n	8009a1e <_dtoa_r+0x5b6>
 8009aa2:	bf00      	nop
 8009aa4:	0801f948 	.word	0x0801f948
 8009aa8:	0801f920 	.word	0x0801f920
 8009aac:	3ff00000 	.word	0x3ff00000
 8009ab0:	40240000 	.word	0x40240000
 8009ab4:	401c0000 	.word	0x401c0000
 8009ab8:	40140000 	.word	0x40140000
 8009abc:	3fe00000 	.word	0x3fe00000
 8009ac0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ac4:	9d00      	ldr	r5, [sp, #0]
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	464b      	mov	r3, r9
 8009aca:	4630      	mov	r0, r6
 8009acc:	4639      	mov	r1, r7
 8009ace:	f7f6 ff1d 	bl	800090c <__aeabi_ddiv>
 8009ad2:	f7f7 f8a1 	bl	8000c18 <__aeabi_d2iz>
 8009ad6:	9001      	str	r0, [sp, #4]
 8009ad8:	f7f6 fd84 	bl	80005e4 <__aeabi_i2d>
 8009adc:	4642      	mov	r2, r8
 8009ade:	464b      	mov	r3, r9
 8009ae0:	f7f6 fdea 	bl	80006b8 <__aeabi_dmul>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	f7f6 fc2c 	bl	8000348 <__aeabi_dsub>
 8009af0:	9e01      	ldr	r6, [sp, #4]
 8009af2:	9f04      	ldr	r7, [sp, #16]
 8009af4:	3630      	adds	r6, #48	; 0x30
 8009af6:	f805 6b01 	strb.w	r6, [r5], #1
 8009afa:	9e00      	ldr	r6, [sp, #0]
 8009afc:	1bae      	subs	r6, r5, r6
 8009afe:	42b7      	cmp	r7, r6
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	d134      	bne.n	8009b70 <_dtoa_r+0x708>
 8009b06:	f7f6 fc21 	bl	800034c <__adddf3>
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460f      	mov	r7, r1
 8009b12:	f7f7 f861 	bl	8000bd8 <__aeabi_dcmpgt>
 8009b16:	b9c8      	cbnz	r0, 8009b4c <_dtoa_r+0x6e4>
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f7 f832 	bl	8000b88 <__aeabi_dcmpeq>
 8009b24:	b110      	cbz	r0, 8009b2c <_dtoa_r+0x6c4>
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	07db      	lsls	r3, r3, #31
 8009b2a:	d40f      	bmi.n	8009b4c <_dtoa_r+0x6e4>
 8009b2c:	4651      	mov	r1, sl
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 fbcc 	bl	800a2cc <_Bfree>
 8009b34:	2300      	movs	r3, #0
 8009b36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b38:	702b      	strb	r3, [r5, #0]
 8009b3a:	f10b 0301 	add.w	r3, fp, #1
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f43f ace2 	beq.w	800950c <_dtoa_r+0xa4>
 8009b48:	601d      	str	r5, [r3, #0]
 8009b4a:	e4df      	b.n	800950c <_dtoa_r+0xa4>
 8009b4c:	465f      	mov	r7, fp
 8009b4e:	462b      	mov	r3, r5
 8009b50:	461d      	mov	r5, r3
 8009b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b56:	2a39      	cmp	r2, #57	; 0x39
 8009b58:	d106      	bne.n	8009b68 <_dtoa_r+0x700>
 8009b5a:	9a00      	ldr	r2, [sp, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d1f7      	bne.n	8009b50 <_dtoa_r+0x6e8>
 8009b60:	9900      	ldr	r1, [sp, #0]
 8009b62:	2230      	movs	r2, #48	; 0x30
 8009b64:	3701      	adds	r7, #1
 8009b66:	700a      	strb	r2, [r1, #0]
 8009b68:	781a      	ldrb	r2, [r3, #0]
 8009b6a:	3201      	adds	r2, #1
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	e790      	b.n	8009a92 <_dtoa_r+0x62a>
 8009b70:	4ba3      	ldr	r3, [pc, #652]	; (8009e00 <_dtoa_r+0x998>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	f7f6 fda0 	bl	80006b8 <__aeabi_dmul>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	f7f7 f802 	bl	8000b88 <__aeabi_dcmpeq>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d09e      	beq.n	8009ac6 <_dtoa_r+0x65e>
 8009b88:	e7d0      	b.n	8009b2c <_dtoa_r+0x6c4>
 8009b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	f000 80ca 	beq.w	8009d26 <_dtoa_r+0x8be>
 8009b92:	9a07      	ldr	r2, [sp, #28]
 8009b94:	2a01      	cmp	r2, #1
 8009b96:	f300 80ad 	bgt.w	8009cf4 <_dtoa_r+0x88c>
 8009b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b9c:	2a00      	cmp	r2, #0
 8009b9e:	f000 80a5 	beq.w	8009cec <_dtoa_r+0x884>
 8009ba2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ba6:	9e08      	ldr	r6, [sp, #32]
 8009ba8:	9d05      	ldr	r5, [sp, #20]
 8009baa:	9a05      	ldr	r2, [sp, #20]
 8009bac:	441a      	add	r2, r3
 8009bae:	9205      	str	r2, [sp, #20]
 8009bb0:	9a06      	ldr	r2, [sp, #24]
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	441a      	add	r2, r3
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	9206      	str	r2, [sp, #24]
 8009bba:	f000 fc3d 	bl	800a438 <__i2b>
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	b165      	cbz	r5, 8009bdc <_dtoa_r+0x774>
 8009bc2:	9b06      	ldr	r3, [sp, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dd09      	ble.n	8009bdc <_dtoa_r+0x774>
 8009bc8:	42ab      	cmp	r3, r5
 8009bca:	9a05      	ldr	r2, [sp, #20]
 8009bcc:	bfa8      	it	ge
 8009bce:	462b      	movge	r3, r5
 8009bd0:	1ad2      	subs	r2, r2, r3
 8009bd2:	9205      	str	r2, [sp, #20]
 8009bd4:	9a06      	ldr	r2, [sp, #24]
 8009bd6:	1aed      	subs	r5, r5, r3
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	9b08      	ldr	r3, [sp, #32]
 8009bde:	b1f3      	cbz	r3, 8009c1e <_dtoa_r+0x7b6>
 8009be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 80a3 	beq.w	8009d2e <_dtoa_r+0x8c6>
 8009be8:	2e00      	cmp	r6, #0
 8009bea:	dd10      	ble.n	8009c0e <_dtoa_r+0x7a6>
 8009bec:	4639      	mov	r1, r7
 8009bee:	4632      	mov	r2, r6
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fce1 	bl	800a5b8 <__pow5mult>
 8009bf6:	4652      	mov	r2, sl
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 fc31 	bl	800a464 <__multiply>
 8009c02:	4651      	mov	r1, sl
 8009c04:	4680      	mov	r8, r0
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 fb60 	bl	800a2cc <_Bfree>
 8009c0c:	46c2      	mov	sl, r8
 8009c0e:	9b08      	ldr	r3, [sp, #32]
 8009c10:	1b9a      	subs	r2, r3, r6
 8009c12:	d004      	beq.n	8009c1e <_dtoa_r+0x7b6>
 8009c14:	4651      	mov	r1, sl
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 fcce 	bl	800a5b8 <__pow5mult>
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	2101      	movs	r1, #1
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 fc09 	bl	800a438 <__i2b>
 8009c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	f340 8081 	ble.w	8009d32 <_dtoa_r+0x8ca>
 8009c30:	461a      	mov	r2, r3
 8009c32:	4601      	mov	r1, r0
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 fcbf 	bl	800a5b8 <__pow5mult>
 8009c3a:	9b07      	ldr	r3, [sp, #28]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	4606      	mov	r6, r0
 8009c40:	dd7a      	ble.n	8009d38 <_dtoa_r+0x8d0>
 8009c42:	f04f 0800 	mov.w	r8, #0
 8009c46:	6933      	ldr	r3, [r6, #16]
 8009c48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c4c:	6918      	ldr	r0, [r3, #16]
 8009c4e:	f000 fba5 	bl	800a39c <__hi0bits>
 8009c52:	f1c0 0020 	rsb	r0, r0, #32
 8009c56:	9b06      	ldr	r3, [sp, #24]
 8009c58:	4418      	add	r0, r3
 8009c5a:	f010 001f 	ands.w	r0, r0, #31
 8009c5e:	f000 8094 	beq.w	8009d8a <_dtoa_r+0x922>
 8009c62:	f1c0 0320 	rsb	r3, r0, #32
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	f340 8085 	ble.w	8009d76 <_dtoa_r+0x90e>
 8009c6c:	9b05      	ldr	r3, [sp, #20]
 8009c6e:	f1c0 001c 	rsb	r0, r0, #28
 8009c72:	4403      	add	r3, r0
 8009c74:	9305      	str	r3, [sp, #20]
 8009c76:	9b06      	ldr	r3, [sp, #24]
 8009c78:	4403      	add	r3, r0
 8009c7a:	4405      	add	r5, r0
 8009c7c:	9306      	str	r3, [sp, #24]
 8009c7e:	9b05      	ldr	r3, [sp, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	dd05      	ble.n	8009c90 <_dtoa_r+0x828>
 8009c84:	4651      	mov	r1, sl
 8009c86:	461a      	mov	r2, r3
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 fcef 	bl	800a66c <__lshift>
 8009c8e:	4682      	mov	sl, r0
 8009c90:	9b06      	ldr	r3, [sp, #24]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dd05      	ble.n	8009ca2 <_dtoa_r+0x83a>
 8009c96:	4631      	mov	r1, r6
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fce6 	bl	800a66c <__lshift>
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d072      	beq.n	8009d8e <_dtoa_r+0x926>
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4650      	mov	r0, sl
 8009cac:	f000 fd4a 	bl	800a744 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	da6c      	bge.n	8009d8e <_dtoa_r+0x926>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4651      	mov	r1, sl
 8009cb8:	220a      	movs	r2, #10
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fb28 	bl	800a310 <__multadd>
 8009cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cc6:	4682      	mov	sl, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 81b0 	beq.w	800a02e <_dtoa_r+0xbc6>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	220a      	movs	r2, #10
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 fb1b 	bl	800a310 <__multadd>
 8009cda:	9b01      	ldr	r3, [sp, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	4607      	mov	r7, r0
 8009ce0:	f300 8096 	bgt.w	8009e10 <_dtoa_r+0x9a8>
 8009ce4:	9b07      	ldr	r3, [sp, #28]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	dc59      	bgt.n	8009d9e <_dtoa_r+0x936>
 8009cea:	e091      	b.n	8009e10 <_dtoa_r+0x9a8>
 8009cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cf2:	e758      	b.n	8009ba6 <_dtoa_r+0x73e>
 8009cf4:	9b04      	ldr	r3, [sp, #16]
 8009cf6:	1e5e      	subs	r6, r3, #1
 8009cf8:	9b08      	ldr	r3, [sp, #32]
 8009cfa:	42b3      	cmp	r3, r6
 8009cfc:	bfbf      	itttt	lt
 8009cfe:	9b08      	ldrlt	r3, [sp, #32]
 8009d00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009d02:	9608      	strlt	r6, [sp, #32]
 8009d04:	1af3      	sublt	r3, r6, r3
 8009d06:	bfb4      	ite	lt
 8009d08:	18d2      	addlt	r2, r2, r3
 8009d0a:	1b9e      	subge	r6, r3, r6
 8009d0c:	9b04      	ldr	r3, [sp, #16]
 8009d0e:	bfbc      	itt	lt
 8009d10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009d12:	2600      	movlt	r6, #0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	bfb7      	itett	lt
 8009d18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009d1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009d20:	1a9d      	sublt	r5, r3, r2
 8009d22:	2300      	movlt	r3, #0
 8009d24:	e741      	b.n	8009baa <_dtoa_r+0x742>
 8009d26:	9e08      	ldr	r6, [sp, #32]
 8009d28:	9d05      	ldr	r5, [sp, #20]
 8009d2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d2c:	e748      	b.n	8009bc0 <_dtoa_r+0x758>
 8009d2e:	9a08      	ldr	r2, [sp, #32]
 8009d30:	e770      	b.n	8009c14 <_dtoa_r+0x7ac>
 8009d32:	9b07      	ldr	r3, [sp, #28]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	dc19      	bgt.n	8009d6c <_dtoa_r+0x904>
 8009d38:	9b02      	ldr	r3, [sp, #8]
 8009d3a:	b9bb      	cbnz	r3, 8009d6c <_dtoa_r+0x904>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d42:	b99b      	cbnz	r3, 8009d6c <_dtoa_r+0x904>
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d4a:	0d1b      	lsrs	r3, r3, #20
 8009d4c:	051b      	lsls	r3, r3, #20
 8009d4e:	b183      	cbz	r3, 8009d72 <_dtoa_r+0x90a>
 8009d50:	9b05      	ldr	r3, [sp, #20]
 8009d52:	3301      	adds	r3, #1
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	9b06      	ldr	r3, [sp, #24]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	9306      	str	r3, [sp, #24]
 8009d5c:	f04f 0801 	mov.w	r8, #1
 8009d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f47f af6f 	bne.w	8009c46 <_dtoa_r+0x7de>
 8009d68:	2001      	movs	r0, #1
 8009d6a:	e774      	b.n	8009c56 <_dtoa_r+0x7ee>
 8009d6c:	f04f 0800 	mov.w	r8, #0
 8009d70:	e7f6      	b.n	8009d60 <_dtoa_r+0x8f8>
 8009d72:	4698      	mov	r8, r3
 8009d74:	e7f4      	b.n	8009d60 <_dtoa_r+0x8f8>
 8009d76:	d082      	beq.n	8009c7e <_dtoa_r+0x816>
 8009d78:	9a05      	ldr	r2, [sp, #20]
 8009d7a:	331c      	adds	r3, #28
 8009d7c:	441a      	add	r2, r3
 8009d7e:	9205      	str	r2, [sp, #20]
 8009d80:	9a06      	ldr	r2, [sp, #24]
 8009d82:	441a      	add	r2, r3
 8009d84:	441d      	add	r5, r3
 8009d86:	9206      	str	r2, [sp, #24]
 8009d88:	e779      	b.n	8009c7e <_dtoa_r+0x816>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	e7f4      	b.n	8009d78 <_dtoa_r+0x910>
 8009d8e:	9b04      	ldr	r3, [sp, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc37      	bgt.n	8009e04 <_dtoa_r+0x99c>
 8009d94:	9b07      	ldr	r3, [sp, #28]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	dd34      	ble.n	8009e04 <_dtoa_r+0x99c>
 8009d9a:	9b04      	ldr	r3, [sp, #16]
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	b963      	cbnz	r3, 8009dbc <_dtoa_r+0x954>
 8009da2:	4631      	mov	r1, r6
 8009da4:	2205      	movs	r2, #5
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 fab2 	bl	800a310 <__multadd>
 8009dac:	4601      	mov	r1, r0
 8009dae:	4606      	mov	r6, r0
 8009db0:	4650      	mov	r0, sl
 8009db2:	f000 fcc7 	bl	800a744 <__mcmp>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	f73f adbb 	bgt.w	8009932 <_dtoa_r+0x4ca>
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dbe:	9d00      	ldr	r5, [sp, #0]
 8009dc0:	ea6f 0b03 	mvn.w	fp, r3
 8009dc4:	f04f 0800 	mov.w	r8, #0
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f000 fa7e 	bl	800a2cc <_Bfree>
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	f43f aeab 	beq.w	8009b2c <_dtoa_r+0x6c4>
 8009dd6:	f1b8 0f00 	cmp.w	r8, #0
 8009dda:	d005      	beq.n	8009de8 <_dtoa_r+0x980>
 8009ddc:	45b8      	cmp	r8, r7
 8009dde:	d003      	beq.n	8009de8 <_dtoa_r+0x980>
 8009de0:	4641      	mov	r1, r8
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 fa72 	bl	800a2cc <_Bfree>
 8009de8:	4639      	mov	r1, r7
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fa6e 	bl	800a2cc <_Bfree>
 8009df0:	e69c      	b.n	8009b2c <_dtoa_r+0x6c4>
 8009df2:	2600      	movs	r6, #0
 8009df4:	4637      	mov	r7, r6
 8009df6:	e7e1      	b.n	8009dbc <_dtoa_r+0x954>
 8009df8:	46bb      	mov	fp, r7
 8009dfa:	4637      	mov	r7, r6
 8009dfc:	e599      	b.n	8009932 <_dtoa_r+0x4ca>
 8009dfe:	bf00      	nop
 8009e00:	40240000 	.word	0x40240000
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 80c8 	beq.w	8009f9c <_dtoa_r+0xb34>
 8009e0c:	9b04      	ldr	r3, [sp, #16]
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	2d00      	cmp	r5, #0
 8009e12:	dd05      	ble.n	8009e20 <_dtoa_r+0x9b8>
 8009e14:	4639      	mov	r1, r7
 8009e16:	462a      	mov	r2, r5
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f000 fc27 	bl	800a66c <__lshift>
 8009e1e:	4607      	mov	r7, r0
 8009e20:	f1b8 0f00 	cmp.w	r8, #0
 8009e24:	d05b      	beq.n	8009ede <_dtoa_r+0xa76>
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 fa0f 	bl	800a24c <_Balloc>
 8009e2e:	4605      	mov	r5, r0
 8009e30:	b928      	cbnz	r0, 8009e3e <_dtoa_r+0x9d6>
 8009e32:	4b83      	ldr	r3, [pc, #524]	; (800a040 <_dtoa_r+0xbd8>)
 8009e34:	4602      	mov	r2, r0
 8009e36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009e3a:	f7ff bb2e 	b.w	800949a <_dtoa_r+0x32>
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	3202      	adds	r2, #2
 8009e42:	0092      	lsls	r2, r2, #2
 8009e44:	f107 010c 	add.w	r1, r7, #12
 8009e48:	300c      	adds	r0, #12
 8009e4a:	f001 f825 	bl	800ae98 <memcpy>
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4629      	mov	r1, r5
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 fc0a 	bl	800a66c <__lshift>
 8009e58:	9b00      	ldr	r3, [sp, #0]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e62:	4413      	add	r3, r2
 8009e64:	9308      	str	r3, [sp, #32]
 8009e66:	9b02      	ldr	r3, [sp, #8]
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	46b8      	mov	r8, r7
 8009e6e:	9306      	str	r3, [sp, #24]
 8009e70:	4607      	mov	r7, r0
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	4631      	mov	r1, r6
 8009e76:	3b01      	subs	r3, #1
 8009e78:	4650      	mov	r0, sl
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	f7ff fa6a 	bl	8009354 <quorem>
 8009e80:	4641      	mov	r1, r8
 8009e82:	9002      	str	r0, [sp, #8]
 8009e84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e88:	4650      	mov	r0, sl
 8009e8a:	f000 fc5b 	bl	800a744 <__mcmp>
 8009e8e:	463a      	mov	r2, r7
 8009e90:	9005      	str	r0, [sp, #20]
 8009e92:	4631      	mov	r1, r6
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 fc71 	bl	800a77c <__mdiff>
 8009e9a:	68c2      	ldr	r2, [r0, #12]
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	bb02      	cbnz	r2, 8009ee2 <_dtoa_r+0xa7a>
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	f000 fc4e 	bl	800a744 <__mcmp>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	4629      	mov	r1, r5
 8009eac:	4620      	mov	r0, r4
 8009eae:	9209      	str	r2, [sp, #36]	; 0x24
 8009eb0:	f000 fa0c 	bl	800a2cc <_Bfree>
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb8:	9d04      	ldr	r5, [sp, #16]
 8009eba:	ea43 0102 	orr.w	r1, r3, r2
 8009ebe:	9b06      	ldr	r3, [sp, #24]
 8009ec0:	4319      	orrs	r1, r3
 8009ec2:	d110      	bne.n	8009ee6 <_dtoa_r+0xa7e>
 8009ec4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ec8:	d029      	beq.n	8009f1e <_dtoa_r+0xab6>
 8009eca:	9b05      	ldr	r3, [sp, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd02      	ble.n	8009ed6 <_dtoa_r+0xa6e>
 8009ed0:	9b02      	ldr	r3, [sp, #8]
 8009ed2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	f883 9000 	strb.w	r9, [r3]
 8009edc:	e774      	b.n	8009dc8 <_dtoa_r+0x960>
 8009ede:	4638      	mov	r0, r7
 8009ee0:	e7ba      	b.n	8009e58 <_dtoa_r+0x9f0>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	e7e1      	b.n	8009eaa <_dtoa_r+0xa42>
 8009ee6:	9b05      	ldr	r3, [sp, #20]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	db04      	blt.n	8009ef6 <_dtoa_r+0xa8e>
 8009eec:	9907      	ldr	r1, [sp, #28]
 8009eee:	430b      	orrs	r3, r1
 8009ef0:	9906      	ldr	r1, [sp, #24]
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	d120      	bne.n	8009f38 <_dtoa_r+0xad0>
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	dded      	ble.n	8009ed6 <_dtoa_r+0xa6e>
 8009efa:	4651      	mov	r1, sl
 8009efc:	2201      	movs	r2, #1
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fbb4 	bl	800a66c <__lshift>
 8009f04:	4631      	mov	r1, r6
 8009f06:	4682      	mov	sl, r0
 8009f08:	f000 fc1c 	bl	800a744 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	dc03      	bgt.n	8009f18 <_dtoa_r+0xab0>
 8009f10:	d1e1      	bne.n	8009ed6 <_dtoa_r+0xa6e>
 8009f12:	f019 0f01 	tst.w	r9, #1
 8009f16:	d0de      	beq.n	8009ed6 <_dtoa_r+0xa6e>
 8009f18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f1c:	d1d8      	bne.n	8009ed0 <_dtoa_r+0xa68>
 8009f1e:	9a01      	ldr	r2, [sp, #4]
 8009f20:	2339      	movs	r3, #57	; 0x39
 8009f22:	7013      	strb	r3, [r2, #0]
 8009f24:	462b      	mov	r3, r5
 8009f26:	461d      	mov	r5, r3
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f2e:	2a39      	cmp	r2, #57	; 0x39
 8009f30:	d06c      	beq.n	800a00c <_dtoa_r+0xba4>
 8009f32:	3201      	adds	r2, #1
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e747      	b.n	8009dc8 <_dtoa_r+0x960>
 8009f38:	2a00      	cmp	r2, #0
 8009f3a:	dd07      	ble.n	8009f4c <_dtoa_r+0xae4>
 8009f3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f40:	d0ed      	beq.n	8009f1e <_dtoa_r+0xab6>
 8009f42:	9a01      	ldr	r2, [sp, #4]
 8009f44:	f109 0301 	add.w	r3, r9, #1
 8009f48:	7013      	strb	r3, [r2, #0]
 8009f4a:	e73d      	b.n	8009dc8 <_dtoa_r+0x960>
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	9a08      	ldr	r2, [sp, #32]
 8009f50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d043      	beq.n	8009fe0 <_dtoa_r+0xb78>
 8009f58:	4651      	mov	r1, sl
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	220a      	movs	r2, #10
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 f9d6 	bl	800a310 <__multadd>
 8009f64:	45b8      	cmp	r8, r7
 8009f66:	4682      	mov	sl, r0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	f04f 020a 	mov.w	r2, #10
 8009f70:	4641      	mov	r1, r8
 8009f72:	4620      	mov	r0, r4
 8009f74:	d107      	bne.n	8009f86 <_dtoa_r+0xb1e>
 8009f76:	f000 f9cb 	bl	800a310 <__multadd>
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	9b04      	ldr	r3, [sp, #16]
 8009f80:	3301      	adds	r3, #1
 8009f82:	9304      	str	r3, [sp, #16]
 8009f84:	e775      	b.n	8009e72 <_dtoa_r+0xa0a>
 8009f86:	f000 f9c3 	bl	800a310 <__multadd>
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	2300      	movs	r3, #0
 8009f90:	220a      	movs	r2, #10
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 f9bc 	bl	800a310 <__multadd>
 8009f98:	4607      	mov	r7, r0
 8009f9a:	e7f0      	b.n	8009f7e <_dtoa_r+0xb16>
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	9d00      	ldr	r5, [sp, #0]
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4650      	mov	r0, sl
 8009fa6:	f7ff f9d5 	bl	8009354 <quorem>
 8009faa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009fae:	9b00      	ldr	r3, [sp, #0]
 8009fb0:	f805 9b01 	strb.w	r9, [r5], #1
 8009fb4:	1aea      	subs	r2, r5, r3
 8009fb6:	9b01      	ldr	r3, [sp, #4]
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	dd07      	ble.n	8009fcc <_dtoa_r+0xb64>
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 f9a4 	bl	800a310 <__multadd>
 8009fc8:	4682      	mov	sl, r0
 8009fca:	e7ea      	b.n	8009fa2 <_dtoa_r+0xb3a>
 8009fcc:	9b01      	ldr	r3, [sp, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfc8      	it	gt
 8009fd2:	461d      	movgt	r5, r3
 8009fd4:	9b00      	ldr	r3, [sp, #0]
 8009fd6:	bfd8      	it	le
 8009fd8:	2501      	movle	r5, #1
 8009fda:	441d      	add	r5, r3
 8009fdc:	f04f 0800 	mov.w	r8, #0
 8009fe0:	4651      	mov	r1, sl
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 fb41 	bl	800a66c <__lshift>
 8009fea:	4631      	mov	r1, r6
 8009fec:	4682      	mov	sl, r0
 8009fee:	f000 fba9 	bl	800a744 <__mcmp>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	dc96      	bgt.n	8009f24 <_dtoa_r+0xabc>
 8009ff6:	d102      	bne.n	8009ffe <_dtoa_r+0xb96>
 8009ff8:	f019 0f01 	tst.w	r9, #1
 8009ffc:	d192      	bne.n	8009f24 <_dtoa_r+0xabc>
 8009ffe:	462b      	mov	r3, r5
 800a000:	461d      	mov	r5, r3
 800a002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a006:	2a30      	cmp	r2, #48	; 0x30
 800a008:	d0fa      	beq.n	800a000 <_dtoa_r+0xb98>
 800a00a:	e6dd      	b.n	8009dc8 <_dtoa_r+0x960>
 800a00c:	9a00      	ldr	r2, [sp, #0]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d189      	bne.n	8009f26 <_dtoa_r+0xabe>
 800a012:	f10b 0b01 	add.w	fp, fp, #1
 800a016:	2331      	movs	r3, #49	; 0x31
 800a018:	e796      	b.n	8009f48 <_dtoa_r+0xae0>
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <_dtoa_r+0xbdc>)
 800a01c:	f7ff ba99 	b.w	8009552 <_dtoa_r+0xea>
 800a020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a022:	2b00      	cmp	r3, #0
 800a024:	f47f aa6d 	bne.w	8009502 <_dtoa_r+0x9a>
 800a028:	4b07      	ldr	r3, [pc, #28]	; (800a048 <_dtoa_r+0xbe0>)
 800a02a:	f7ff ba92 	b.w	8009552 <_dtoa_r+0xea>
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	dcb5      	bgt.n	8009fa0 <_dtoa_r+0xb38>
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	2b02      	cmp	r3, #2
 800a038:	f73f aeb1 	bgt.w	8009d9e <_dtoa_r+0x936>
 800a03c:	e7b0      	b.n	8009fa0 <_dtoa_r+0xb38>
 800a03e:	bf00      	nop
 800a040:	0801f8b4 	.word	0x0801f8b4
 800a044:	0801f7ef 	.word	0x0801f7ef
 800a048:	0801f84f 	.word	0x0801f84f

0800a04c <_free_r>:
 800a04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a04e:	2900      	cmp	r1, #0
 800a050:	d044      	beq.n	800a0dc <_free_r+0x90>
 800a052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a056:	9001      	str	r0, [sp, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f1a1 0404 	sub.w	r4, r1, #4
 800a05e:	bfb8      	it	lt
 800a060:	18e4      	addlt	r4, r4, r3
 800a062:	f000 f8e7 	bl	800a234 <__malloc_lock>
 800a066:	4a1e      	ldr	r2, [pc, #120]	; (800a0e0 <_free_r+0x94>)
 800a068:	9801      	ldr	r0, [sp, #4]
 800a06a:	6813      	ldr	r3, [r2, #0]
 800a06c:	b933      	cbnz	r3, 800a07c <_free_r+0x30>
 800a06e:	6063      	str	r3, [r4, #4]
 800a070:	6014      	str	r4, [r2, #0]
 800a072:	b003      	add	sp, #12
 800a074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a078:	f000 b8e2 	b.w	800a240 <__malloc_unlock>
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	d908      	bls.n	800a092 <_free_r+0x46>
 800a080:	6825      	ldr	r5, [r4, #0]
 800a082:	1961      	adds	r1, r4, r5
 800a084:	428b      	cmp	r3, r1
 800a086:	bf01      	itttt	eq
 800a088:	6819      	ldreq	r1, [r3, #0]
 800a08a:	685b      	ldreq	r3, [r3, #4]
 800a08c:	1949      	addeq	r1, r1, r5
 800a08e:	6021      	streq	r1, [r4, #0]
 800a090:	e7ed      	b.n	800a06e <_free_r+0x22>
 800a092:	461a      	mov	r2, r3
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	b10b      	cbz	r3, 800a09c <_free_r+0x50>
 800a098:	42a3      	cmp	r3, r4
 800a09a:	d9fa      	bls.n	800a092 <_free_r+0x46>
 800a09c:	6811      	ldr	r1, [r2, #0]
 800a09e:	1855      	adds	r5, r2, r1
 800a0a0:	42a5      	cmp	r5, r4
 800a0a2:	d10b      	bne.n	800a0bc <_free_r+0x70>
 800a0a4:	6824      	ldr	r4, [r4, #0]
 800a0a6:	4421      	add	r1, r4
 800a0a8:	1854      	adds	r4, r2, r1
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	6011      	str	r1, [r2, #0]
 800a0ae:	d1e0      	bne.n	800a072 <_free_r+0x26>
 800a0b0:	681c      	ldr	r4, [r3, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	6053      	str	r3, [r2, #4]
 800a0b6:	440c      	add	r4, r1
 800a0b8:	6014      	str	r4, [r2, #0]
 800a0ba:	e7da      	b.n	800a072 <_free_r+0x26>
 800a0bc:	d902      	bls.n	800a0c4 <_free_r+0x78>
 800a0be:	230c      	movs	r3, #12
 800a0c0:	6003      	str	r3, [r0, #0]
 800a0c2:	e7d6      	b.n	800a072 <_free_r+0x26>
 800a0c4:	6825      	ldr	r5, [r4, #0]
 800a0c6:	1961      	adds	r1, r4, r5
 800a0c8:	428b      	cmp	r3, r1
 800a0ca:	bf04      	itt	eq
 800a0cc:	6819      	ldreq	r1, [r3, #0]
 800a0ce:	685b      	ldreq	r3, [r3, #4]
 800a0d0:	6063      	str	r3, [r4, #4]
 800a0d2:	bf04      	itt	eq
 800a0d4:	1949      	addeq	r1, r1, r5
 800a0d6:	6021      	streq	r1, [r4, #0]
 800a0d8:	6054      	str	r4, [r2, #4]
 800a0da:	e7ca      	b.n	800a072 <_free_r+0x26>
 800a0dc:	b003      	add	sp, #12
 800a0de:	bd30      	pop	{r4, r5, pc}
 800a0e0:	200037c8 	.word	0x200037c8

0800a0e4 <malloc>:
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <malloc+0xc>)
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	f000 b823 	b.w	800a134 <_malloc_r>
 800a0ee:	bf00      	nop
 800a0f0:	20000068 	.word	0x20000068

0800a0f4 <sbrk_aligned>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	4e0e      	ldr	r6, [pc, #56]	; (800a130 <sbrk_aligned+0x3c>)
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6831      	ldr	r1, [r6, #0]
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	b911      	cbnz	r1, 800a106 <sbrk_aligned+0x12>
 800a100:	f000 feba 	bl	800ae78 <_sbrk_r>
 800a104:	6030      	str	r0, [r6, #0]
 800a106:	4621      	mov	r1, r4
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 feb5 	bl	800ae78 <_sbrk_r>
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	d00a      	beq.n	800a128 <sbrk_aligned+0x34>
 800a112:	1cc4      	adds	r4, r0, #3
 800a114:	f024 0403 	bic.w	r4, r4, #3
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d007      	beq.n	800a12c <sbrk_aligned+0x38>
 800a11c:	1a21      	subs	r1, r4, r0
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 feaa 	bl	800ae78 <_sbrk_r>
 800a124:	3001      	adds	r0, #1
 800a126:	d101      	bne.n	800a12c <sbrk_aligned+0x38>
 800a128:	f04f 34ff 	mov.w	r4, #4294967295
 800a12c:	4620      	mov	r0, r4
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	200037cc 	.word	0x200037cc

0800a134 <_malloc_r>:
 800a134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a138:	1ccd      	adds	r5, r1, #3
 800a13a:	f025 0503 	bic.w	r5, r5, #3
 800a13e:	3508      	adds	r5, #8
 800a140:	2d0c      	cmp	r5, #12
 800a142:	bf38      	it	cc
 800a144:	250c      	movcc	r5, #12
 800a146:	2d00      	cmp	r5, #0
 800a148:	4607      	mov	r7, r0
 800a14a:	db01      	blt.n	800a150 <_malloc_r+0x1c>
 800a14c:	42a9      	cmp	r1, r5
 800a14e:	d905      	bls.n	800a15c <_malloc_r+0x28>
 800a150:	230c      	movs	r3, #12
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	2600      	movs	r6, #0
 800a156:	4630      	mov	r0, r6
 800a158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a230 <_malloc_r+0xfc>
 800a160:	f000 f868 	bl	800a234 <__malloc_lock>
 800a164:	f8d8 3000 	ldr.w	r3, [r8]
 800a168:	461c      	mov	r4, r3
 800a16a:	bb5c      	cbnz	r4, 800a1c4 <_malloc_r+0x90>
 800a16c:	4629      	mov	r1, r5
 800a16e:	4638      	mov	r0, r7
 800a170:	f7ff ffc0 	bl	800a0f4 <sbrk_aligned>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	4604      	mov	r4, r0
 800a178:	d155      	bne.n	800a226 <_malloc_r+0xf2>
 800a17a:	f8d8 4000 	ldr.w	r4, [r8]
 800a17e:	4626      	mov	r6, r4
 800a180:	2e00      	cmp	r6, #0
 800a182:	d145      	bne.n	800a210 <_malloc_r+0xdc>
 800a184:	2c00      	cmp	r4, #0
 800a186:	d048      	beq.n	800a21a <_malloc_r+0xe6>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	4631      	mov	r1, r6
 800a18c:	4638      	mov	r0, r7
 800a18e:	eb04 0903 	add.w	r9, r4, r3
 800a192:	f000 fe71 	bl	800ae78 <_sbrk_r>
 800a196:	4581      	cmp	r9, r0
 800a198:	d13f      	bne.n	800a21a <_malloc_r+0xe6>
 800a19a:	6821      	ldr	r1, [r4, #0]
 800a19c:	1a6d      	subs	r5, r5, r1
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f7ff ffa7 	bl	800a0f4 <sbrk_aligned>
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d037      	beq.n	800a21a <_malloc_r+0xe6>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	442b      	add	r3, r5
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d038      	beq.n	800a22a <_malloc_r+0xf6>
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	42a2      	cmp	r2, r4
 800a1bc:	d12b      	bne.n	800a216 <_malloc_r+0xe2>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	605a      	str	r2, [r3, #4]
 800a1c2:	e00f      	b.n	800a1e4 <_malloc_r+0xb0>
 800a1c4:	6822      	ldr	r2, [r4, #0]
 800a1c6:	1b52      	subs	r2, r2, r5
 800a1c8:	d41f      	bmi.n	800a20a <_malloc_r+0xd6>
 800a1ca:	2a0b      	cmp	r2, #11
 800a1cc:	d917      	bls.n	800a1fe <_malloc_r+0xca>
 800a1ce:	1961      	adds	r1, r4, r5
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	6025      	str	r5, [r4, #0]
 800a1d4:	bf18      	it	ne
 800a1d6:	6059      	strne	r1, [r3, #4]
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	bf08      	it	eq
 800a1dc:	f8c8 1000 	streq.w	r1, [r8]
 800a1e0:	5162      	str	r2, [r4, r5]
 800a1e2:	604b      	str	r3, [r1, #4]
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f104 060b 	add.w	r6, r4, #11
 800a1ea:	f000 f829 	bl	800a240 <__malloc_unlock>
 800a1ee:	f026 0607 	bic.w	r6, r6, #7
 800a1f2:	1d23      	adds	r3, r4, #4
 800a1f4:	1af2      	subs	r2, r6, r3
 800a1f6:	d0ae      	beq.n	800a156 <_malloc_r+0x22>
 800a1f8:	1b9b      	subs	r3, r3, r6
 800a1fa:	50a3      	str	r3, [r4, r2]
 800a1fc:	e7ab      	b.n	800a156 <_malloc_r+0x22>
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	6862      	ldr	r2, [r4, #4]
 800a202:	d1dd      	bne.n	800a1c0 <_malloc_r+0x8c>
 800a204:	f8c8 2000 	str.w	r2, [r8]
 800a208:	e7ec      	b.n	800a1e4 <_malloc_r+0xb0>
 800a20a:	4623      	mov	r3, r4
 800a20c:	6864      	ldr	r4, [r4, #4]
 800a20e:	e7ac      	b.n	800a16a <_malloc_r+0x36>
 800a210:	4634      	mov	r4, r6
 800a212:	6876      	ldr	r6, [r6, #4]
 800a214:	e7b4      	b.n	800a180 <_malloc_r+0x4c>
 800a216:	4613      	mov	r3, r2
 800a218:	e7cc      	b.n	800a1b4 <_malloc_r+0x80>
 800a21a:	230c      	movs	r3, #12
 800a21c:	603b      	str	r3, [r7, #0]
 800a21e:	4638      	mov	r0, r7
 800a220:	f000 f80e 	bl	800a240 <__malloc_unlock>
 800a224:	e797      	b.n	800a156 <_malloc_r+0x22>
 800a226:	6025      	str	r5, [r4, #0]
 800a228:	e7dc      	b.n	800a1e4 <_malloc_r+0xb0>
 800a22a:	605b      	str	r3, [r3, #4]
 800a22c:	deff      	udf	#255	; 0xff
 800a22e:	bf00      	nop
 800a230:	200037c8 	.word	0x200037c8

0800a234 <__malloc_lock>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__malloc_lock+0x8>)
 800a236:	f7ff b86d 	b.w	8009314 <__retarget_lock_acquire_recursive>
 800a23a:	bf00      	nop
 800a23c:	200037c4 	.word	0x200037c4

0800a240 <__malloc_unlock>:
 800a240:	4801      	ldr	r0, [pc, #4]	; (800a248 <__malloc_unlock+0x8>)
 800a242:	f7ff b868 	b.w	8009316 <__retarget_lock_release_recursive>
 800a246:	bf00      	nop
 800a248:	200037c4 	.word	0x200037c4

0800a24c <_Balloc>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	69c6      	ldr	r6, [r0, #28]
 800a250:	4604      	mov	r4, r0
 800a252:	460d      	mov	r5, r1
 800a254:	b976      	cbnz	r6, 800a274 <_Balloc+0x28>
 800a256:	2010      	movs	r0, #16
 800a258:	f7ff ff44 	bl	800a0e4 <malloc>
 800a25c:	4602      	mov	r2, r0
 800a25e:	61e0      	str	r0, [r4, #28]
 800a260:	b920      	cbnz	r0, 800a26c <_Balloc+0x20>
 800a262:	4b18      	ldr	r3, [pc, #96]	; (800a2c4 <_Balloc+0x78>)
 800a264:	4818      	ldr	r0, [pc, #96]	; (800a2c8 <_Balloc+0x7c>)
 800a266:	216b      	movs	r1, #107	; 0x6b
 800a268:	f7ff f856 	bl	8009318 <__assert_func>
 800a26c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a270:	6006      	str	r6, [r0, #0]
 800a272:	60c6      	str	r6, [r0, #12]
 800a274:	69e6      	ldr	r6, [r4, #28]
 800a276:	68f3      	ldr	r3, [r6, #12]
 800a278:	b183      	cbz	r3, 800a29c <_Balloc+0x50>
 800a27a:	69e3      	ldr	r3, [r4, #28]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a282:	b9b8      	cbnz	r0, 800a2b4 <_Balloc+0x68>
 800a284:	2101      	movs	r1, #1
 800a286:	fa01 f605 	lsl.w	r6, r1, r5
 800a28a:	1d72      	adds	r2, r6, #5
 800a28c:	0092      	lsls	r2, r2, #2
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 fe17 	bl	800aec2 <_calloc_r>
 800a294:	b160      	cbz	r0, 800a2b0 <_Balloc+0x64>
 800a296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a29a:	e00e      	b.n	800a2ba <_Balloc+0x6e>
 800a29c:	2221      	movs	r2, #33	; 0x21
 800a29e:	2104      	movs	r1, #4
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fe0e 	bl	800aec2 <_calloc_r>
 800a2a6:	69e3      	ldr	r3, [r4, #28]
 800a2a8:	60f0      	str	r0, [r6, #12]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e4      	bne.n	800a27a <_Balloc+0x2e>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	6802      	ldr	r2, [r0, #0]
 800a2b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2c0:	e7f7      	b.n	800a2b2 <_Balloc+0x66>
 800a2c2:	bf00      	nop
 800a2c4:	0801f770 	.word	0x0801f770
 800a2c8:	0801f8c5 	.word	0x0801f8c5

0800a2cc <_Bfree>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	69c6      	ldr	r6, [r0, #28]
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	b976      	cbnz	r6, 800a2f4 <_Bfree+0x28>
 800a2d6:	2010      	movs	r0, #16
 800a2d8:	f7ff ff04 	bl	800a0e4 <malloc>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	61e8      	str	r0, [r5, #28]
 800a2e0:	b920      	cbnz	r0, 800a2ec <_Bfree+0x20>
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <_Bfree+0x3c>)
 800a2e4:	4809      	ldr	r0, [pc, #36]	; (800a30c <_Bfree+0x40>)
 800a2e6:	218f      	movs	r1, #143	; 0x8f
 800a2e8:	f7ff f816 	bl	8009318 <__assert_func>
 800a2ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2f0:	6006      	str	r6, [r0, #0]
 800a2f2:	60c6      	str	r6, [r0, #12]
 800a2f4:	b13c      	cbz	r4, 800a306 <_Bfree+0x3a>
 800a2f6:	69eb      	ldr	r3, [r5, #28]
 800a2f8:	6862      	ldr	r2, [r4, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a300:	6021      	str	r1, [r4, #0]
 800a302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a306:	bd70      	pop	{r4, r5, r6, pc}
 800a308:	0801f770 	.word	0x0801f770
 800a30c:	0801f8c5 	.word	0x0801f8c5

0800a310 <__multadd>:
 800a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a314:	690d      	ldr	r5, [r1, #16]
 800a316:	4607      	mov	r7, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	461e      	mov	r6, r3
 800a31c:	f101 0c14 	add.w	ip, r1, #20
 800a320:	2000      	movs	r0, #0
 800a322:	f8dc 3000 	ldr.w	r3, [ip]
 800a326:	b299      	uxth	r1, r3
 800a328:	fb02 6101 	mla	r1, r2, r1, r6
 800a32c:	0c1e      	lsrs	r6, r3, #16
 800a32e:	0c0b      	lsrs	r3, r1, #16
 800a330:	fb02 3306 	mla	r3, r2, r6, r3
 800a334:	b289      	uxth	r1, r1
 800a336:	3001      	adds	r0, #1
 800a338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a33c:	4285      	cmp	r5, r0
 800a33e:	f84c 1b04 	str.w	r1, [ip], #4
 800a342:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a346:	dcec      	bgt.n	800a322 <__multadd+0x12>
 800a348:	b30e      	cbz	r6, 800a38e <__multadd+0x7e>
 800a34a:	68a3      	ldr	r3, [r4, #8]
 800a34c:	42ab      	cmp	r3, r5
 800a34e:	dc19      	bgt.n	800a384 <__multadd+0x74>
 800a350:	6861      	ldr	r1, [r4, #4]
 800a352:	4638      	mov	r0, r7
 800a354:	3101      	adds	r1, #1
 800a356:	f7ff ff79 	bl	800a24c <_Balloc>
 800a35a:	4680      	mov	r8, r0
 800a35c:	b928      	cbnz	r0, 800a36a <__multadd+0x5a>
 800a35e:	4602      	mov	r2, r0
 800a360:	4b0c      	ldr	r3, [pc, #48]	; (800a394 <__multadd+0x84>)
 800a362:	480d      	ldr	r0, [pc, #52]	; (800a398 <__multadd+0x88>)
 800a364:	21ba      	movs	r1, #186	; 0xba
 800a366:	f7fe ffd7 	bl	8009318 <__assert_func>
 800a36a:	6922      	ldr	r2, [r4, #16]
 800a36c:	3202      	adds	r2, #2
 800a36e:	f104 010c 	add.w	r1, r4, #12
 800a372:	0092      	lsls	r2, r2, #2
 800a374:	300c      	adds	r0, #12
 800a376:	f000 fd8f 	bl	800ae98 <memcpy>
 800a37a:	4621      	mov	r1, r4
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff ffa5 	bl	800a2cc <_Bfree>
 800a382:	4644      	mov	r4, r8
 800a384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a388:	3501      	adds	r5, #1
 800a38a:	615e      	str	r6, [r3, #20]
 800a38c:	6125      	str	r5, [r4, #16]
 800a38e:	4620      	mov	r0, r4
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	0801f8b4 	.word	0x0801f8b4
 800a398:	0801f8c5 	.word	0x0801f8c5

0800a39c <__hi0bits>:
 800a39c:	0c03      	lsrs	r3, r0, #16
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	b9d3      	cbnz	r3, 800a3d8 <__hi0bits+0x3c>
 800a3a2:	0400      	lsls	r0, r0, #16
 800a3a4:	2310      	movs	r3, #16
 800a3a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3aa:	bf04      	itt	eq
 800a3ac:	0200      	lsleq	r0, r0, #8
 800a3ae:	3308      	addeq	r3, #8
 800a3b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3b4:	bf04      	itt	eq
 800a3b6:	0100      	lsleq	r0, r0, #4
 800a3b8:	3304      	addeq	r3, #4
 800a3ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3be:	bf04      	itt	eq
 800a3c0:	0080      	lsleq	r0, r0, #2
 800a3c2:	3302      	addeq	r3, #2
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	db05      	blt.n	800a3d4 <__hi0bits+0x38>
 800a3c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3cc:	f103 0301 	add.w	r3, r3, #1
 800a3d0:	bf08      	it	eq
 800a3d2:	2320      	moveq	r3, #32
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	4770      	bx	lr
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e7e4      	b.n	800a3a6 <__hi0bits+0xa>

0800a3dc <__lo0bits>:
 800a3dc:	6803      	ldr	r3, [r0, #0]
 800a3de:	f013 0207 	ands.w	r2, r3, #7
 800a3e2:	d00c      	beq.n	800a3fe <__lo0bits+0x22>
 800a3e4:	07d9      	lsls	r1, r3, #31
 800a3e6:	d422      	bmi.n	800a42e <__lo0bits+0x52>
 800a3e8:	079a      	lsls	r2, r3, #30
 800a3ea:	bf49      	itett	mi
 800a3ec:	085b      	lsrmi	r3, r3, #1
 800a3ee:	089b      	lsrpl	r3, r3, #2
 800a3f0:	6003      	strmi	r3, [r0, #0]
 800a3f2:	2201      	movmi	r2, #1
 800a3f4:	bf5c      	itt	pl
 800a3f6:	6003      	strpl	r3, [r0, #0]
 800a3f8:	2202      	movpl	r2, #2
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4770      	bx	lr
 800a3fe:	b299      	uxth	r1, r3
 800a400:	b909      	cbnz	r1, 800a406 <__lo0bits+0x2a>
 800a402:	0c1b      	lsrs	r3, r3, #16
 800a404:	2210      	movs	r2, #16
 800a406:	b2d9      	uxtb	r1, r3
 800a408:	b909      	cbnz	r1, 800a40e <__lo0bits+0x32>
 800a40a:	3208      	adds	r2, #8
 800a40c:	0a1b      	lsrs	r3, r3, #8
 800a40e:	0719      	lsls	r1, r3, #28
 800a410:	bf04      	itt	eq
 800a412:	091b      	lsreq	r3, r3, #4
 800a414:	3204      	addeq	r2, #4
 800a416:	0799      	lsls	r1, r3, #30
 800a418:	bf04      	itt	eq
 800a41a:	089b      	lsreq	r3, r3, #2
 800a41c:	3202      	addeq	r2, #2
 800a41e:	07d9      	lsls	r1, r3, #31
 800a420:	d403      	bmi.n	800a42a <__lo0bits+0x4e>
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	f102 0201 	add.w	r2, r2, #1
 800a428:	d003      	beq.n	800a432 <__lo0bits+0x56>
 800a42a:	6003      	str	r3, [r0, #0]
 800a42c:	e7e5      	b.n	800a3fa <__lo0bits+0x1e>
 800a42e:	2200      	movs	r2, #0
 800a430:	e7e3      	b.n	800a3fa <__lo0bits+0x1e>
 800a432:	2220      	movs	r2, #32
 800a434:	e7e1      	b.n	800a3fa <__lo0bits+0x1e>
	...

0800a438 <__i2b>:
 800a438:	b510      	push	{r4, lr}
 800a43a:	460c      	mov	r4, r1
 800a43c:	2101      	movs	r1, #1
 800a43e:	f7ff ff05 	bl	800a24c <_Balloc>
 800a442:	4602      	mov	r2, r0
 800a444:	b928      	cbnz	r0, 800a452 <__i2b+0x1a>
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <__i2b+0x24>)
 800a448:	4805      	ldr	r0, [pc, #20]	; (800a460 <__i2b+0x28>)
 800a44a:	f240 1145 	movw	r1, #325	; 0x145
 800a44e:	f7fe ff63 	bl	8009318 <__assert_func>
 800a452:	2301      	movs	r3, #1
 800a454:	6144      	str	r4, [r0, #20]
 800a456:	6103      	str	r3, [r0, #16]
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	bf00      	nop
 800a45c:	0801f8b4 	.word	0x0801f8b4
 800a460:	0801f8c5 	.word	0x0801f8c5

0800a464 <__multiply>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	4691      	mov	r9, r2
 800a46a:	690a      	ldr	r2, [r1, #16]
 800a46c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a470:	429a      	cmp	r2, r3
 800a472:	bfb8      	it	lt
 800a474:	460b      	movlt	r3, r1
 800a476:	460c      	mov	r4, r1
 800a478:	bfbc      	itt	lt
 800a47a:	464c      	movlt	r4, r9
 800a47c:	4699      	movlt	r9, r3
 800a47e:	6927      	ldr	r7, [r4, #16]
 800a480:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a484:	68a3      	ldr	r3, [r4, #8]
 800a486:	6861      	ldr	r1, [r4, #4]
 800a488:	eb07 060a 	add.w	r6, r7, sl
 800a48c:	42b3      	cmp	r3, r6
 800a48e:	b085      	sub	sp, #20
 800a490:	bfb8      	it	lt
 800a492:	3101      	addlt	r1, #1
 800a494:	f7ff feda 	bl	800a24c <_Balloc>
 800a498:	b930      	cbnz	r0, 800a4a8 <__multiply+0x44>
 800a49a:	4602      	mov	r2, r0
 800a49c:	4b44      	ldr	r3, [pc, #272]	; (800a5b0 <__multiply+0x14c>)
 800a49e:	4845      	ldr	r0, [pc, #276]	; (800a5b4 <__multiply+0x150>)
 800a4a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a4a4:	f7fe ff38 	bl	8009318 <__assert_func>
 800a4a8:	f100 0514 	add.w	r5, r0, #20
 800a4ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	4543      	cmp	r3, r8
 800a4b6:	d321      	bcc.n	800a4fc <__multiply+0x98>
 800a4b8:	f104 0314 	add.w	r3, r4, #20
 800a4bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4c0:	f109 0314 	add.w	r3, r9, #20
 800a4c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4c8:	9202      	str	r2, [sp, #8]
 800a4ca:	1b3a      	subs	r2, r7, r4
 800a4cc:	3a15      	subs	r2, #21
 800a4ce:	f022 0203 	bic.w	r2, r2, #3
 800a4d2:	3204      	adds	r2, #4
 800a4d4:	f104 0115 	add.w	r1, r4, #21
 800a4d8:	428f      	cmp	r7, r1
 800a4da:	bf38      	it	cc
 800a4dc:	2204      	movcc	r2, #4
 800a4de:	9201      	str	r2, [sp, #4]
 800a4e0:	9a02      	ldr	r2, [sp, #8]
 800a4e2:	9303      	str	r3, [sp, #12]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d80c      	bhi.n	800a502 <__multiply+0x9e>
 800a4e8:	2e00      	cmp	r6, #0
 800a4ea:	dd03      	ble.n	800a4f4 <__multiply+0x90>
 800a4ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d05b      	beq.n	800a5ac <__multiply+0x148>
 800a4f4:	6106      	str	r6, [r0, #16]
 800a4f6:	b005      	add	sp, #20
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fc:	f843 2b04 	str.w	r2, [r3], #4
 800a500:	e7d8      	b.n	800a4b4 <__multiply+0x50>
 800a502:	f8b3 a000 	ldrh.w	sl, [r3]
 800a506:	f1ba 0f00 	cmp.w	sl, #0
 800a50a:	d024      	beq.n	800a556 <__multiply+0xf2>
 800a50c:	f104 0e14 	add.w	lr, r4, #20
 800a510:	46a9      	mov	r9, r5
 800a512:	f04f 0c00 	mov.w	ip, #0
 800a516:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a51a:	f8d9 1000 	ldr.w	r1, [r9]
 800a51e:	fa1f fb82 	uxth.w	fp, r2
 800a522:	b289      	uxth	r1, r1
 800a524:	fb0a 110b 	mla	r1, sl, fp, r1
 800a528:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a52c:	f8d9 2000 	ldr.w	r2, [r9]
 800a530:	4461      	add	r1, ip
 800a532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a536:	fb0a c20b 	mla	r2, sl, fp, ip
 800a53a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a53e:	b289      	uxth	r1, r1
 800a540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a544:	4577      	cmp	r7, lr
 800a546:	f849 1b04 	str.w	r1, [r9], #4
 800a54a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a54e:	d8e2      	bhi.n	800a516 <__multiply+0xb2>
 800a550:	9a01      	ldr	r2, [sp, #4]
 800a552:	f845 c002 	str.w	ip, [r5, r2]
 800a556:	9a03      	ldr	r2, [sp, #12]
 800a558:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a55c:	3304      	adds	r3, #4
 800a55e:	f1b9 0f00 	cmp.w	r9, #0
 800a562:	d021      	beq.n	800a5a8 <__multiply+0x144>
 800a564:	6829      	ldr	r1, [r5, #0]
 800a566:	f104 0c14 	add.w	ip, r4, #20
 800a56a:	46ae      	mov	lr, r5
 800a56c:	f04f 0a00 	mov.w	sl, #0
 800a570:	f8bc b000 	ldrh.w	fp, [ip]
 800a574:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a578:	fb09 220b 	mla	r2, r9, fp, r2
 800a57c:	4452      	add	r2, sl
 800a57e:	b289      	uxth	r1, r1
 800a580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a584:	f84e 1b04 	str.w	r1, [lr], #4
 800a588:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a58c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a590:	f8be 1000 	ldrh.w	r1, [lr]
 800a594:	fb09 110a 	mla	r1, r9, sl, r1
 800a598:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a59c:	4567      	cmp	r7, ip
 800a59e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5a2:	d8e5      	bhi.n	800a570 <__multiply+0x10c>
 800a5a4:	9a01      	ldr	r2, [sp, #4]
 800a5a6:	50a9      	str	r1, [r5, r2]
 800a5a8:	3504      	adds	r5, #4
 800a5aa:	e799      	b.n	800a4e0 <__multiply+0x7c>
 800a5ac:	3e01      	subs	r6, #1
 800a5ae:	e79b      	b.n	800a4e8 <__multiply+0x84>
 800a5b0:	0801f8b4 	.word	0x0801f8b4
 800a5b4:	0801f8c5 	.word	0x0801f8c5

0800a5b8 <__pow5mult>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	4615      	mov	r5, r2
 800a5be:	f012 0203 	ands.w	r2, r2, #3
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	d007      	beq.n	800a5d8 <__pow5mult+0x20>
 800a5c8:	4c25      	ldr	r4, [pc, #148]	; (800a660 <__pow5mult+0xa8>)
 800a5ca:	3a01      	subs	r2, #1
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5d2:	f7ff fe9d 	bl	800a310 <__multadd>
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	10ad      	asrs	r5, r5, #2
 800a5da:	d03d      	beq.n	800a658 <__pow5mult+0xa0>
 800a5dc:	69f4      	ldr	r4, [r6, #28]
 800a5de:	b97c      	cbnz	r4, 800a600 <__pow5mult+0x48>
 800a5e0:	2010      	movs	r0, #16
 800a5e2:	f7ff fd7f 	bl	800a0e4 <malloc>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	61f0      	str	r0, [r6, #28]
 800a5ea:	b928      	cbnz	r0, 800a5f8 <__pow5mult+0x40>
 800a5ec:	4b1d      	ldr	r3, [pc, #116]	; (800a664 <__pow5mult+0xac>)
 800a5ee:	481e      	ldr	r0, [pc, #120]	; (800a668 <__pow5mult+0xb0>)
 800a5f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a5f4:	f7fe fe90 	bl	8009318 <__assert_func>
 800a5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5fc:	6004      	str	r4, [r0, #0]
 800a5fe:	60c4      	str	r4, [r0, #12]
 800a600:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a604:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a608:	b94c      	cbnz	r4, 800a61e <__pow5mult+0x66>
 800a60a:	f240 2171 	movw	r1, #625	; 0x271
 800a60e:	4630      	mov	r0, r6
 800a610:	f7ff ff12 	bl	800a438 <__i2b>
 800a614:	2300      	movs	r3, #0
 800a616:	f8c8 0008 	str.w	r0, [r8, #8]
 800a61a:	4604      	mov	r4, r0
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	f04f 0900 	mov.w	r9, #0
 800a622:	07eb      	lsls	r3, r5, #31
 800a624:	d50a      	bpl.n	800a63c <__pow5mult+0x84>
 800a626:	4639      	mov	r1, r7
 800a628:	4622      	mov	r2, r4
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7ff ff1a 	bl	800a464 <__multiply>
 800a630:	4639      	mov	r1, r7
 800a632:	4680      	mov	r8, r0
 800a634:	4630      	mov	r0, r6
 800a636:	f7ff fe49 	bl	800a2cc <_Bfree>
 800a63a:	4647      	mov	r7, r8
 800a63c:	106d      	asrs	r5, r5, #1
 800a63e:	d00b      	beq.n	800a658 <__pow5mult+0xa0>
 800a640:	6820      	ldr	r0, [r4, #0]
 800a642:	b938      	cbnz	r0, 800a654 <__pow5mult+0x9c>
 800a644:	4622      	mov	r2, r4
 800a646:	4621      	mov	r1, r4
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff ff0b 	bl	800a464 <__multiply>
 800a64e:	6020      	str	r0, [r4, #0]
 800a650:	f8c0 9000 	str.w	r9, [r0]
 800a654:	4604      	mov	r4, r0
 800a656:	e7e4      	b.n	800a622 <__pow5mult+0x6a>
 800a658:	4638      	mov	r0, r7
 800a65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65e:	bf00      	nop
 800a660:	0801fa10 	.word	0x0801fa10
 800a664:	0801f770 	.word	0x0801f770
 800a668:	0801f8c5 	.word	0x0801f8c5

0800a66c <__lshift>:
 800a66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a670:	460c      	mov	r4, r1
 800a672:	6849      	ldr	r1, [r1, #4]
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a67a:	68a3      	ldr	r3, [r4, #8]
 800a67c:	4607      	mov	r7, r0
 800a67e:	4691      	mov	r9, r2
 800a680:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a684:	f108 0601 	add.w	r6, r8, #1
 800a688:	42b3      	cmp	r3, r6
 800a68a:	db0b      	blt.n	800a6a4 <__lshift+0x38>
 800a68c:	4638      	mov	r0, r7
 800a68e:	f7ff fddd 	bl	800a24c <_Balloc>
 800a692:	4605      	mov	r5, r0
 800a694:	b948      	cbnz	r0, 800a6aa <__lshift+0x3e>
 800a696:	4602      	mov	r2, r0
 800a698:	4b28      	ldr	r3, [pc, #160]	; (800a73c <__lshift+0xd0>)
 800a69a:	4829      	ldr	r0, [pc, #164]	; (800a740 <__lshift+0xd4>)
 800a69c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a6a0:	f7fe fe3a 	bl	8009318 <__assert_func>
 800a6a4:	3101      	adds	r1, #1
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	e7ee      	b.n	800a688 <__lshift+0x1c>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f100 0114 	add.w	r1, r0, #20
 800a6b0:	f100 0210 	add.w	r2, r0, #16
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	4553      	cmp	r3, sl
 800a6b8:	db33      	blt.n	800a722 <__lshift+0xb6>
 800a6ba:	6920      	ldr	r0, [r4, #16]
 800a6bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6c0:	f104 0314 	add.w	r3, r4, #20
 800a6c4:	f019 091f 	ands.w	r9, r9, #31
 800a6c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6d0:	d02b      	beq.n	800a72a <__lshift+0xbe>
 800a6d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a6d6:	468a      	mov	sl, r1
 800a6d8:	2200      	movs	r2, #0
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	fa00 f009 	lsl.w	r0, r0, r9
 800a6e0:	4310      	orrs	r0, r2
 800a6e2:	f84a 0b04 	str.w	r0, [sl], #4
 800a6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ea:	459c      	cmp	ip, r3
 800a6ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6f0:	d8f3      	bhi.n	800a6da <__lshift+0x6e>
 800a6f2:	ebac 0304 	sub.w	r3, ip, r4
 800a6f6:	3b15      	subs	r3, #21
 800a6f8:	f023 0303 	bic.w	r3, r3, #3
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	f104 0015 	add.w	r0, r4, #21
 800a702:	4584      	cmp	ip, r0
 800a704:	bf38      	it	cc
 800a706:	2304      	movcc	r3, #4
 800a708:	50ca      	str	r2, [r1, r3]
 800a70a:	b10a      	cbz	r2, 800a710 <__lshift+0xa4>
 800a70c:	f108 0602 	add.w	r6, r8, #2
 800a710:	3e01      	subs	r6, #1
 800a712:	4638      	mov	r0, r7
 800a714:	612e      	str	r6, [r5, #16]
 800a716:	4621      	mov	r1, r4
 800a718:	f7ff fdd8 	bl	800a2cc <_Bfree>
 800a71c:	4628      	mov	r0, r5
 800a71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a722:	f842 0f04 	str.w	r0, [r2, #4]!
 800a726:	3301      	adds	r3, #1
 800a728:	e7c5      	b.n	800a6b6 <__lshift+0x4a>
 800a72a:	3904      	subs	r1, #4
 800a72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a730:	f841 2f04 	str.w	r2, [r1, #4]!
 800a734:	459c      	cmp	ip, r3
 800a736:	d8f9      	bhi.n	800a72c <__lshift+0xc0>
 800a738:	e7ea      	b.n	800a710 <__lshift+0xa4>
 800a73a:	bf00      	nop
 800a73c:	0801f8b4 	.word	0x0801f8b4
 800a740:	0801f8c5 	.word	0x0801f8c5

0800a744 <__mcmp>:
 800a744:	b530      	push	{r4, r5, lr}
 800a746:	6902      	ldr	r2, [r0, #16]
 800a748:	690c      	ldr	r4, [r1, #16]
 800a74a:	1b12      	subs	r2, r2, r4
 800a74c:	d10e      	bne.n	800a76c <__mcmp+0x28>
 800a74e:	f100 0314 	add.w	r3, r0, #20
 800a752:	3114      	adds	r1, #20
 800a754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a75c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a764:	42a5      	cmp	r5, r4
 800a766:	d003      	beq.n	800a770 <__mcmp+0x2c>
 800a768:	d305      	bcc.n	800a776 <__mcmp+0x32>
 800a76a:	2201      	movs	r2, #1
 800a76c:	4610      	mov	r0, r2
 800a76e:	bd30      	pop	{r4, r5, pc}
 800a770:	4283      	cmp	r3, r0
 800a772:	d3f3      	bcc.n	800a75c <__mcmp+0x18>
 800a774:	e7fa      	b.n	800a76c <__mcmp+0x28>
 800a776:	f04f 32ff 	mov.w	r2, #4294967295
 800a77a:	e7f7      	b.n	800a76c <__mcmp+0x28>

0800a77c <__mdiff>:
 800a77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	460c      	mov	r4, r1
 800a782:	4606      	mov	r6, r0
 800a784:	4611      	mov	r1, r2
 800a786:	4620      	mov	r0, r4
 800a788:	4690      	mov	r8, r2
 800a78a:	f7ff ffdb 	bl	800a744 <__mcmp>
 800a78e:	1e05      	subs	r5, r0, #0
 800a790:	d110      	bne.n	800a7b4 <__mdiff+0x38>
 800a792:	4629      	mov	r1, r5
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff fd59 	bl	800a24c <_Balloc>
 800a79a:	b930      	cbnz	r0, 800a7aa <__mdiff+0x2e>
 800a79c:	4b3a      	ldr	r3, [pc, #232]	; (800a888 <__mdiff+0x10c>)
 800a79e:	4602      	mov	r2, r0
 800a7a0:	f240 2137 	movw	r1, #567	; 0x237
 800a7a4:	4839      	ldr	r0, [pc, #228]	; (800a88c <__mdiff+0x110>)
 800a7a6:	f7fe fdb7 	bl	8009318 <__assert_func>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b4:	bfa4      	itt	ge
 800a7b6:	4643      	movge	r3, r8
 800a7b8:	46a0      	movge	r8, r4
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7c0:	bfa6      	itte	ge
 800a7c2:	461c      	movge	r4, r3
 800a7c4:	2500      	movge	r5, #0
 800a7c6:	2501      	movlt	r5, #1
 800a7c8:	f7ff fd40 	bl	800a24c <_Balloc>
 800a7cc:	b920      	cbnz	r0, 800a7d8 <__mdiff+0x5c>
 800a7ce:	4b2e      	ldr	r3, [pc, #184]	; (800a888 <__mdiff+0x10c>)
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	f240 2145 	movw	r1, #581	; 0x245
 800a7d6:	e7e5      	b.n	800a7a4 <__mdiff+0x28>
 800a7d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7dc:	6926      	ldr	r6, [r4, #16]
 800a7de:	60c5      	str	r5, [r0, #12]
 800a7e0:	f104 0914 	add.w	r9, r4, #20
 800a7e4:	f108 0514 	add.w	r5, r8, #20
 800a7e8:	f100 0e14 	add.w	lr, r0, #20
 800a7ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7f4:	f108 0210 	add.w	r2, r8, #16
 800a7f8:	46f2      	mov	sl, lr
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a800:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a804:	fa11 f88b 	uxtah	r8, r1, fp
 800a808:	b299      	uxth	r1, r3
 800a80a:	0c1b      	lsrs	r3, r3, #16
 800a80c:	eba8 0801 	sub.w	r8, r8, r1
 800a810:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a814:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a818:	fa1f f888 	uxth.w	r8, r8
 800a81c:	1419      	asrs	r1, r3, #16
 800a81e:	454e      	cmp	r6, r9
 800a820:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a824:	f84a 3b04 	str.w	r3, [sl], #4
 800a828:	d8e8      	bhi.n	800a7fc <__mdiff+0x80>
 800a82a:	1b33      	subs	r3, r6, r4
 800a82c:	3b15      	subs	r3, #21
 800a82e:	f023 0303 	bic.w	r3, r3, #3
 800a832:	3304      	adds	r3, #4
 800a834:	3415      	adds	r4, #21
 800a836:	42a6      	cmp	r6, r4
 800a838:	bf38      	it	cc
 800a83a:	2304      	movcc	r3, #4
 800a83c:	441d      	add	r5, r3
 800a83e:	4473      	add	r3, lr
 800a840:	469e      	mov	lr, r3
 800a842:	462e      	mov	r6, r5
 800a844:	4566      	cmp	r6, ip
 800a846:	d30e      	bcc.n	800a866 <__mdiff+0xea>
 800a848:	f10c 0203 	add.w	r2, ip, #3
 800a84c:	1b52      	subs	r2, r2, r5
 800a84e:	f022 0203 	bic.w	r2, r2, #3
 800a852:	3d03      	subs	r5, #3
 800a854:	45ac      	cmp	ip, r5
 800a856:	bf38      	it	cc
 800a858:	2200      	movcc	r2, #0
 800a85a:	4413      	add	r3, r2
 800a85c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a860:	b17a      	cbz	r2, 800a882 <__mdiff+0x106>
 800a862:	6107      	str	r7, [r0, #16]
 800a864:	e7a4      	b.n	800a7b0 <__mdiff+0x34>
 800a866:	f856 8b04 	ldr.w	r8, [r6], #4
 800a86a:	fa11 f288 	uxtah	r2, r1, r8
 800a86e:	1414      	asrs	r4, r2, #16
 800a870:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a874:	b292      	uxth	r2, r2
 800a876:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a87a:	f84e 2b04 	str.w	r2, [lr], #4
 800a87e:	1421      	asrs	r1, r4, #16
 800a880:	e7e0      	b.n	800a844 <__mdiff+0xc8>
 800a882:	3f01      	subs	r7, #1
 800a884:	e7ea      	b.n	800a85c <__mdiff+0xe0>
 800a886:	bf00      	nop
 800a888:	0801f8b4 	.word	0x0801f8b4
 800a88c:	0801f8c5 	.word	0x0801f8c5

0800a890 <__d2b>:
 800a890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a894:	460f      	mov	r7, r1
 800a896:	2101      	movs	r1, #1
 800a898:	ec59 8b10 	vmov	r8, r9, d0
 800a89c:	4616      	mov	r6, r2
 800a89e:	f7ff fcd5 	bl	800a24c <_Balloc>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	b930      	cbnz	r0, 800a8b4 <__d2b+0x24>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4b24      	ldr	r3, [pc, #144]	; (800a93c <__d2b+0xac>)
 800a8aa:	4825      	ldr	r0, [pc, #148]	; (800a940 <__d2b+0xb0>)
 800a8ac:	f240 310f 	movw	r1, #783	; 0x30f
 800a8b0:	f7fe fd32 	bl	8009318 <__assert_func>
 800a8b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8bc:	bb2d      	cbnz	r5, 800a90a <__d2b+0x7a>
 800a8be:	9301      	str	r3, [sp, #4]
 800a8c0:	f1b8 0300 	subs.w	r3, r8, #0
 800a8c4:	d026      	beq.n	800a914 <__d2b+0x84>
 800a8c6:	4668      	mov	r0, sp
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	f7ff fd87 	bl	800a3dc <__lo0bits>
 800a8ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8d2:	b1e8      	cbz	r0, 800a910 <__d2b+0x80>
 800a8d4:	f1c0 0320 	rsb	r3, r0, #32
 800a8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	40c2      	lsrs	r2, r0
 800a8e0:	6163      	str	r3, [r4, #20]
 800a8e2:	9201      	str	r2, [sp, #4]
 800a8e4:	9b01      	ldr	r3, [sp, #4]
 800a8e6:	61a3      	str	r3, [r4, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bf14      	ite	ne
 800a8ec:	2202      	movne	r2, #2
 800a8ee:	2201      	moveq	r2, #1
 800a8f0:	6122      	str	r2, [r4, #16]
 800a8f2:	b1bd      	cbz	r5, 800a924 <__d2b+0x94>
 800a8f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8f8:	4405      	add	r5, r0
 800a8fa:	603d      	str	r5, [r7, #0]
 800a8fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a900:	6030      	str	r0, [r6, #0]
 800a902:	4620      	mov	r0, r4
 800a904:	b003      	add	sp, #12
 800a906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a90a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a90e:	e7d6      	b.n	800a8be <__d2b+0x2e>
 800a910:	6161      	str	r1, [r4, #20]
 800a912:	e7e7      	b.n	800a8e4 <__d2b+0x54>
 800a914:	a801      	add	r0, sp, #4
 800a916:	f7ff fd61 	bl	800a3dc <__lo0bits>
 800a91a:	9b01      	ldr	r3, [sp, #4]
 800a91c:	6163      	str	r3, [r4, #20]
 800a91e:	3020      	adds	r0, #32
 800a920:	2201      	movs	r2, #1
 800a922:	e7e5      	b.n	800a8f0 <__d2b+0x60>
 800a924:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a928:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a92c:	6038      	str	r0, [r7, #0]
 800a92e:	6918      	ldr	r0, [r3, #16]
 800a930:	f7ff fd34 	bl	800a39c <__hi0bits>
 800a934:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a938:	e7e2      	b.n	800a900 <__d2b+0x70>
 800a93a:	bf00      	nop
 800a93c:	0801f8b4 	.word	0x0801f8b4
 800a940:	0801f8c5 	.word	0x0801f8c5

0800a944 <__sfputc_r>:
 800a944:	6893      	ldr	r3, [r2, #8]
 800a946:	3b01      	subs	r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	b410      	push	{r4}
 800a94c:	6093      	str	r3, [r2, #8]
 800a94e:	da08      	bge.n	800a962 <__sfputc_r+0x1e>
 800a950:	6994      	ldr	r4, [r2, #24]
 800a952:	42a3      	cmp	r3, r4
 800a954:	db01      	blt.n	800a95a <__sfputc_r+0x16>
 800a956:	290a      	cmp	r1, #10
 800a958:	d103      	bne.n	800a962 <__sfputc_r+0x1e>
 800a95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a95e:	f000 b9f5 	b.w	800ad4c <__swbuf_r>
 800a962:	6813      	ldr	r3, [r2, #0]
 800a964:	1c58      	adds	r0, r3, #1
 800a966:	6010      	str	r0, [r2, #0]
 800a968:	7019      	strb	r1, [r3, #0]
 800a96a:	4608      	mov	r0, r1
 800a96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <__sfputs_r>:
 800a972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a974:	4606      	mov	r6, r0
 800a976:	460f      	mov	r7, r1
 800a978:	4614      	mov	r4, r2
 800a97a:	18d5      	adds	r5, r2, r3
 800a97c:	42ac      	cmp	r4, r5
 800a97e:	d101      	bne.n	800a984 <__sfputs_r+0x12>
 800a980:	2000      	movs	r0, #0
 800a982:	e007      	b.n	800a994 <__sfputs_r+0x22>
 800a984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a988:	463a      	mov	r2, r7
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7ff ffda 	bl	800a944 <__sfputc_r>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d1f3      	bne.n	800a97c <__sfputs_r+0xa>
 800a994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a998 <_vfiprintf_r>:
 800a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	460d      	mov	r5, r1
 800a99e:	b09d      	sub	sp, #116	; 0x74
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	4698      	mov	r8, r3
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	b118      	cbz	r0, 800a9b0 <_vfiprintf_r+0x18>
 800a9a8:	6a03      	ldr	r3, [r0, #32]
 800a9aa:	b90b      	cbnz	r3, 800a9b0 <_vfiprintf_r+0x18>
 800a9ac:	f7fe fbaa 	bl	8009104 <__sinit>
 800a9b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b2:	07d9      	lsls	r1, r3, #31
 800a9b4:	d405      	bmi.n	800a9c2 <_vfiprintf_r+0x2a>
 800a9b6:	89ab      	ldrh	r3, [r5, #12]
 800a9b8:	059a      	lsls	r2, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_vfiprintf_r+0x2a>
 800a9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9be:	f7fe fca9 	bl	8009314 <__retarget_lock_acquire_recursive>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	071b      	lsls	r3, r3, #28
 800a9c6:	d501      	bpl.n	800a9cc <_vfiprintf_r+0x34>
 800a9c8:	692b      	ldr	r3, [r5, #16]
 800a9ca:	b99b      	cbnz	r3, 800a9f4 <_vfiprintf_r+0x5c>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f000 f9fa 	bl	800adc8 <__swsetup_r>
 800a9d4:	b170      	cbz	r0, 800a9f4 <_vfiprintf_r+0x5c>
 800a9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d8:	07dc      	lsls	r4, r3, #31
 800a9da:	d504      	bpl.n	800a9e6 <_vfiprintf_r+0x4e>
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	b01d      	add	sp, #116	; 0x74
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	89ab      	ldrh	r3, [r5, #12]
 800a9e8:	0598      	lsls	r0, r3, #22
 800a9ea:	d4f7      	bmi.n	800a9dc <_vfiprintf_r+0x44>
 800a9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ee:	f7fe fc92 	bl	8009316 <__retarget_lock_release_recursive>
 800a9f2:	e7f3      	b.n	800a9dc <_vfiprintf_r+0x44>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f8:	2320      	movs	r3, #32
 800a9fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa02:	2330      	movs	r3, #48	; 0x30
 800aa04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800abb8 <_vfiprintf_r+0x220>
 800aa08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa0c:	f04f 0901 	mov.w	r9, #1
 800aa10:	4623      	mov	r3, r4
 800aa12:	469a      	mov	sl, r3
 800aa14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa18:	b10a      	cbz	r2, 800aa1e <_vfiprintf_r+0x86>
 800aa1a:	2a25      	cmp	r2, #37	; 0x25
 800aa1c:	d1f9      	bne.n	800aa12 <_vfiprintf_r+0x7a>
 800aa1e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa22:	d00b      	beq.n	800aa3c <_vfiprintf_r+0xa4>
 800aa24:	465b      	mov	r3, fp
 800aa26:	4622      	mov	r2, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff ffa1 	bl	800a972 <__sfputs_r>
 800aa30:	3001      	adds	r0, #1
 800aa32:	f000 80a9 	beq.w	800ab88 <_vfiprintf_r+0x1f0>
 800aa36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa38:	445a      	add	r2, fp
 800aa3a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa3c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 80a1 	beq.w	800ab88 <_vfiprintf_r+0x1f0>
 800aa46:	2300      	movs	r3, #0
 800aa48:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa50:	f10a 0a01 	add.w	sl, sl, #1
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	9307      	str	r3, [sp, #28]
 800aa58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa5c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa5e:	4654      	mov	r4, sl
 800aa60:	2205      	movs	r2, #5
 800aa62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa66:	4854      	ldr	r0, [pc, #336]	; (800abb8 <_vfiprintf_r+0x220>)
 800aa68:	f7f5 fc12 	bl	8000290 <memchr>
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	b9d8      	cbnz	r0, 800aaa8 <_vfiprintf_r+0x110>
 800aa70:	06d1      	lsls	r1, r2, #27
 800aa72:	bf44      	itt	mi
 800aa74:	2320      	movmi	r3, #32
 800aa76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa7a:	0713      	lsls	r3, r2, #28
 800aa7c:	bf44      	itt	mi
 800aa7e:	232b      	movmi	r3, #43	; 0x2b
 800aa80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa84:	f89a 3000 	ldrb.w	r3, [sl]
 800aa88:	2b2a      	cmp	r3, #42	; 0x2a
 800aa8a:	d015      	beq.n	800aab8 <_vfiprintf_r+0x120>
 800aa8c:	9a07      	ldr	r2, [sp, #28]
 800aa8e:	4654      	mov	r4, sl
 800aa90:	2000      	movs	r0, #0
 800aa92:	f04f 0c0a 	mov.w	ip, #10
 800aa96:	4621      	mov	r1, r4
 800aa98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa9c:	3b30      	subs	r3, #48	; 0x30
 800aa9e:	2b09      	cmp	r3, #9
 800aaa0:	d94d      	bls.n	800ab3e <_vfiprintf_r+0x1a6>
 800aaa2:	b1b0      	cbz	r0, 800aad2 <_vfiprintf_r+0x13a>
 800aaa4:	9207      	str	r2, [sp, #28]
 800aaa6:	e014      	b.n	800aad2 <_vfiprintf_r+0x13a>
 800aaa8:	eba0 0308 	sub.w	r3, r0, r8
 800aaac:	fa09 f303 	lsl.w	r3, r9, r3
 800aab0:	4313      	orrs	r3, r2
 800aab2:	9304      	str	r3, [sp, #16]
 800aab4:	46a2      	mov	sl, r4
 800aab6:	e7d2      	b.n	800aa5e <_vfiprintf_r+0xc6>
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	1d19      	adds	r1, r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	9103      	str	r1, [sp, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	bfbb      	ittet	lt
 800aac4:	425b      	neglt	r3, r3
 800aac6:	f042 0202 	orrlt.w	r2, r2, #2
 800aaca:	9307      	strge	r3, [sp, #28]
 800aacc:	9307      	strlt	r3, [sp, #28]
 800aace:	bfb8      	it	lt
 800aad0:	9204      	strlt	r2, [sp, #16]
 800aad2:	7823      	ldrb	r3, [r4, #0]
 800aad4:	2b2e      	cmp	r3, #46	; 0x2e
 800aad6:	d10c      	bne.n	800aaf2 <_vfiprintf_r+0x15a>
 800aad8:	7863      	ldrb	r3, [r4, #1]
 800aada:	2b2a      	cmp	r3, #42	; 0x2a
 800aadc:	d134      	bne.n	800ab48 <_vfiprintf_r+0x1b0>
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	1d1a      	adds	r2, r3, #4
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	9203      	str	r2, [sp, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	bfb8      	it	lt
 800aaea:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaee:	3402      	adds	r4, #2
 800aaf0:	9305      	str	r3, [sp, #20]
 800aaf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800abc8 <_vfiprintf_r+0x230>
 800aaf6:	7821      	ldrb	r1, [r4, #0]
 800aaf8:	2203      	movs	r2, #3
 800aafa:	4650      	mov	r0, sl
 800aafc:	f7f5 fbc8 	bl	8000290 <memchr>
 800ab00:	b138      	cbz	r0, 800ab12 <_vfiprintf_r+0x17a>
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	eba0 000a 	sub.w	r0, r0, sl
 800ab08:	2240      	movs	r2, #64	; 0x40
 800ab0a:	4082      	lsls	r2, r0
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	3401      	adds	r4, #1
 800ab10:	9304      	str	r3, [sp, #16]
 800ab12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab16:	4829      	ldr	r0, [pc, #164]	; (800abbc <_vfiprintf_r+0x224>)
 800ab18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab1c:	2206      	movs	r2, #6
 800ab1e:	f7f5 fbb7 	bl	8000290 <memchr>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d03f      	beq.n	800aba6 <_vfiprintf_r+0x20e>
 800ab26:	4b26      	ldr	r3, [pc, #152]	; (800abc0 <_vfiprintf_r+0x228>)
 800ab28:	bb1b      	cbnz	r3, 800ab72 <_vfiprintf_r+0x1da>
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	3307      	adds	r3, #7
 800ab2e:	f023 0307 	bic.w	r3, r3, #7
 800ab32:	3308      	adds	r3, #8
 800ab34:	9303      	str	r3, [sp, #12]
 800ab36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab38:	443b      	add	r3, r7
 800ab3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab3c:	e768      	b.n	800aa10 <_vfiprintf_r+0x78>
 800ab3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab42:	460c      	mov	r4, r1
 800ab44:	2001      	movs	r0, #1
 800ab46:	e7a6      	b.n	800aa96 <_vfiprintf_r+0xfe>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	3401      	adds	r4, #1
 800ab4c:	9305      	str	r3, [sp, #20]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	f04f 0c0a 	mov.w	ip, #10
 800ab54:	4620      	mov	r0, r4
 800ab56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab5a:	3a30      	subs	r2, #48	; 0x30
 800ab5c:	2a09      	cmp	r2, #9
 800ab5e:	d903      	bls.n	800ab68 <_vfiprintf_r+0x1d0>
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0c6      	beq.n	800aaf2 <_vfiprintf_r+0x15a>
 800ab64:	9105      	str	r1, [sp, #20]
 800ab66:	e7c4      	b.n	800aaf2 <_vfiprintf_r+0x15a>
 800ab68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e7f0      	b.n	800ab54 <_vfiprintf_r+0x1bc>
 800ab72:	ab03      	add	r3, sp, #12
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	462a      	mov	r2, r5
 800ab78:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <_vfiprintf_r+0x22c>)
 800ab7a:	a904      	add	r1, sp, #16
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7fd fe81 	bl	8008884 <_printf_float>
 800ab82:	4607      	mov	r7, r0
 800ab84:	1c78      	adds	r0, r7, #1
 800ab86:	d1d6      	bne.n	800ab36 <_vfiprintf_r+0x19e>
 800ab88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab8a:	07d9      	lsls	r1, r3, #31
 800ab8c:	d405      	bmi.n	800ab9a <_vfiprintf_r+0x202>
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	059a      	lsls	r2, r3, #22
 800ab92:	d402      	bmi.n	800ab9a <_vfiprintf_r+0x202>
 800ab94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab96:	f7fe fbbe 	bl	8009316 <__retarget_lock_release_recursive>
 800ab9a:	89ab      	ldrh	r3, [r5, #12]
 800ab9c:	065b      	lsls	r3, r3, #25
 800ab9e:	f53f af1d 	bmi.w	800a9dc <_vfiprintf_r+0x44>
 800aba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba4:	e71c      	b.n	800a9e0 <_vfiprintf_r+0x48>
 800aba6:	ab03      	add	r3, sp, #12
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	462a      	mov	r2, r5
 800abac:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <_vfiprintf_r+0x22c>)
 800abae:	a904      	add	r1, sp, #16
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7fe f90b 	bl	8008dcc <_printf_i>
 800abb6:	e7e4      	b.n	800ab82 <_vfiprintf_r+0x1ea>
 800abb8:	0801fa1c 	.word	0x0801fa1c
 800abbc:	0801fa26 	.word	0x0801fa26
 800abc0:	08008885 	.word	0x08008885
 800abc4:	0800a973 	.word	0x0800a973
 800abc8:	0801fa22 	.word	0x0801fa22

0800abcc <__sflush_r>:
 800abcc:	898a      	ldrh	r2, [r1, #12]
 800abce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	4605      	mov	r5, r0
 800abd4:	0710      	lsls	r0, r2, #28
 800abd6:	460c      	mov	r4, r1
 800abd8:	d458      	bmi.n	800ac8c <__sflush_r+0xc0>
 800abda:	684b      	ldr	r3, [r1, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dc05      	bgt.n	800abec <__sflush_r+0x20>
 800abe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dc02      	bgt.n	800abec <__sflush_r+0x20>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abee:	2e00      	cmp	r6, #0
 800abf0:	d0f9      	beq.n	800abe6 <__sflush_r+0x1a>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abf8:	682f      	ldr	r7, [r5, #0]
 800abfa:	6a21      	ldr	r1, [r4, #32]
 800abfc:	602b      	str	r3, [r5, #0]
 800abfe:	d032      	beq.n	800ac66 <__sflush_r+0x9a>
 800ac00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	075a      	lsls	r2, r3, #29
 800ac06:	d505      	bpl.n	800ac14 <__sflush_r+0x48>
 800ac08:	6863      	ldr	r3, [r4, #4]
 800ac0a:	1ac0      	subs	r0, r0, r3
 800ac0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac0e:	b10b      	cbz	r3, 800ac14 <__sflush_r+0x48>
 800ac10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac12:	1ac0      	subs	r0, r0, r3
 800ac14:	2300      	movs	r3, #0
 800ac16:	4602      	mov	r2, r0
 800ac18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac1a:	6a21      	ldr	r1, [r4, #32]
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b0      	blx	r6
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	d106      	bne.n	800ac34 <__sflush_r+0x68>
 800ac26:	6829      	ldr	r1, [r5, #0]
 800ac28:	291d      	cmp	r1, #29
 800ac2a:	d82b      	bhi.n	800ac84 <__sflush_r+0xb8>
 800ac2c:	4a29      	ldr	r2, [pc, #164]	; (800acd4 <__sflush_r+0x108>)
 800ac2e:	410a      	asrs	r2, r1
 800ac30:	07d6      	lsls	r6, r2, #31
 800ac32:	d427      	bmi.n	800ac84 <__sflush_r+0xb8>
 800ac34:	2200      	movs	r2, #0
 800ac36:	6062      	str	r2, [r4, #4]
 800ac38:	04d9      	lsls	r1, r3, #19
 800ac3a:	6922      	ldr	r2, [r4, #16]
 800ac3c:	6022      	str	r2, [r4, #0]
 800ac3e:	d504      	bpl.n	800ac4a <__sflush_r+0x7e>
 800ac40:	1c42      	adds	r2, r0, #1
 800ac42:	d101      	bne.n	800ac48 <__sflush_r+0x7c>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b903      	cbnz	r3, 800ac4a <__sflush_r+0x7e>
 800ac48:	6560      	str	r0, [r4, #84]	; 0x54
 800ac4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac4c:	602f      	str	r7, [r5, #0]
 800ac4e:	2900      	cmp	r1, #0
 800ac50:	d0c9      	beq.n	800abe6 <__sflush_r+0x1a>
 800ac52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac56:	4299      	cmp	r1, r3
 800ac58:	d002      	beq.n	800ac60 <__sflush_r+0x94>
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f7ff f9f6 	bl	800a04c <_free_r>
 800ac60:	2000      	movs	r0, #0
 800ac62:	6360      	str	r0, [r4, #52]	; 0x34
 800ac64:	e7c0      	b.n	800abe8 <__sflush_r+0x1c>
 800ac66:	2301      	movs	r3, #1
 800ac68:	4628      	mov	r0, r5
 800ac6a:	47b0      	blx	r6
 800ac6c:	1c41      	adds	r1, r0, #1
 800ac6e:	d1c8      	bne.n	800ac02 <__sflush_r+0x36>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0c5      	beq.n	800ac02 <__sflush_r+0x36>
 800ac76:	2b1d      	cmp	r3, #29
 800ac78:	d001      	beq.n	800ac7e <__sflush_r+0xb2>
 800ac7a:	2b16      	cmp	r3, #22
 800ac7c:	d101      	bne.n	800ac82 <__sflush_r+0xb6>
 800ac7e:	602f      	str	r7, [r5, #0]
 800ac80:	e7b1      	b.n	800abe6 <__sflush_r+0x1a>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	e7ad      	b.n	800abe8 <__sflush_r+0x1c>
 800ac8c:	690f      	ldr	r7, [r1, #16]
 800ac8e:	2f00      	cmp	r7, #0
 800ac90:	d0a9      	beq.n	800abe6 <__sflush_r+0x1a>
 800ac92:	0793      	lsls	r3, r2, #30
 800ac94:	680e      	ldr	r6, [r1, #0]
 800ac96:	bf08      	it	eq
 800ac98:	694b      	ldreq	r3, [r1, #20]
 800ac9a:	600f      	str	r7, [r1, #0]
 800ac9c:	bf18      	it	ne
 800ac9e:	2300      	movne	r3, #0
 800aca0:	eba6 0807 	sub.w	r8, r6, r7
 800aca4:	608b      	str	r3, [r1, #8]
 800aca6:	f1b8 0f00 	cmp.w	r8, #0
 800acaa:	dd9c      	ble.n	800abe6 <__sflush_r+0x1a>
 800acac:	6a21      	ldr	r1, [r4, #32]
 800acae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acb0:	4643      	mov	r3, r8
 800acb2:	463a      	mov	r2, r7
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b0      	blx	r6
 800acb8:	2800      	cmp	r0, #0
 800acba:	dc06      	bgt.n	800acca <__sflush_r+0xfe>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc2:	81a3      	strh	r3, [r4, #12]
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295
 800acc8:	e78e      	b.n	800abe8 <__sflush_r+0x1c>
 800acca:	4407      	add	r7, r0
 800accc:	eba8 0800 	sub.w	r8, r8, r0
 800acd0:	e7e9      	b.n	800aca6 <__sflush_r+0xda>
 800acd2:	bf00      	nop
 800acd4:	dfbffffe 	.word	0xdfbffffe

0800acd8 <_fflush_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	690b      	ldr	r3, [r1, #16]
 800acdc:	4605      	mov	r5, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	b913      	cbnz	r3, 800ace8 <_fflush_r+0x10>
 800ace2:	2500      	movs	r5, #0
 800ace4:	4628      	mov	r0, r5
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	b118      	cbz	r0, 800acf2 <_fflush_r+0x1a>
 800acea:	6a03      	ldr	r3, [r0, #32]
 800acec:	b90b      	cbnz	r3, 800acf2 <_fflush_r+0x1a>
 800acee:	f7fe fa09 	bl	8009104 <__sinit>
 800acf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d0f3      	beq.n	800ace2 <_fflush_r+0xa>
 800acfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acfc:	07d0      	lsls	r0, r2, #31
 800acfe:	d404      	bmi.n	800ad0a <_fflush_r+0x32>
 800ad00:	0599      	lsls	r1, r3, #22
 800ad02:	d402      	bmi.n	800ad0a <_fflush_r+0x32>
 800ad04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad06:	f7fe fb05 	bl	8009314 <__retarget_lock_acquire_recursive>
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	f7ff ff5d 	bl	800abcc <__sflush_r>
 800ad12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad14:	07da      	lsls	r2, r3, #31
 800ad16:	4605      	mov	r5, r0
 800ad18:	d4e4      	bmi.n	800ace4 <_fflush_r+0xc>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	059b      	lsls	r3, r3, #22
 800ad1e:	d4e1      	bmi.n	800ace4 <_fflush_r+0xc>
 800ad20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad22:	f7fe faf8 	bl	8009316 <__retarget_lock_release_recursive>
 800ad26:	e7dd      	b.n	800ace4 <_fflush_r+0xc>

0800ad28 <fiprintf>:
 800ad28:	b40e      	push	{r1, r2, r3}
 800ad2a:	b503      	push	{r0, r1, lr}
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	ab03      	add	r3, sp, #12
 800ad30:	4805      	ldr	r0, [pc, #20]	; (800ad48 <fiprintf+0x20>)
 800ad32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad36:	6800      	ldr	r0, [r0, #0]
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	f7ff fe2d 	bl	800a998 <_vfiprintf_r>
 800ad3e:	b002      	add	sp, #8
 800ad40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad44:	b003      	add	sp, #12
 800ad46:	4770      	bx	lr
 800ad48:	20000068 	.word	0x20000068

0800ad4c <__swbuf_r>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	460e      	mov	r6, r1
 800ad50:	4614      	mov	r4, r2
 800ad52:	4605      	mov	r5, r0
 800ad54:	b118      	cbz	r0, 800ad5e <__swbuf_r+0x12>
 800ad56:	6a03      	ldr	r3, [r0, #32]
 800ad58:	b90b      	cbnz	r3, 800ad5e <__swbuf_r+0x12>
 800ad5a:	f7fe f9d3 	bl	8009104 <__sinit>
 800ad5e:	69a3      	ldr	r3, [r4, #24]
 800ad60:	60a3      	str	r3, [r4, #8]
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	071a      	lsls	r2, r3, #28
 800ad66:	d525      	bpl.n	800adb4 <__swbuf_r+0x68>
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	b31b      	cbz	r3, 800adb4 <__swbuf_r+0x68>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	6922      	ldr	r2, [r4, #16]
 800ad70:	1a98      	subs	r0, r3, r2
 800ad72:	6963      	ldr	r3, [r4, #20]
 800ad74:	b2f6      	uxtb	r6, r6
 800ad76:	4283      	cmp	r3, r0
 800ad78:	4637      	mov	r7, r6
 800ad7a:	dc04      	bgt.n	800ad86 <__swbuf_r+0x3a>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f7ff ffaa 	bl	800acd8 <_fflush_r>
 800ad84:	b9e0      	cbnz	r0, 800adc0 <__swbuf_r+0x74>
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	60a3      	str	r3, [r4, #8]
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	6022      	str	r2, [r4, #0]
 800ad92:	701e      	strb	r6, [r3, #0]
 800ad94:	6962      	ldr	r2, [r4, #20]
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d004      	beq.n	800ada6 <__swbuf_r+0x5a>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	07db      	lsls	r3, r3, #31
 800ada0:	d506      	bpl.n	800adb0 <__swbuf_r+0x64>
 800ada2:	2e0a      	cmp	r6, #10
 800ada4:	d104      	bne.n	800adb0 <__swbuf_r+0x64>
 800ada6:	4621      	mov	r1, r4
 800ada8:	4628      	mov	r0, r5
 800adaa:	f7ff ff95 	bl	800acd8 <_fflush_r>
 800adae:	b938      	cbnz	r0, 800adc0 <__swbuf_r+0x74>
 800adb0:	4638      	mov	r0, r7
 800adb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb4:	4621      	mov	r1, r4
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 f806 	bl	800adc8 <__swsetup_r>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d0d5      	beq.n	800ad6c <__swbuf_r+0x20>
 800adc0:	f04f 37ff 	mov.w	r7, #4294967295
 800adc4:	e7f4      	b.n	800adb0 <__swbuf_r+0x64>
	...

0800adc8 <__swsetup_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4b2a      	ldr	r3, [pc, #168]	; (800ae74 <__swsetup_r+0xac>)
 800adcc:	4605      	mov	r5, r0
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	460c      	mov	r4, r1
 800add2:	b118      	cbz	r0, 800addc <__swsetup_r+0x14>
 800add4:	6a03      	ldr	r3, [r0, #32]
 800add6:	b90b      	cbnz	r3, 800addc <__swsetup_r+0x14>
 800add8:	f7fe f994 	bl	8009104 <__sinit>
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ade2:	0718      	lsls	r0, r3, #28
 800ade4:	d422      	bmi.n	800ae2c <__swsetup_r+0x64>
 800ade6:	06d9      	lsls	r1, r3, #27
 800ade8:	d407      	bmi.n	800adfa <__swsetup_r+0x32>
 800adea:	2309      	movs	r3, #9
 800adec:	602b      	str	r3, [r5, #0]
 800adee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	e034      	b.n	800ae64 <__swsetup_r+0x9c>
 800adfa:	0758      	lsls	r0, r3, #29
 800adfc:	d512      	bpl.n	800ae24 <__swsetup_r+0x5c>
 800adfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae00:	b141      	cbz	r1, 800ae14 <__swsetup_r+0x4c>
 800ae02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae06:	4299      	cmp	r1, r3
 800ae08:	d002      	beq.n	800ae10 <__swsetup_r+0x48>
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f7ff f91e 	bl	800a04c <_free_r>
 800ae10:	2300      	movs	r3, #0
 800ae12:	6363      	str	r3, [r4, #52]	; 0x34
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	6023      	str	r3, [r4, #0]
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f043 0308 	orr.w	r3, r3, #8
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	b94b      	cbnz	r3, 800ae44 <__swsetup_r+0x7c>
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae3a:	d003      	beq.n	800ae44 <__swsetup_r+0x7c>
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f000 f89a 	bl	800af78 <__smakebuf_r>
 800ae44:	89a0      	ldrh	r0, [r4, #12]
 800ae46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae4a:	f010 0301 	ands.w	r3, r0, #1
 800ae4e:	d00a      	beq.n	800ae66 <__swsetup_r+0x9e>
 800ae50:	2300      	movs	r3, #0
 800ae52:	60a3      	str	r3, [r4, #8]
 800ae54:	6963      	ldr	r3, [r4, #20]
 800ae56:	425b      	negs	r3, r3
 800ae58:	61a3      	str	r3, [r4, #24]
 800ae5a:	6923      	ldr	r3, [r4, #16]
 800ae5c:	b943      	cbnz	r3, 800ae70 <__swsetup_r+0xa8>
 800ae5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae62:	d1c4      	bne.n	800adee <__swsetup_r+0x26>
 800ae64:	bd38      	pop	{r3, r4, r5, pc}
 800ae66:	0781      	lsls	r1, r0, #30
 800ae68:	bf58      	it	pl
 800ae6a:	6963      	ldrpl	r3, [r4, #20]
 800ae6c:	60a3      	str	r3, [r4, #8]
 800ae6e:	e7f4      	b.n	800ae5a <__swsetup_r+0x92>
 800ae70:	2000      	movs	r0, #0
 800ae72:	e7f7      	b.n	800ae64 <__swsetup_r+0x9c>
 800ae74:	20000068 	.word	0x20000068

0800ae78 <_sbrk_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d06      	ldr	r5, [pc, #24]	; (800ae94 <_sbrk_r+0x1c>)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4604      	mov	r4, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	f7f6 fd42 	bl	800190c <_sbrk>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d102      	bne.n	800ae92 <_sbrk_r+0x1a>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	b103      	cbz	r3, 800ae92 <_sbrk_r+0x1a>
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	200037c0 	.word	0x200037c0

0800ae98 <memcpy>:
 800ae98:	440a      	add	r2, r1
 800ae9a:	4291      	cmp	r1, r2
 800ae9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aea0:	d100      	bne.n	800aea4 <memcpy+0xc>
 800aea2:	4770      	bx	lr
 800aea4:	b510      	push	{r4, lr}
 800aea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeae:	4291      	cmp	r1, r2
 800aeb0:	d1f9      	bne.n	800aea6 <memcpy+0xe>
 800aeb2:	bd10      	pop	{r4, pc}

0800aeb4 <abort>:
 800aeb4:	b508      	push	{r3, lr}
 800aeb6:	2006      	movs	r0, #6
 800aeb8:	f000 f8c2 	bl	800b040 <raise>
 800aebc:	2001      	movs	r0, #1
 800aebe:	f7f6 fcad 	bl	800181c <_exit>

0800aec2 <_calloc_r>:
 800aec2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aec4:	fba1 2402 	umull	r2, r4, r1, r2
 800aec8:	b94c      	cbnz	r4, 800aede <_calloc_r+0x1c>
 800aeca:	4611      	mov	r1, r2
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	f7ff f931 	bl	800a134 <_malloc_r>
 800aed2:	9a01      	ldr	r2, [sp, #4]
 800aed4:	4605      	mov	r5, r0
 800aed6:	b930      	cbnz	r0, 800aee6 <_calloc_r+0x24>
 800aed8:	4628      	mov	r0, r5
 800aeda:	b003      	add	sp, #12
 800aedc:	bd30      	pop	{r4, r5, pc}
 800aede:	220c      	movs	r2, #12
 800aee0:	6002      	str	r2, [r0, #0]
 800aee2:	2500      	movs	r5, #0
 800aee4:	e7f8      	b.n	800aed8 <_calloc_r+0x16>
 800aee6:	4621      	mov	r1, r4
 800aee8:	f7fe f997 	bl	800921a <memset>
 800aeec:	e7f4      	b.n	800aed8 <_calloc_r+0x16>

0800aeee <__ascii_mbtowc>:
 800aeee:	b082      	sub	sp, #8
 800aef0:	b901      	cbnz	r1, 800aef4 <__ascii_mbtowc+0x6>
 800aef2:	a901      	add	r1, sp, #4
 800aef4:	b142      	cbz	r2, 800af08 <__ascii_mbtowc+0x1a>
 800aef6:	b14b      	cbz	r3, 800af0c <__ascii_mbtowc+0x1e>
 800aef8:	7813      	ldrb	r3, [r2, #0]
 800aefa:	600b      	str	r3, [r1, #0]
 800aefc:	7812      	ldrb	r2, [r2, #0]
 800aefe:	1e10      	subs	r0, r2, #0
 800af00:	bf18      	it	ne
 800af02:	2001      	movne	r0, #1
 800af04:	b002      	add	sp, #8
 800af06:	4770      	bx	lr
 800af08:	4610      	mov	r0, r2
 800af0a:	e7fb      	b.n	800af04 <__ascii_mbtowc+0x16>
 800af0c:	f06f 0001 	mvn.w	r0, #1
 800af10:	e7f8      	b.n	800af04 <__ascii_mbtowc+0x16>

0800af12 <__ascii_wctomb>:
 800af12:	b149      	cbz	r1, 800af28 <__ascii_wctomb+0x16>
 800af14:	2aff      	cmp	r2, #255	; 0xff
 800af16:	bf85      	ittet	hi
 800af18:	238a      	movhi	r3, #138	; 0x8a
 800af1a:	6003      	strhi	r3, [r0, #0]
 800af1c:	700a      	strbls	r2, [r1, #0]
 800af1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800af22:	bf98      	it	ls
 800af24:	2001      	movls	r0, #1
 800af26:	4770      	bx	lr
 800af28:	4608      	mov	r0, r1
 800af2a:	4770      	bx	lr

0800af2c <__swhatbuf_r>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	460c      	mov	r4, r1
 800af30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af34:	2900      	cmp	r1, #0
 800af36:	b096      	sub	sp, #88	; 0x58
 800af38:	4615      	mov	r5, r2
 800af3a:	461e      	mov	r6, r3
 800af3c:	da0d      	bge.n	800af5a <__swhatbuf_r+0x2e>
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af44:	f04f 0100 	mov.w	r1, #0
 800af48:	bf0c      	ite	eq
 800af4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800af4e:	2340      	movne	r3, #64	; 0x40
 800af50:	2000      	movs	r0, #0
 800af52:	6031      	str	r1, [r6, #0]
 800af54:	602b      	str	r3, [r5, #0]
 800af56:	b016      	add	sp, #88	; 0x58
 800af58:	bd70      	pop	{r4, r5, r6, pc}
 800af5a:	466a      	mov	r2, sp
 800af5c:	f000 f878 	bl	800b050 <_fstat_r>
 800af60:	2800      	cmp	r0, #0
 800af62:	dbec      	blt.n	800af3e <__swhatbuf_r+0x12>
 800af64:	9901      	ldr	r1, [sp, #4]
 800af66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800af6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800af6e:	4259      	negs	r1, r3
 800af70:	4159      	adcs	r1, r3
 800af72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af76:	e7eb      	b.n	800af50 <__swhatbuf_r+0x24>

0800af78 <__smakebuf_r>:
 800af78:	898b      	ldrh	r3, [r1, #12]
 800af7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af7c:	079d      	lsls	r5, r3, #30
 800af7e:	4606      	mov	r6, r0
 800af80:	460c      	mov	r4, r1
 800af82:	d507      	bpl.n	800af94 <__smakebuf_r+0x1c>
 800af84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	2301      	movs	r3, #1
 800af8e:	6163      	str	r3, [r4, #20]
 800af90:	b002      	add	sp, #8
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	ab01      	add	r3, sp, #4
 800af96:	466a      	mov	r2, sp
 800af98:	f7ff ffc8 	bl	800af2c <__swhatbuf_r>
 800af9c:	9900      	ldr	r1, [sp, #0]
 800af9e:	4605      	mov	r5, r0
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff f8c7 	bl	800a134 <_malloc_r>
 800afa6:	b948      	cbnz	r0, 800afbc <__smakebuf_r+0x44>
 800afa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afac:	059a      	lsls	r2, r3, #22
 800afae:	d4ef      	bmi.n	800af90 <__smakebuf_r+0x18>
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	e7e3      	b.n	800af84 <__smakebuf_r+0xc>
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	6020      	str	r0, [r4, #0]
 800afc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc4:	81a3      	strh	r3, [r4, #12]
 800afc6:	9b00      	ldr	r3, [sp, #0]
 800afc8:	6163      	str	r3, [r4, #20]
 800afca:	9b01      	ldr	r3, [sp, #4]
 800afcc:	6120      	str	r0, [r4, #16]
 800afce:	b15b      	cbz	r3, 800afe8 <__smakebuf_r+0x70>
 800afd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd4:	4630      	mov	r0, r6
 800afd6:	f000 f84d 	bl	800b074 <_isatty_r>
 800afda:	b128      	cbz	r0, 800afe8 <__smakebuf_r+0x70>
 800afdc:	89a3      	ldrh	r3, [r4, #12]
 800afde:	f023 0303 	bic.w	r3, r3, #3
 800afe2:	f043 0301 	orr.w	r3, r3, #1
 800afe6:	81a3      	strh	r3, [r4, #12]
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	431d      	orrs	r5, r3
 800afec:	81a5      	strh	r5, [r4, #12]
 800afee:	e7cf      	b.n	800af90 <__smakebuf_r+0x18>

0800aff0 <_raise_r>:
 800aff0:	291f      	cmp	r1, #31
 800aff2:	b538      	push	{r3, r4, r5, lr}
 800aff4:	4604      	mov	r4, r0
 800aff6:	460d      	mov	r5, r1
 800aff8:	d904      	bls.n	800b004 <_raise_r+0x14>
 800affa:	2316      	movs	r3, #22
 800affc:	6003      	str	r3, [r0, #0]
 800affe:	f04f 30ff 	mov.w	r0, #4294967295
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b006:	b112      	cbz	r2, 800b00e <_raise_r+0x1e>
 800b008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b00c:	b94b      	cbnz	r3, 800b022 <_raise_r+0x32>
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 f852 	bl	800b0b8 <_getpid_r>
 800b014:	462a      	mov	r2, r5
 800b016:	4601      	mov	r1, r0
 800b018:	4620      	mov	r0, r4
 800b01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b01e:	f000 b839 	b.w	800b094 <_kill_r>
 800b022:	2b01      	cmp	r3, #1
 800b024:	d00a      	beq.n	800b03c <_raise_r+0x4c>
 800b026:	1c59      	adds	r1, r3, #1
 800b028:	d103      	bne.n	800b032 <_raise_r+0x42>
 800b02a:	2316      	movs	r3, #22
 800b02c:	6003      	str	r3, [r0, #0]
 800b02e:	2001      	movs	r0, #1
 800b030:	e7e7      	b.n	800b002 <_raise_r+0x12>
 800b032:	2400      	movs	r4, #0
 800b034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b038:	4628      	mov	r0, r5
 800b03a:	4798      	blx	r3
 800b03c:	2000      	movs	r0, #0
 800b03e:	e7e0      	b.n	800b002 <_raise_r+0x12>

0800b040 <raise>:
 800b040:	4b02      	ldr	r3, [pc, #8]	; (800b04c <raise+0xc>)
 800b042:	4601      	mov	r1, r0
 800b044:	6818      	ldr	r0, [r3, #0]
 800b046:	f7ff bfd3 	b.w	800aff0 <_raise_r>
 800b04a:	bf00      	nop
 800b04c:	20000068 	.word	0x20000068

0800b050 <_fstat_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	; (800b070 <_fstat_r+0x20>)
 800b054:	2300      	movs	r3, #0
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	f7f6 fc2c 	bl	80018ba <_fstat>
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	d102      	bne.n	800b06c <_fstat_r+0x1c>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	b103      	cbz	r3, 800b06c <_fstat_r+0x1c>
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	bd38      	pop	{r3, r4, r5, pc}
 800b06e:	bf00      	nop
 800b070:	200037c0 	.word	0x200037c0

0800b074 <_isatty_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d06      	ldr	r5, [pc, #24]	; (800b090 <_isatty_r+0x1c>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	602b      	str	r3, [r5, #0]
 800b080:	f7f6 fc2b 	bl	80018da <_isatty>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_isatty_r+0x1a>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_isatty_r+0x1a>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	200037c0 	.word	0x200037c0

0800b094 <_kill_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d07      	ldr	r5, [pc, #28]	; (800b0b4 <_kill_r+0x20>)
 800b098:	2300      	movs	r3, #0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	4611      	mov	r1, r2
 800b0a0:	602b      	str	r3, [r5, #0]
 800b0a2:	f7f6 fbab 	bl	80017fc <_kill>
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	d102      	bne.n	800b0b0 <_kill_r+0x1c>
 800b0aa:	682b      	ldr	r3, [r5, #0]
 800b0ac:	b103      	cbz	r3, 800b0b0 <_kill_r+0x1c>
 800b0ae:	6023      	str	r3, [r4, #0]
 800b0b0:	bd38      	pop	{r3, r4, r5, pc}
 800b0b2:	bf00      	nop
 800b0b4:	200037c0 	.word	0x200037c0

0800b0b8 <_getpid_r>:
 800b0b8:	f7f6 bb98 	b.w	80017ec <_getpid>
 800b0bc:	0000      	movs	r0, r0
	...

0800b0c0 <sin>:
 800b0c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0c2:	ec53 2b10 	vmov	r2, r3, d0
 800b0c6:	4828      	ldr	r0, [pc, #160]	; (800b168 <sin+0xa8>)
 800b0c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0cc:	4281      	cmp	r1, r0
 800b0ce:	dc07      	bgt.n	800b0e0 <sin+0x20>
 800b0d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b160 <sin+0xa0>
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	b005      	add	sp, #20
 800b0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0dc:	f000 b934 	b.w	800b348 <__kernel_sin>
 800b0e0:	4822      	ldr	r0, [pc, #136]	; (800b16c <sin+0xac>)
 800b0e2:	4281      	cmp	r1, r0
 800b0e4:	dd09      	ble.n	800b0fa <sin+0x3a>
 800b0e6:	ee10 0a10 	vmov	r0, s0
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	f7f5 f92c 	bl	8000348 <__aeabi_dsub>
 800b0f0:	ec41 0b10 	vmov	d0, r0, r1
 800b0f4:	b005      	add	sp, #20
 800b0f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0fa:	4668      	mov	r0, sp
 800b0fc:	f000 f9e4 	bl	800b4c8 <__ieee754_rem_pio2>
 800b100:	f000 0003 	and.w	r0, r0, #3
 800b104:	2801      	cmp	r0, #1
 800b106:	d00c      	beq.n	800b122 <sin+0x62>
 800b108:	2802      	cmp	r0, #2
 800b10a:	d011      	beq.n	800b130 <sin+0x70>
 800b10c:	b9f0      	cbnz	r0, 800b14c <sin+0x8c>
 800b10e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b112:	ed9d 0b00 	vldr	d0, [sp]
 800b116:	2001      	movs	r0, #1
 800b118:	f000 f916 	bl	800b348 <__kernel_sin>
 800b11c:	ec51 0b10 	vmov	r0, r1, d0
 800b120:	e7e6      	b.n	800b0f0 <sin+0x30>
 800b122:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b126:	ed9d 0b00 	vldr	d0, [sp]
 800b12a:	f000 f845 	bl	800b1b8 <__kernel_cos>
 800b12e:	e7f5      	b.n	800b11c <sin+0x5c>
 800b130:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b134:	ed9d 0b00 	vldr	d0, [sp]
 800b138:	2001      	movs	r0, #1
 800b13a:	f000 f905 	bl	800b348 <__kernel_sin>
 800b13e:	ec53 2b10 	vmov	r2, r3, d0
 800b142:	ee10 0a10 	vmov	r0, s0
 800b146:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b14a:	e7d1      	b.n	800b0f0 <sin+0x30>
 800b14c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b150:	ed9d 0b00 	vldr	d0, [sp]
 800b154:	f000 f830 	bl	800b1b8 <__kernel_cos>
 800b158:	e7f1      	b.n	800b13e <sin+0x7e>
 800b15a:	bf00      	nop
 800b15c:	f3af 8000 	nop.w
	...
 800b168:	3fe921fb 	.word	0x3fe921fb
 800b16c:	7fefffff 	.word	0x7fefffff

0800b170 <sqrtf>:
 800b170:	b508      	push	{r3, lr}
 800b172:	ed2d 8b02 	vpush	{d8}
 800b176:	eeb0 8a40 	vmov.f32	s16, s0
 800b17a:	f000 f817 	bl	800b1ac <__ieee754_sqrtf>
 800b17e:	eeb4 8a48 	vcmp.f32	s16, s16
 800b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b186:	d60c      	bvs.n	800b1a2 <sqrtf+0x32>
 800b188:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b1a8 <sqrtf+0x38>
 800b18c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b194:	d505      	bpl.n	800b1a2 <sqrtf+0x32>
 800b196:	f7fe f893 	bl	80092c0 <__errno>
 800b19a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b19e:	2321      	movs	r3, #33	; 0x21
 800b1a0:	6003      	str	r3, [r0, #0]
 800b1a2:	ecbd 8b02 	vpop	{d8}
 800b1a6:	bd08      	pop	{r3, pc}
 800b1a8:	00000000 	.word	0x00000000

0800b1ac <__ieee754_sqrtf>:
 800b1ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b1b0:	4770      	bx	lr
 800b1b2:	0000      	movs	r0, r0
 800b1b4:	0000      	movs	r0, r0
	...

0800b1b8 <__kernel_cos>:
 800b1b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	ec57 6b10 	vmov	r6, r7, d0
 800b1c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b1c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b1c8:	ed8d 1b00 	vstr	d1, [sp]
 800b1cc:	da07      	bge.n	800b1de <__kernel_cos+0x26>
 800b1ce:	ee10 0a10 	vmov	r0, s0
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	f7f5 fd20 	bl	8000c18 <__aeabi_d2iz>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	f000 8088 	beq.w	800b2ee <__kernel_cos+0x136>
 800b1de:	4632      	mov	r2, r6
 800b1e0:	463b      	mov	r3, r7
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	f7f5 fa67 	bl	80006b8 <__aeabi_dmul>
 800b1ea:	4b51      	ldr	r3, [pc, #324]	; (800b330 <__kernel_cos+0x178>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	f7f5 fa61 	bl	80006b8 <__aeabi_dmul>
 800b1f6:	a340      	add	r3, pc, #256	; (adr r3, 800b2f8 <__kernel_cos+0x140>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	4682      	mov	sl, r0
 800b1fe:	468b      	mov	fp, r1
 800b200:	4620      	mov	r0, r4
 800b202:	4629      	mov	r1, r5
 800b204:	f7f5 fa58 	bl	80006b8 <__aeabi_dmul>
 800b208:	a33d      	add	r3, pc, #244	; (adr r3, 800b300 <__kernel_cos+0x148>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f7f5 f89d 	bl	800034c <__adddf3>
 800b212:	4622      	mov	r2, r4
 800b214:	462b      	mov	r3, r5
 800b216:	f7f5 fa4f 	bl	80006b8 <__aeabi_dmul>
 800b21a:	a33b      	add	r3, pc, #236	; (adr r3, 800b308 <__kernel_cos+0x150>)
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f7f5 f892 	bl	8000348 <__aeabi_dsub>
 800b224:	4622      	mov	r2, r4
 800b226:	462b      	mov	r3, r5
 800b228:	f7f5 fa46 	bl	80006b8 <__aeabi_dmul>
 800b22c:	a338      	add	r3, pc, #224	; (adr r3, 800b310 <__kernel_cos+0x158>)
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	f7f5 f88b 	bl	800034c <__adddf3>
 800b236:	4622      	mov	r2, r4
 800b238:	462b      	mov	r3, r5
 800b23a:	f7f5 fa3d 	bl	80006b8 <__aeabi_dmul>
 800b23e:	a336      	add	r3, pc, #216	; (adr r3, 800b318 <__kernel_cos+0x160>)
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	f7f5 f880 	bl	8000348 <__aeabi_dsub>
 800b248:	4622      	mov	r2, r4
 800b24a:	462b      	mov	r3, r5
 800b24c:	f7f5 fa34 	bl	80006b8 <__aeabi_dmul>
 800b250:	a333      	add	r3, pc, #204	; (adr r3, 800b320 <__kernel_cos+0x168>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f5 f879 	bl	800034c <__adddf3>
 800b25a:	4622      	mov	r2, r4
 800b25c:	462b      	mov	r3, r5
 800b25e:	f7f5 fa2b 	bl	80006b8 <__aeabi_dmul>
 800b262:	4622      	mov	r2, r4
 800b264:	462b      	mov	r3, r5
 800b266:	f7f5 fa27 	bl	80006b8 <__aeabi_dmul>
 800b26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b26e:	4604      	mov	r4, r0
 800b270:	460d      	mov	r5, r1
 800b272:	4630      	mov	r0, r6
 800b274:	4639      	mov	r1, r7
 800b276:	f7f5 fa1f 	bl	80006b8 <__aeabi_dmul>
 800b27a:	460b      	mov	r3, r1
 800b27c:	4602      	mov	r2, r0
 800b27e:	4629      	mov	r1, r5
 800b280:	4620      	mov	r0, r4
 800b282:	f7f5 f861 	bl	8000348 <__aeabi_dsub>
 800b286:	4b2b      	ldr	r3, [pc, #172]	; (800b334 <__kernel_cos+0x17c>)
 800b288:	4598      	cmp	r8, r3
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	dc10      	bgt.n	800b2b2 <__kernel_cos+0xfa>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	4650      	mov	r0, sl
 800b296:	4659      	mov	r1, fp
 800b298:	f7f5 f856 	bl	8000348 <__aeabi_dsub>
 800b29c:	460b      	mov	r3, r1
 800b29e:	4926      	ldr	r1, [pc, #152]	; (800b338 <__kernel_cos+0x180>)
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	f7f5 f850 	bl	8000348 <__aeabi_dsub>
 800b2a8:	ec41 0b10 	vmov	d0, r0, r1
 800b2ac:	b003      	add	sp, #12
 800b2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b2:	4b22      	ldr	r3, [pc, #136]	; (800b33c <__kernel_cos+0x184>)
 800b2b4:	4920      	ldr	r1, [pc, #128]	; (800b338 <__kernel_cos+0x180>)
 800b2b6:	4598      	cmp	r8, r3
 800b2b8:	bfcc      	ite	gt
 800b2ba:	4d21      	ldrgt	r5, [pc, #132]	; (800b340 <__kernel_cos+0x188>)
 800b2bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b2c0:	2400      	movs	r4, #0
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	f7f5 f83e 	bl	8000348 <__aeabi_dsub>
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	4689      	mov	r9, r1
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	4659      	mov	r1, fp
 800b2d8:	f7f5 f836 	bl	8000348 <__aeabi_dsub>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	f7f5 f832 	bl	8000348 <__aeabi_dsub>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	e7da      	b.n	800b2a4 <__kernel_cos+0xec>
 800b2ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b328 <__kernel_cos+0x170>
 800b2f2:	e7db      	b.n	800b2ac <__kernel_cos+0xf4>
 800b2f4:	f3af 8000 	nop.w
 800b2f8:	be8838d4 	.word	0xbe8838d4
 800b2fc:	bda8fae9 	.word	0xbda8fae9
 800b300:	bdb4b1c4 	.word	0xbdb4b1c4
 800b304:	3e21ee9e 	.word	0x3e21ee9e
 800b308:	809c52ad 	.word	0x809c52ad
 800b30c:	3e927e4f 	.word	0x3e927e4f
 800b310:	19cb1590 	.word	0x19cb1590
 800b314:	3efa01a0 	.word	0x3efa01a0
 800b318:	16c15177 	.word	0x16c15177
 800b31c:	3f56c16c 	.word	0x3f56c16c
 800b320:	5555554c 	.word	0x5555554c
 800b324:	3fa55555 	.word	0x3fa55555
 800b328:	00000000 	.word	0x00000000
 800b32c:	3ff00000 	.word	0x3ff00000
 800b330:	3fe00000 	.word	0x3fe00000
 800b334:	3fd33332 	.word	0x3fd33332
 800b338:	3ff00000 	.word	0x3ff00000
 800b33c:	3fe90000 	.word	0x3fe90000
 800b340:	3fd20000 	.word	0x3fd20000
 800b344:	00000000 	.word	0x00000000

0800b348 <__kernel_sin>:
 800b348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	ed2d 8b04 	vpush	{d8-d9}
 800b350:	eeb0 8a41 	vmov.f32	s16, s2
 800b354:	eef0 8a61 	vmov.f32	s17, s3
 800b358:	ec55 4b10 	vmov	r4, r5, d0
 800b35c:	b083      	sub	sp, #12
 800b35e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b362:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b366:	9001      	str	r0, [sp, #4]
 800b368:	da06      	bge.n	800b378 <__kernel_sin+0x30>
 800b36a:	ee10 0a10 	vmov	r0, s0
 800b36e:	4629      	mov	r1, r5
 800b370:	f7f5 fc52 	bl	8000c18 <__aeabi_d2iz>
 800b374:	2800      	cmp	r0, #0
 800b376:	d051      	beq.n	800b41c <__kernel_sin+0xd4>
 800b378:	4622      	mov	r2, r4
 800b37a:	462b      	mov	r3, r5
 800b37c:	4620      	mov	r0, r4
 800b37e:	4629      	mov	r1, r5
 800b380:	f7f5 f99a 	bl	80006b8 <__aeabi_dmul>
 800b384:	4682      	mov	sl, r0
 800b386:	468b      	mov	fp, r1
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4620      	mov	r0, r4
 800b38e:	4629      	mov	r1, r5
 800b390:	f7f5 f992 	bl	80006b8 <__aeabi_dmul>
 800b394:	a341      	add	r3, pc, #260	; (adr r3, 800b49c <__kernel_sin+0x154>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	4680      	mov	r8, r0
 800b39c:	4689      	mov	r9, r1
 800b39e:	4650      	mov	r0, sl
 800b3a0:	4659      	mov	r1, fp
 800b3a2:	f7f5 f989 	bl	80006b8 <__aeabi_dmul>
 800b3a6:	a33f      	add	r3, pc, #252	; (adr r3, 800b4a4 <__kernel_sin+0x15c>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f4 ffcc 	bl	8000348 <__aeabi_dsub>
 800b3b0:	4652      	mov	r2, sl
 800b3b2:	465b      	mov	r3, fp
 800b3b4:	f7f5 f980 	bl	80006b8 <__aeabi_dmul>
 800b3b8:	a33c      	add	r3, pc, #240	; (adr r3, 800b4ac <__kernel_sin+0x164>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f4 ffc5 	bl	800034c <__adddf3>
 800b3c2:	4652      	mov	r2, sl
 800b3c4:	465b      	mov	r3, fp
 800b3c6:	f7f5 f977 	bl	80006b8 <__aeabi_dmul>
 800b3ca:	a33a      	add	r3, pc, #232	; (adr r3, 800b4b4 <__kernel_sin+0x16c>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f7f4 ffba 	bl	8000348 <__aeabi_dsub>
 800b3d4:	4652      	mov	r2, sl
 800b3d6:	465b      	mov	r3, fp
 800b3d8:	f7f5 f96e 	bl	80006b8 <__aeabi_dmul>
 800b3dc:	a337      	add	r3, pc, #220	; (adr r3, 800b4bc <__kernel_sin+0x174>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f7f4 ffb3 	bl	800034c <__adddf3>
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	460f      	mov	r7, r1
 800b3ec:	b9eb      	cbnz	r3, 800b42a <__kernel_sin+0xe2>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	4659      	mov	r1, fp
 800b3f6:	f7f5 f95f 	bl	80006b8 <__aeabi_dmul>
 800b3fa:	a325      	add	r3, pc, #148	; (adr r3, 800b490 <__kernel_sin+0x148>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f4 ffa2 	bl	8000348 <__aeabi_dsub>
 800b404:	4642      	mov	r2, r8
 800b406:	464b      	mov	r3, r9
 800b408:	f7f5 f956 	bl	80006b8 <__aeabi_dmul>
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	4620      	mov	r0, r4
 800b412:	4629      	mov	r1, r5
 800b414:	f7f4 ff9a 	bl	800034c <__adddf3>
 800b418:	4604      	mov	r4, r0
 800b41a:	460d      	mov	r5, r1
 800b41c:	ec45 4b10 	vmov	d0, r4, r5
 800b420:	b003      	add	sp, #12
 800b422:	ecbd 8b04 	vpop	{d8-d9}
 800b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42a:	4b1b      	ldr	r3, [pc, #108]	; (800b498 <__kernel_sin+0x150>)
 800b42c:	ec51 0b18 	vmov	r0, r1, d8
 800b430:	2200      	movs	r2, #0
 800b432:	f7f5 f941 	bl	80006b8 <__aeabi_dmul>
 800b436:	4632      	mov	r2, r6
 800b438:	ec41 0b19 	vmov	d9, r0, r1
 800b43c:	463b      	mov	r3, r7
 800b43e:	4640      	mov	r0, r8
 800b440:	4649      	mov	r1, r9
 800b442:	f7f5 f939 	bl	80006b8 <__aeabi_dmul>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	ec51 0b19 	vmov	r0, r1, d9
 800b44e:	f7f4 ff7b 	bl	8000348 <__aeabi_dsub>
 800b452:	4652      	mov	r2, sl
 800b454:	465b      	mov	r3, fp
 800b456:	f7f5 f92f 	bl	80006b8 <__aeabi_dmul>
 800b45a:	ec53 2b18 	vmov	r2, r3, d8
 800b45e:	f7f4 ff73 	bl	8000348 <__aeabi_dsub>
 800b462:	a30b      	add	r3, pc, #44	; (adr r3, 800b490 <__kernel_sin+0x148>)
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	4606      	mov	r6, r0
 800b46a:	460f      	mov	r7, r1
 800b46c:	4640      	mov	r0, r8
 800b46e:	4649      	mov	r1, r9
 800b470:	f7f5 f922 	bl	80006b8 <__aeabi_dmul>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	4630      	mov	r0, r6
 800b47a:	4639      	mov	r1, r7
 800b47c:	f7f4 ff66 	bl	800034c <__adddf3>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4620      	mov	r0, r4
 800b486:	4629      	mov	r1, r5
 800b488:	f7f4 ff5e 	bl	8000348 <__aeabi_dsub>
 800b48c:	e7c4      	b.n	800b418 <__kernel_sin+0xd0>
 800b48e:	bf00      	nop
 800b490:	55555549 	.word	0x55555549
 800b494:	3fc55555 	.word	0x3fc55555
 800b498:	3fe00000 	.word	0x3fe00000
 800b49c:	5acfd57c 	.word	0x5acfd57c
 800b4a0:	3de5d93a 	.word	0x3de5d93a
 800b4a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b4a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b4ac:	57b1fe7d 	.word	0x57b1fe7d
 800b4b0:	3ec71de3 	.word	0x3ec71de3
 800b4b4:	19c161d5 	.word	0x19c161d5
 800b4b8:	3f2a01a0 	.word	0x3f2a01a0
 800b4bc:	1110f8a6 	.word	0x1110f8a6
 800b4c0:	3f811111 	.word	0x3f811111
 800b4c4:	00000000 	.word	0x00000000

0800b4c8 <__ieee754_rem_pio2>:
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	ed2d 8b02 	vpush	{d8}
 800b4d0:	ec55 4b10 	vmov	r4, r5, d0
 800b4d4:	4bca      	ldr	r3, [pc, #808]	; (800b800 <__ieee754_rem_pio2+0x338>)
 800b4d6:	b08b      	sub	sp, #44	; 0x2c
 800b4d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b4dc:	4598      	cmp	r8, r3
 800b4de:	4682      	mov	sl, r0
 800b4e0:	9502      	str	r5, [sp, #8]
 800b4e2:	dc08      	bgt.n	800b4f6 <__ieee754_rem_pio2+0x2e>
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	ed80 0b00 	vstr	d0, [r0]
 800b4ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b4f0:	f04f 0b00 	mov.w	fp, #0
 800b4f4:	e028      	b.n	800b548 <__ieee754_rem_pio2+0x80>
 800b4f6:	4bc3      	ldr	r3, [pc, #780]	; (800b804 <__ieee754_rem_pio2+0x33c>)
 800b4f8:	4598      	cmp	r8, r3
 800b4fa:	dc78      	bgt.n	800b5ee <__ieee754_rem_pio2+0x126>
 800b4fc:	9b02      	ldr	r3, [sp, #8]
 800b4fe:	4ec2      	ldr	r6, [pc, #776]	; (800b808 <__ieee754_rem_pio2+0x340>)
 800b500:	2b00      	cmp	r3, #0
 800b502:	ee10 0a10 	vmov	r0, s0
 800b506:	a3b0      	add	r3, pc, #704	; (adr r3, 800b7c8 <__ieee754_rem_pio2+0x300>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	4629      	mov	r1, r5
 800b50e:	dd39      	ble.n	800b584 <__ieee754_rem_pio2+0xbc>
 800b510:	f7f4 ff1a 	bl	8000348 <__aeabi_dsub>
 800b514:	45b0      	cmp	r8, r6
 800b516:	4604      	mov	r4, r0
 800b518:	460d      	mov	r5, r1
 800b51a:	d01b      	beq.n	800b554 <__ieee754_rem_pio2+0x8c>
 800b51c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b7d0 <__ieee754_rem_pio2+0x308>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 ff11 	bl	8000348 <__aeabi_dsub>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	e9ca 2300 	strd	r2, r3, [sl]
 800b52e:	4620      	mov	r0, r4
 800b530:	4629      	mov	r1, r5
 800b532:	f7f4 ff09 	bl	8000348 <__aeabi_dsub>
 800b536:	a3a6      	add	r3, pc, #664	; (adr r3, 800b7d0 <__ieee754_rem_pio2+0x308>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f4 ff04 	bl	8000348 <__aeabi_dsub>
 800b540:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b544:	f04f 0b01 	mov.w	fp, #1
 800b548:	4658      	mov	r0, fp
 800b54a:	b00b      	add	sp, #44	; 0x2c
 800b54c:	ecbd 8b02 	vpop	{d8}
 800b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b554:	a3a0      	add	r3, pc, #640	; (adr r3, 800b7d8 <__ieee754_rem_pio2+0x310>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f7f4 fef5 	bl	8000348 <__aeabi_dsub>
 800b55e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b7e0 <__ieee754_rem_pio2+0x318>)
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	f7f4 feee 	bl	8000348 <__aeabi_dsub>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	e9ca 2300 	strd	r2, r3, [sl]
 800b574:	4620      	mov	r0, r4
 800b576:	4629      	mov	r1, r5
 800b578:	f7f4 fee6 	bl	8000348 <__aeabi_dsub>
 800b57c:	a398      	add	r3, pc, #608	; (adr r3, 800b7e0 <__ieee754_rem_pio2+0x318>)
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	e7db      	b.n	800b53c <__ieee754_rem_pio2+0x74>
 800b584:	f7f4 fee2 	bl	800034c <__adddf3>
 800b588:	45b0      	cmp	r8, r6
 800b58a:	4604      	mov	r4, r0
 800b58c:	460d      	mov	r5, r1
 800b58e:	d016      	beq.n	800b5be <__ieee754_rem_pio2+0xf6>
 800b590:	a38f      	add	r3, pc, #572	; (adr r3, 800b7d0 <__ieee754_rem_pio2+0x308>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	f7f4 fed9 	bl	800034c <__adddf3>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	e9ca 2300 	strd	r2, r3, [sl]
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7f4 fecf 	bl	8000348 <__aeabi_dsub>
 800b5aa:	a389      	add	r3, pc, #548	; (adr r3, 800b7d0 <__ieee754_rem_pio2+0x308>)
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	f7f4 fecc 	bl	800034c <__adddf3>
 800b5b4:	f04f 3bff 	mov.w	fp, #4294967295
 800b5b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b5bc:	e7c4      	b.n	800b548 <__ieee754_rem_pio2+0x80>
 800b5be:	a386      	add	r3, pc, #536	; (adr r3, 800b7d8 <__ieee754_rem_pio2+0x310>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fec2 	bl	800034c <__adddf3>
 800b5c8:	a385      	add	r3, pc, #532	; (adr r3, 800b7e0 <__ieee754_rem_pio2+0x318>)
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	f7f4 febb 	bl	800034c <__adddf3>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	e9ca 2300 	strd	r2, r3, [sl]
 800b5de:	4620      	mov	r0, r4
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	f7f4 feb1 	bl	8000348 <__aeabi_dsub>
 800b5e6:	a37e      	add	r3, pc, #504	; (adr r3, 800b7e0 <__ieee754_rem_pio2+0x318>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	e7e0      	b.n	800b5b0 <__ieee754_rem_pio2+0xe8>
 800b5ee:	4b87      	ldr	r3, [pc, #540]	; (800b80c <__ieee754_rem_pio2+0x344>)
 800b5f0:	4598      	cmp	r8, r3
 800b5f2:	f300 80d8 	bgt.w	800b7a6 <__ieee754_rem_pio2+0x2de>
 800b5f6:	f000 f96d 	bl	800b8d4 <fabs>
 800b5fa:	ec55 4b10 	vmov	r4, r5, d0
 800b5fe:	ee10 0a10 	vmov	r0, s0
 800b602:	a379      	add	r3, pc, #484	; (adr r3, 800b7e8 <__ieee754_rem_pio2+0x320>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	4629      	mov	r1, r5
 800b60a:	f7f5 f855 	bl	80006b8 <__aeabi_dmul>
 800b60e:	4b80      	ldr	r3, [pc, #512]	; (800b810 <__ieee754_rem_pio2+0x348>)
 800b610:	2200      	movs	r2, #0
 800b612:	f7f4 fe9b 	bl	800034c <__adddf3>
 800b616:	f7f5 faff 	bl	8000c18 <__aeabi_d2iz>
 800b61a:	4683      	mov	fp, r0
 800b61c:	f7f4 ffe2 	bl	80005e4 <__aeabi_i2d>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	ec43 2b18 	vmov	d8, r2, r3
 800b628:	a367      	add	r3, pc, #412	; (adr r3, 800b7c8 <__ieee754_rem_pio2+0x300>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f5 f843 	bl	80006b8 <__aeabi_dmul>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4620      	mov	r0, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f4 fe85 	bl	8000348 <__aeabi_dsub>
 800b63e:	a364      	add	r3, pc, #400	; (adr r3, 800b7d0 <__ieee754_rem_pio2+0x308>)
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	4606      	mov	r6, r0
 800b646:	460f      	mov	r7, r1
 800b648:	ec51 0b18 	vmov	r0, r1, d8
 800b64c:	f7f5 f834 	bl	80006b8 <__aeabi_dmul>
 800b650:	f1bb 0f1f 	cmp.w	fp, #31
 800b654:	4604      	mov	r4, r0
 800b656:	460d      	mov	r5, r1
 800b658:	dc0d      	bgt.n	800b676 <__ieee754_rem_pio2+0x1ae>
 800b65a:	4b6e      	ldr	r3, [pc, #440]	; (800b814 <__ieee754_rem_pio2+0x34c>)
 800b65c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b664:	4543      	cmp	r3, r8
 800b666:	d006      	beq.n	800b676 <__ieee754_rem_pio2+0x1ae>
 800b668:	4622      	mov	r2, r4
 800b66a:	462b      	mov	r3, r5
 800b66c:	4630      	mov	r0, r6
 800b66e:	4639      	mov	r1, r7
 800b670:	f7f4 fe6a 	bl	8000348 <__aeabi_dsub>
 800b674:	e00e      	b.n	800b694 <__ieee754_rem_pio2+0x1cc>
 800b676:	462b      	mov	r3, r5
 800b678:	4622      	mov	r2, r4
 800b67a:	4630      	mov	r0, r6
 800b67c:	4639      	mov	r1, r7
 800b67e:	f7f4 fe63 	bl	8000348 <__aeabi_dsub>
 800b682:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b686:	9303      	str	r3, [sp, #12]
 800b688:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b68c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b690:	2b10      	cmp	r3, #16
 800b692:	dc02      	bgt.n	800b69a <__ieee754_rem_pio2+0x1d2>
 800b694:	e9ca 0100 	strd	r0, r1, [sl]
 800b698:	e039      	b.n	800b70e <__ieee754_rem_pio2+0x246>
 800b69a:	a34f      	add	r3, pc, #316	; (adr r3, 800b7d8 <__ieee754_rem_pio2+0x310>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	ec51 0b18 	vmov	r0, r1, d8
 800b6a4:	f7f5 f808 	bl	80006b8 <__aeabi_dmul>
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	4639      	mov	r1, r7
 800b6b4:	f7f4 fe48 	bl	8000348 <__aeabi_dsub>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4680      	mov	r8, r0
 800b6be:	4689      	mov	r9, r1
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f4 fe40 	bl	8000348 <__aeabi_dsub>
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	f7f4 fe3c 	bl	8000348 <__aeabi_dsub>
 800b6d0:	a343      	add	r3, pc, #268	; (adr r3, 800b7e0 <__ieee754_rem_pio2+0x318>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	460d      	mov	r5, r1
 800b6da:	ec51 0b18 	vmov	r0, r1, d8
 800b6de:	f7f4 ffeb 	bl	80006b8 <__aeabi_dmul>
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	462b      	mov	r3, r5
 800b6e6:	f7f4 fe2f 	bl	8000348 <__aeabi_dsub>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f4 fe27 	bl	8000348 <__aeabi_dsub>
 800b6fa:	9a03      	ldr	r2, [sp, #12]
 800b6fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	2b31      	cmp	r3, #49	; 0x31
 800b704:	dc24      	bgt.n	800b750 <__ieee754_rem_pio2+0x288>
 800b706:	e9ca 0100 	strd	r0, r1, [sl]
 800b70a:	4646      	mov	r6, r8
 800b70c:	464f      	mov	r7, r9
 800b70e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b712:	4630      	mov	r0, r6
 800b714:	4642      	mov	r2, r8
 800b716:	464b      	mov	r3, r9
 800b718:	4639      	mov	r1, r7
 800b71a:	f7f4 fe15 	bl	8000348 <__aeabi_dsub>
 800b71e:	462b      	mov	r3, r5
 800b720:	4622      	mov	r2, r4
 800b722:	f7f4 fe11 	bl	8000348 <__aeabi_dsub>
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b72e:	f6bf af0b 	bge.w	800b548 <__ieee754_rem_pio2+0x80>
 800b732:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b736:	f8ca 3004 	str.w	r3, [sl, #4]
 800b73a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b73e:	f8ca 8000 	str.w	r8, [sl]
 800b742:	f8ca 0008 	str.w	r0, [sl, #8]
 800b746:	f8ca 300c 	str.w	r3, [sl, #12]
 800b74a:	f1cb 0b00 	rsb	fp, fp, #0
 800b74e:	e6fb      	b.n	800b548 <__ieee754_rem_pio2+0x80>
 800b750:	a327      	add	r3, pc, #156	; (adr r3, 800b7f0 <__ieee754_rem_pio2+0x328>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	ec51 0b18 	vmov	r0, r1, d8
 800b75a:	f7f4 ffad 	bl	80006b8 <__aeabi_dmul>
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4640      	mov	r0, r8
 800b768:	4649      	mov	r1, r9
 800b76a:	f7f4 fded 	bl	8000348 <__aeabi_dsub>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4606      	mov	r6, r0
 800b774:	460f      	mov	r7, r1
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f4 fde5 	bl	8000348 <__aeabi_dsub>
 800b77e:	4622      	mov	r2, r4
 800b780:	462b      	mov	r3, r5
 800b782:	f7f4 fde1 	bl	8000348 <__aeabi_dsub>
 800b786:	a31c      	add	r3, pc, #112	; (adr r3, 800b7f8 <__ieee754_rem_pio2+0x330>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	ec51 0b18 	vmov	r0, r1, d8
 800b794:	f7f4 ff90 	bl	80006b8 <__aeabi_dmul>
 800b798:	4622      	mov	r2, r4
 800b79a:	462b      	mov	r3, r5
 800b79c:	f7f4 fdd4 	bl	8000348 <__aeabi_dsub>
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	e760      	b.n	800b668 <__ieee754_rem_pio2+0x1a0>
 800b7a6:	4b1c      	ldr	r3, [pc, #112]	; (800b818 <__ieee754_rem_pio2+0x350>)
 800b7a8:	4598      	cmp	r8, r3
 800b7aa:	dd37      	ble.n	800b81c <__ieee754_rem_pio2+0x354>
 800b7ac:	ee10 2a10 	vmov	r2, s0
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	f7f4 fdc7 	bl	8000348 <__aeabi_dsub>
 800b7ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7be:	e9ca 0100 	strd	r0, r1, [sl]
 800b7c2:	e695      	b.n	800b4f0 <__ieee754_rem_pio2+0x28>
 800b7c4:	f3af 8000 	nop.w
 800b7c8:	54400000 	.word	0x54400000
 800b7cc:	3ff921fb 	.word	0x3ff921fb
 800b7d0:	1a626331 	.word	0x1a626331
 800b7d4:	3dd0b461 	.word	0x3dd0b461
 800b7d8:	1a600000 	.word	0x1a600000
 800b7dc:	3dd0b461 	.word	0x3dd0b461
 800b7e0:	2e037073 	.word	0x2e037073
 800b7e4:	3ba3198a 	.word	0x3ba3198a
 800b7e8:	6dc9c883 	.word	0x6dc9c883
 800b7ec:	3fe45f30 	.word	0x3fe45f30
 800b7f0:	2e000000 	.word	0x2e000000
 800b7f4:	3ba3198a 	.word	0x3ba3198a
 800b7f8:	252049c1 	.word	0x252049c1
 800b7fc:	397b839a 	.word	0x397b839a
 800b800:	3fe921fb 	.word	0x3fe921fb
 800b804:	4002d97b 	.word	0x4002d97b
 800b808:	3ff921fb 	.word	0x3ff921fb
 800b80c:	413921fb 	.word	0x413921fb
 800b810:	3fe00000 	.word	0x3fe00000
 800b814:	0801fb38 	.word	0x0801fb38
 800b818:	7fefffff 	.word	0x7fefffff
 800b81c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b820:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b824:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b828:	4620      	mov	r0, r4
 800b82a:	460d      	mov	r5, r1
 800b82c:	f7f5 f9f4 	bl	8000c18 <__aeabi_d2iz>
 800b830:	f7f4 fed8 	bl	80005e4 <__aeabi_i2d>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b840:	f7f4 fd82 	bl	8000348 <__aeabi_dsub>
 800b844:	4b21      	ldr	r3, [pc, #132]	; (800b8cc <__ieee754_rem_pio2+0x404>)
 800b846:	2200      	movs	r2, #0
 800b848:	f7f4 ff36 	bl	80006b8 <__aeabi_dmul>
 800b84c:	460d      	mov	r5, r1
 800b84e:	4604      	mov	r4, r0
 800b850:	f7f5 f9e2 	bl	8000c18 <__aeabi_d2iz>
 800b854:	f7f4 fec6 	bl	80005e4 <__aeabi_i2d>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4620      	mov	r0, r4
 800b85e:	4629      	mov	r1, r5
 800b860:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b864:	f7f4 fd70 	bl	8000348 <__aeabi_dsub>
 800b868:	4b18      	ldr	r3, [pc, #96]	; (800b8cc <__ieee754_rem_pio2+0x404>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	f7f4 ff24 	bl	80006b8 <__aeabi_dmul>
 800b870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b874:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b878:	2703      	movs	r7, #3
 800b87a:	2400      	movs	r4, #0
 800b87c:	2500      	movs	r5, #0
 800b87e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b882:	4622      	mov	r2, r4
 800b884:	462b      	mov	r3, r5
 800b886:	46b9      	mov	r9, r7
 800b888:	3f01      	subs	r7, #1
 800b88a:	f7f5 f97d 	bl	8000b88 <__aeabi_dcmpeq>
 800b88e:	2800      	cmp	r0, #0
 800b890:	d1f5      	bne.n	800b87e <__ieee754_rem_pio2+0x3b6>
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <__ieee754_rem_pio2+0x408>)
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	2302      	movs	r3, #2
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	4632      	mov	r2, r6
 800b89c:	464b      	mov	r3, r9
 800b89e:	4651      	mov	r1, sl
 800b8a0:	a804      	add	r0, sp, #16
 800b8a2:	f000 f821 	bl	800b8e8 <__kernel_rem_pio2>
 800b8a6:	9b02      	ldr	r3, [sp, #8]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	4683      	mov	fp, r0
 800b8ac:	f6bf ae4c 	bge.w	800b548 <__ieee754_rem_pio2+0x80>
 800b8b0:	e9da 2100 	ldrd	r2, r1, [sl]
 800b8b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8b8:	e9ca 2300 	strd	r2, r3, [sl]
 800b8bc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b8c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8c4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b8c8:	e73f      	b.n	800b74a <__ieee754_rem_pio2+0x282>
 800b8ca:	bf00      	nop
 800b8cc:	41700000 	.word	0x41700000
 800b8d0:	0801fbb8 	.word	0x0801fbb8

0800b8d4 <fabs>:
 800b8d4:	ec51 0b10 	vmov	r0, r1, d0
 800b8d8:	ee10 2a10 	vmov	r2, s0
 800b8dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8e0:	ec43 2b10 	vmov	d0, r2, r3
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <__kernel_rem_pio2>:
 800b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ec:	ed2d 8b02 	vpush	{d8}
 800b8f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b8f4:	f112 0f14 	cmn.w	r2, #20
 800b8f8:	9306      	str	r3, [sp, #24]
 800b8fa:	9104      	str	r1, [sp, #16]
 800b8fc:	4bc2      	ldr	r3, [pc, #776]	; (800bc08 <__kernel_rem_pio2+0x320>)
 800b8fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b900:	9009      	str	r0, [sp, #36]	; 0x24
 800b902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	9b06      	ldr	r3, [sp, #24]
 800b90a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b90e:	bfa8      	it	ge
 800b910:	1ed4      	subge	r4, r2, #3
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	bfb2      	itee	lt
 800b916:	2400      	movlt	r4, #0
 800b918:	2318      	movge	r3, #24
 800b91a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b91e:	f06f 0317 	mvn.w	r3, #23
 800b922:	fb04 3303 	mla	r3, r4, r3, r3
 800b926:	eb03 0a02 	add.w	sl, r3, r2
 800b92a:	9b00      	ldr	r3, [sp, #0]
 800b92c:	9a05      	ldr	r2, [sp, #20]
 800b92e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800bbf8 <__kernel_rem_pio2+0x310>
 800b932:	eb03 0802 	add.w	r8, r3, r2
 800b936:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b938:	1aa7      	subs	r7, r4, r2
 800b93a:	ae20      	add	r6, sp, #128	; 0x80
 800b93c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b940:	2500      	movs	r5, #0
 800b942:	4545      	cmp	r5, r8
 800b944:	dd13      	ble.n	800b96e <__kernel_rem_pio2+0x86>
 800b946:	9b06      	ldr	r3, [sp, #24]
 800b948:	aa20      	add	r2, sp, #128	; 0x80
 800b94a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b94e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b952:	f04f 0800 	mov.w	r8, #0
 800b956:	9b00      	ldr	r3, [sp, #0]
 800b958:	4598      	cmp	r8, r3
 800b95a:	dc31      	bgt.n	800b9c0 <__kernel_rem_pio2+0xd8>
 800b95c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800bbf8 <__kernel_rem_pio2+0x310>
 800b960:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b964:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b968:	462f      	mov	r7, r5
 800b96a:	2600      	movs	r6, #0
 800b96c:	e01b      	b.n	800b9a6 <__kernel_rem_pio2+0xbe>
 800b96e:	42ef      	cmn	r7, r5
 800b970:	d407      	bmi.n	800b982 <__kernel_rem_pio2+0x9a>
 800b972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b976:	f7f4 fe35 	bl	80005e4 <__aeabi_i2d>
 800b97a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b97e:	3501      	adds	r5, #1
 800b980:	e7df      	b.n	800b942 <__kernel_rem_pio2+0x5a>
 800b982:	ec51 0b18 	vmov	r0, r1, d8
 800b986:	e7f8      	b.n	800b97a <__kernel_rem_pio2+0x92>
 800b988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b98c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b990:	f7f4 fe92 	bl	80006b8 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b99c:	f7f4 fcd6 	bl	800034c <__adddf3>
 800b9a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9a4:	3601      	adds	r6, #1
 800b9a6:	9b05      	ldr	r3, [sp, #20]
 800b9a8:	429e      	cmp	r6, r3
 800b9aa:	f1a7 0708 	sub.w	r7, r7, #8
 800b9ae:	ddeb      	ble.n	800b988 <__kernel_rem_pio2+0xa0>
 800b9b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9b4:	f108 0801 	add.w	r8, r8, #1
 800b9b8:	ecab 7b02 	vstmia	fp!, {d7}
 800b9bc:	3508      	adds	r5, #8
 800b9be:	e7ca      	b.n	800b956 <__kernel_rem_pio2+0x6e>
 800b9c0:	9b00      	ldr	r3, [sp, #0]
 800b9c2:	aa0c      	add	r2, sp, #48	; 0x30
 800b9c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9ca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b9cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b9d0:	9c00      	ldr	r4, [sp, #0]
 800b9d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9d4:	00e3      	lsls	r3, r4, #3
 800b9d6:	9308      	str	r3, [sp, #32]
 800b9d8:	ab98      	add	r3, sp, #608	; 0x260
 800b9da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b9e2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800b9e6:	ab70      	add	r3, sp, #448	; 0x1c0
 800b9e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b9ec:	46c3      	mov	fp, r8
 800b9ee:	46a1      	mov	r9, r4
 800b9f0:	f1b9 0f00 	cmp.w	r9, #0
 800b9f4:	f1a5 0508 	sub.w	r5, r5, #8
 800b9f8:	dc77      	bgt.n	800baea <__kernel_rem_pio2+0x202>
 800b9fa:	ec47 6b10 	vmov	d0, r6, r7
 800b9fe:	4650      	mov	r0, sl
 800ba00:	f000 fac2 	bl	800bf88 <scalbn>
 800ba04:	ec57 6b10 	vmov	r6, r7, d0
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba0e:	ee10 0a10 	vmov	r0, s0
 800ba12:	4639      	mov	r1, r7
 800ba14:	f7f4 fe50 	bl	80006b8 <__aeabi_dmul>
 800ba18:	ec41 0b10 	vmov	d0, r0, r1
 800ba1c:	f000 fb34 	bl	800c088 <floor>
 800ba20:	4b7a      	ldr	r3, [pc, #488]	; (800bc0c <__kernel_rem_pio2+0x324>)
 800ba22:	ec51 0b10 	vmov	r0, r1, d0
 800ba26:	2200      	movs	r2, #0
 800ba28:	f7f4 fe46 	bl	80006b8 <__aeabi_dmul>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4630      	mov	r0, r6
 800ba32:	4639      	mov	r1, r7
 800ba34:	f7f4 fc88 	bl	8000348 <__aeabi_dsub>
 800ba38:	460f      	mov	r7, r1
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	f7f5 f8ec 	bl	8000c18 <__aeabi_d2iz>
 800ba40:	9002      	str	r0, [sp, #8]
 800ba42:	f7f4 fdcf 	bl	80005e4 <__aeabi_i2d>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	f7f4 fc7b 	bl	8000348 <__aeabi_dsub>
 800ba52:	f1ba 0f00 	cmp.w	sl, #0
 800ba56:	4606      	mov	r6, r0
 800ba58:	460f      	mov	r7, r1
 800ba5a:	dd6d      	ble.n	800bb38 <__kernel_rem_pio2+0x250>
 800ba5c:	1e61      	subs	r1, r4, #1
 800ba5e:	ab0c      	add	r3, sp, #48	; 0x30
 800ba60:	9d02      	ldr	r5, [sp, #8]
 800ba62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba66:	f1ca 0018 	rsb	r0, sl, #24
 800ba6a:	fa43 f200 	asr.w	r2, r3, r0
 800ba6e:	4415      	add	r5, r2
 800ba70:	4082      	lsls	r2, r0
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	aa0c      	add	r2, sp, #48	; 0x30
 800ba76:	9502      	str	r5, [sp, #8]
 800ba78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ba7c:	f1ca 0217 	rsb	r2, sl, #23
 800ba80:	fa43 fb02 	asr.w	fp, r3, r2
 800ba84:	f1bb 0f00 	cmp.w	fp, #0
 800ba88:	dd65      	ble.n	800bb56 <__kernel_rem_pio2+0x26e>
 800ba8a:	9b02      	ldr	r3, [sp, #8]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	3301      	adds	r3, #1
 800ba90:	9302      	str	r3, [sp, #8]
 800ba92:	4615      	mov	r5, r2
 800ba94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ba98:	4294      	cmp	r4, r2
 800ba9a:	f300 809f 	bgt.w	800bbdc <__kernel_rem_pio2+0x2f4>
 800ba9e:	f1ba 0f00 	cmp.w	sl, #0
 800baa2:	dd07      	ble.n	800bab4 <__kernel_rem_pio2+0x1cc>
 800baa4:	f1ba 0f01 	cmp.w	sl, #1
 800baa8:	f000 80c1 	beq.w	800bc2e <__kernel_rem_pio2+0x346>
 800baac:	f1ba 0f02 	cmp.w	sl, #2
 800bab0:	f000 80c7 	beq.w	800bc42 <__kernel_rem_pio2+0x35a>
 800bab4:	f1bb 0f02 	cmp.w	fp, #2
 800bab8:	d14d      	bne.n	800bb56 <__kernel_rem_pio2+0x26e>
 800baba:	4632      	mov	r2, r6
 800babc:	463b      	mov	r3, r7
 800babe:	4954      	ldr	r1, [pc, #336]	; (800bc10 <__kernel_rem_pio2+0x328>)
 800bac0:	2000      	movs	r0, #0
 800bac2:	f7f4 fc41 	bl	8000348 <__aeabi_dsub>
 800bac6:	4606      	mov	r6, r0
 800bac8:	460f      	mov	r7, r1
 800baca:	2d00      	cmp	r5, #0
 800bacc:	d043      	beq.n	800bb56 <__kernel_rem_pio2+0x26e>
 800bace:	4650      	mov	r0, sl
 800bad0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800bc00 <__kernel_rem_pio2+0x318>
 800bad4:	f000 fa58 	bl	800bf88 <scalbn>
 800bad8:	4630      	mov	r0, r6
 800bada:	4639      	mov	r1, r7
 800badc:	ec53 2b10 	vmov	r2, r3, d0
 800bae0:	f7f4 fc32 	bl	8000348 <__aeabi_dsub>
 800bae4:	4606      	mov	r6, r0
 800bae6:	460f      	mov	r7, r1
 800bae8:	e035      	b.n	800bb56 <__kernel_rem_pio2+0x26e>
 800baea:	4b4a      	ldr	r3, [pc, #296]	; (800bc14 <__kernel_rem_pio2+0x32c>)
 800baec:	2200      	movs	r2, #0
 800baee:	4630      	mov	r0, r6
 800baf0:	4639      	mov	r1, r7
 800baf2:	f7f4 fde1 	bl	80006b8 <__aeabi_dmul>
 800baf6:	f7f5 f88f 	bl	8000c18 <__aeabi_d2iz>
 800bafa:	f7f4 fd73 	bl	80005e4 <__aeabi_i2d>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	ec43 2b18 	vmov	d8, r2, r3
 800bb06:	4b44      	ldr	r3, [pc, #272]	; (800bc18 <__kernel_rem_pio2+0x330>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f7f4 fdd5 	bl	80006b8 <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	4639      	mov	r1, r7
 800bb16:	f7f4 fc17 	bl	8000348 <__aeabi_dsub>
 800bb1a:	f7f5 f87d 	bl	8000c18 <__aeabi_d2iz>
 800bb1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb22:	f84b 0b04 	str.w	r0, [fp], #4
 800bb26:	ec51 0b18 	vmov	r0, r1, d8
 800bb2a:	f7f4 fc0f 	bl	800034c <__adddf3>
 800bb2e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb32:	4606      	mov	r6, r0
 800bb34:	460f      	mov	r7, r1
 800bb36:	e75b      	b.n	800b9f0 <__kernel_rem_pio2+0x108>
 800bb38:	d106      	bne.n	800bb48 <__kernel_rem_pio2+0x260>
 800bb3a:	1e63      	subs	r3, r4, #1
 800bb3c:	aa0c      	add	r2, sp, #48	; 0x30
 800bb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb42:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800bb46:	e79d      	b.n	800ba84 <__kernel_rem_pio2+0x19c>
 800bb48:	4b34      	ldr	r3, [pc, #208]	; (800bc1c <__kernel_rem_pio2+0x334>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f7f5 f83a 	bl	8000bc4 <__aeabi_dcmpge>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d140      	bne.n	800bbd6 <__kernel_rem_pio2+0x2ee>
 800bb54:	4683      	mov	fp, r0
 800bb56:	2200      	movs	r2, #0
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	f7f5 f813 	bl	8000b88 <__aeabi_dcmpeq>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	f000 80c1 	beq.w	800bcea <__kernel_rem_pio2+0x402>
 800bb68:	1e65      	subs	r5, r4, #1
 800bb6a:	462b      	mov	r3, r5
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	9900      	ldr	r1, [sp, #0]
 800bb70:	428b      	cmp	r3, r1
 800bb72:	da6d      	bge.n	800bc50 <__kernel_rem_pio2+0x368>
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	f000 808a 	beq.w	800bc8e <__kernel_rem_pio2+0x3a6>
 800bb7a:	ab0c      	add	r3, sp, #48	; 0x30
 800bb7c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bb80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 80ae 	beq.w	800bce6 <__kernel_rem_pio2+0x3fe>
 800bb8a:	4650      	mov	r0, sl
 800bb8c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800bc00 <__kernel_rem_pio2+0x318>
 800bb90:	f000 f9fa 	bl	800bf88 <scalbn>
 800bb94:	1c6b      	adds	r3, r5, #1
 800bb96:	00da      	lsls	r2, r3, #3
 800bb98:	9205      	str	r2, [sp, #20]
 800bb9a:	ec57 6b10 	vmov	r6, r7, d0
 800bb9e:	aa70      	add	r2, sp, #448	; 0x1c0
 800bba0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800bc14 <__kernel_rem_pio2+0x32c>
 800bba4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800bba8:	462c      	mov	r4, r5
 800bbaa:	f04f 0800 	mov.w	r8, #0
 800bbae:	2c00      	cmp	r4, #0
 800bbb0:	f280 80d4 	bge.w	800bd5c <__kernel_rem_pio2+0x474>
 800bbb4:	462c      	mov	r4, r5
 800bbb6:	2c00      	cmp	r4, #0
 800bbb8:	f2c0 8102 	blt.w	800bdc0 <__kernel_rem_pio2+0x4d8>
 800bbbc:	4b18      	ldr	r3, [pc, #96]	; (800bc20 <__kernel_rem_pio2+0x338>)
 800bbbe:	461e      	mov	r6, r3
 800bbc0:	ab70      	add	r3, sp, #448	; 0x1c0
 800bbc2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800bbc6:	1b2b      	subs	r3, r5, r4
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	f04f 0a00 	mov.w	sl, #0
 800bbd0:	2700      	movs	r7, #0
 800bbd2:	9306      	str	r3, [sp, #24]
 800bbd4:	e0e6      	b.n	800bda4 <__kernel_rem_pio2+0x4bc>
 800bbd6:	f04f 0b02 	mov.w	fp, #2
 800bbda:	e756      	b.n	800ba8a <__kernel_rem_pio2+0x1a2>
 800bbdc:	f8d8 3000 	ldr.w	r3, [r8]
 800bbe0:	bb05      	cbnz	r5, 800bc24 <__kernel_rem_pio2+0x33c>
 800bbe2:	b123      	cbz	r3, 800bbee <__kernel_rem_pio2+0x306>
 800bbe4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bbe8:	f8c8 3000 	str.w	r3, [r8]
 800bbec:	2301      	movs	r3, #1
 800bbee:	3201      	adds	r2, #1
 800bbf0:	f108 0804 	add.w	r8, r8, #4
 800bbf4:	461d      	mov	r5, r3
 800bbf6:	e74f      	b.n	800ba98 <__kernel_rem_pio2+0x1b0>
	...
 800bc04:	3ff00000 	.word	0x3ff00000
 800bc08:	0801fd00 	.word	0x0801fd00
 800bc0c:	40200000 	.word	0x40200000
 800bc10:	3ff00000 	.word	0x3ff00000
 800bc14:	3e700000 	.word	0x3e700000
 800bc18:	41700000 	.word	0x41700000
 800bc1c:	3fe00000 	.word	0x3fe00000
 800bc20:	0801fcc0 	.word	0x0801fcc0
 800bc24:	1acb      	subs	r3, r1, r3
 800bc26:	f8c8 3000 	str.w	r3, [r8]
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	e7df      	b.n	800bbee <__kernel_rem_pio2+0x306>
 800bc2e:	1e62      	subs	r2, r4, #1
 800bc30:	ab0c      	add	r3, sp, #48	; 0x30
 800bc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc3a:	a90c      	add	r1, sp, #48	; 0x30
 800bc3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc40:	e738      	b.n	800bab4 <__kernel_rem_pio2+0x1cc>
 800bc42:	1e62      	subs	r2, r4, #1
 800bc44:	ab0c      	add	r3, sp, #48	; 0x30
 800bc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc4e:	e7f4      	b.n	800bc3a <__kernel_rem_pio2+0x352>
 800bc50:	a90c      	add	r1, sp, #48	; 0x30
 800bc52:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	e788      	b.n	800bb6e <__kernel_rem_pio2+0x286>
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bc62:	2900      	cmp	r1, #0
 800bc64:	d0fa      	beq.n	800bc5c <__kernel_rem_pio2+0x374>
 800bc66:	9a08      	ldr	r2, [sp, #32]
 800bc68:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800bc6c:	446a      	add	r2, sp
 800bc6e:	3a98      	subs	r2, #152	; 0x98
 800bc70:	9208      	str	r2, [sp, #32]
 800bc72:	9a06      	ldr	r2, [sp, #24]
 800bc74:	a920      	add	r1, sp, #128	; 0x80
 800bc76:	18a2      	adds	r2, r4, r2
 800bc78:	18e3      	adds	r3, r4, r3
 800bc7a:	f104 0801 	add.w	r8, r4, #1
 800bc7e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800bc82:	9302      	str	r3, [sp, #8]
 800bc84:	9b02      	ldr	r3, [sp, #8]
 800bc86:	4543      	cmp	r3, r8
 800bc88:	da04      	bge.n	800bc94 <__kernel_rem_pio2+0x3ac>
 800bc8a:	461c      	mov	r4, r3
 800bc8c:	e6a2      	b.n	800b9d4 <__kernel_rem_pio2+0xec>
 800bc8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc90:	2301      	movs	r3, #1
 800bc92:	e7e4      	b.n	800bc5e <__kernel_rem_pio2+0x376>
 800bc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc96:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bc9a:	f7f4 fca3 	bl	80005e4 <__aeabi_i2d>
 800bc9e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca4:	46ab      	mov	fp, r5
 800bca6:	461c      	mov	r4, r3
 800bca8:	f04f 0900 	mov.w	r9, #0
 800bcac:	2600      	movs	r6, #0
 800bcae:	2700      	movs	r7, #0
 800bcb0:	9b05      	ldr	r3, [sp, #20]
 800bcb2:	4599      	cmp	r9, r3
 800bcb4:	dd06      	ble.n	800bcc4 <__kernel_rem_pio2+0x3dc>
 800bcb6:	9b08      	ldr	r3, [sp, #32]
 800bcb8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bcbc:	f108 0801 	add.w	r8, r8, #1
 800bcc0:	9308      	str	r3, [sp, #32]
 800bcc2:	e7df      	b.n	800bc84 <__kernel_rem_pio2+0x39c>
 800bcc4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bcc8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bccc:	f7f4 fcf4 	bl	80006b8 <__aeabi_dmul>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fb38 	bl	800034c <__adddf3>
 800bcdc:	f109 0901 	add.w	r9, r9, #1
 800bce0:	4606      	mov	r6, r0
 800bce2:	460f      	mov	r7, r1
 800bce4:	e7e4      	b.n	800bcb0 <__kernel_rem_pio2+0x3c8>
 800bce6:	3d01      	subs	r5, #1
 800bce8:	e747      	b.n	800bb7a <__kernel_rem_pio2+0x292>
 800bcea:	ec47 6b10 	vmov	d0, r6, r7
 800bcee:	f1ca 0000 	rsb	r0, sl, #0
 800bcf2:	f000 f949 	bl	800bf88 <scalbn>
 800bcf6:	ec57 6b10 	vmov	r6, r7, d0
 800bcfa:	4ba0      	ldr	r3, [pc, #640]	; (800bf7c <__kernel_rem_pio2+0x694>)
 800bcfc:	ee10 0a10 	vmov	r0, s0
 800bd00:	2200      	movs	r2, #0
 800bd02:	4639      	mov	r1, r7
 800bd04:	f7f4 ff5e 	bl	8000bc4 <__aeabi_dcmpge>
 800bd08:	b1f8      	cbz	r0, 800bd4a <__kernel_rem_pio2+0x462>
 800bd0a:	4b9d      	ldr	r3, [pc, #628]	; (800bf80 <__kernel_rem_pio2+0x698>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4630      	mov	r0, r6
 800bd10:	4639      	mov	r1, r7
 800bd12:	f7f4 fcd1 	bl	80006b8 <__aeabi_dmul>
 800bd16:	f7f4 ff7f 	bl	8000c18 <__aeabi_d2iz>
 800bd1a:	4680      	mov	r8, r0
 800bd1c:	f7f4 fc62 	bl	80005e4 <__aeabi_i2d>
 800bd20:	4b96      	ldr	r3, [pc, #600]	; (800bf7c <__kernel_rem_pio2+0x694>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	f7f4 fcc8 	bl	80006b8 <__aeabi_dmul>
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7f4 fb0a 	bl	8000348 <__aeabi_dsub>
 800bd34:	f7f4 ff70 	bl	8000c18 <__aeabi_d2iz>
 800bd38:	1c65      	adds	r5, r4, #1
 800bd3a:	ab0c      	add	r3, sp, #48	; 0x30
 800bd3c:	f10a 0a18 	add.w	sl, sl, #24
 800bd40:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd44:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bd48:	e71f      	b.n	800bb8a <__kernel_rem_pio2+0x2a2>
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7f4 ff63 	bl	8000c18 <__aeabi_d2iz>
 800bd52:	ab0c      	add	r3, sp, #48	; 0x30
 800bd54:	4625      	mov	r5, r4
 800bd56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd5a:	e716      	b.n	800bb8a <__kernel_rem_pio2+0x2a2>
 800bd5c:	ab0c      	add	r3, sp, #48	; 0x30
 800bd5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bd62:	f7f4 fc3f 	bl	80005e4 <__aeabi_i2d>
 800bd66:	4632      	mov	r2, r6
 800bd68:	463b      	mov	r3, r7
 800bd6a:	f7f4 fca5 	bl	80006b8 <__aeabi_dmul>
 800bd6e:	4642      	mov	r2, r8
 800bd70:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bd74:	464b      	mov	r3, r9
 800bd76:	4630      	mov	r0, r6
 800bd78:	4639      	mov	r1, r7
 800bd7a:	f7f4 fc9d 	bl	80006b8 <__aeabi_dmul>
 800bd7e:	3c01      	subs	r4, #1
 800bd80:	4606      	mov	r6, r0
 800bd82:	460f      	mov	r7, r1
 800bd84:	e713      	b.n	800bbae <__kernel_rem_pio2+0x2c6>
 800bd86:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800bd8a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800bd8e:	f7f4 fc93 	bl	80006b8 <__aeabi_dmul>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4648      	mov	r0, r9
 800bd98:	4651      	mov	r1, sl
 800bd9a:	f7f4 fad7 	bl	800034c <__adddf3>
 800bd9e:	3701      	adds	r7, #1
 800bda0:	4681      	mov	r9, r0
 800bda2:	468a      	mov	sl, r1
 800bda4:	9b00      	ldr	r3, [sp, #0]
 800bda6:	429f      	cmp	r7, r3
 800bda8:	dc02      	bgt.n	800bdb0 <__kernel_rem_pio2+0x4c8>
 800bdaa:	9b06      	ldr	r3, [sp, #24]
 800bdac:	429f      	cmp	r7, r3
 800bdae:	ddea      	ble.n	800bd86 <__kernel_rem_pio2+0x49e>
 800bdb0:	9a06      	ldr	r2, [sp, #24]
 800bdb2:	ab48      	add	r3, sp, #288	; 0x120
 800bdb4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800bdb8:	e9c6 9a00 	strd	r9, sl, [r6]
 800bdbc:	3c01      	subs	r4, #1
 800bdbe:	e6fa      	b.n	800bbb6 <__kernel_rem_pio2+0x2ce>
 800bdc0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	dc0b      	bgt.n	800bdde <__kernel_rem_pio2+0x4f6>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	dc39      	bgt.n	800be3e <__kernel_rem_pio2+0x556>
 800bdca:	d05d      	beq.n	800be88 <__kernel_rem_pio2+0x5a0>
 800bdcc:	9b02      	ldr	r3, [sp, #8]
 800bdce:	f003 0007 	and.w	r0, r3, #7
 800bdd2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bdd6:	ecbd 8b02 	vpop	{d8}
 800bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdde:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d1f3      	bne.n	800bdcc <__kernel_rem_pio2+0x4e4>
 800bde4:	9b05      	ldr	r3, [sp, #20]
 800bde6:	9500      	str	r5, [sp, #0]
 800bde8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bdec:	eb0d 0403 	add.w	r4, sp, r3
 800bdf0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800bdf4:	46a2      	mov	sl, r4
 800bdf6:	9b00      	ldr	r3, [sp, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f1aa 0a08 	sub.w	sl, sl, #8
 800bdfe:	dc69      	bgt.n	800bed4 <__kernel_rem_pio2+0x5ec>
 800be00:	46aa      	mov	sl, r5
 800be02:	f1ba 0f01 	cmp.w	sl, #1
 800be06:	f1a4 0408 	sub.w	r4, r4, #8
 800be0a:	f300 8083 	bgt.w	800bf14 <__kernel_rem_pio2+0x62c>
 800be0e:	9c05      	ldr	r4, [sp, #20]
 800be10:	ab48      	add	r3, sp, #288	; 0x120
 800be12:	441c      	add	r4, r3
 800be14:	2000      	movs	r0, #0
 800be16:	2100      	movs	r1, #0
 800be18:	2d01      	cmp	r5, #1
 800be1a:	f300 809a 	bgt.w	800bf52 <__kernel_rem_pio2+0x66a>
 800be1e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800be22:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800be26:	f1bb 0f00 	cmp.w	fp, #0
 800be2a:	f040 8098 	bne.w	800bf5e <__kernel_rem_pio2+0x676>
 800be2e:	9b04      	ldr	r3, [sp, #16]
 800be30:	e9c3 7800 	strd	r7, r8, [r3]
 800be34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800be38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800be3c:	e7c6      	b.n	800bdcc <__kernel_rem_pio2+0x4e4>
 800be3e:	9e05      	ldr	r6, [sp, #20]
 800be40:	ab48      	add	r3, sp, #288	; 0x120
 800be42:	441e      	add	r6, r3
 800be44:	462c      	mov	r4, r5
 800be46:	2000      	movs	r0, #0
 800be48:	2100      	movs	r1, #0
 800be4a:	2c00      	cmp	r4, #0
 800be4c:	da33      	bge.n	800beb6 <__kernel_rem_pio2+0x5ce>
 800be4e:	f1bb 0f00 	cmp.w	fp, #0
 800be52:	d036      	beq.n	800bec2 <__kernel_rem_pio2+0x5da>
 800be54:	4602      	mov	r2, r0
 800be56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be5a:	9c04      	ldr	r4, [sp, #16]
 800be5c:	e9c4 2300 	strd	r2, r3, [r4]
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800be68:	f7f4 fa6e 	bl	8000348 <__aeabi_dsub>
 800be6c:	ae4a      	add	r6, sp, #296	; 0x128
 800be6e:	2401      	movs	r4, #1
 800be70:	42a5      	cmp	r5, r4
 800be72:	da29      	bge.n	800bec8 <__kernel_rem_pio2+0x5e0>
 800be74:	f1bb 0f00 	cmp.w	fp, #0
 800be78:	d002      	beq.n	800be80 <__kernel_rem_pio2+0x598>
 800be7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be7e:	4619      	mov	r1, r3
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800be86:	e7a1      	b.n	800bdcc <__kernel_rem_pio2+0x4e4>
 800be88:	9c05      	ldr	r4, [sp, #20]
 800be8a:	ab48      	add	r3, sp, #288	; 0x120
 800be8c:	441c      	add	r4, r3
 800be8e:	2000      	movs	r0, #0
 800be90:	2100      	movs	r1, #0
 800be92:	2d00      	cmp	r5, #0
 800be94:	da09      	bge.n	800beaa <__kernel_rem_pio2+0x5c2>
 800be96:	f1bb 0f00 	cmp.w	fp, #0
 800be9a:	d002      	beq.n	800bea2 <__kernel_rem_pio2+0x5ba>
 800be9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bea0:	4619      	mov	r1, r3
 800bea2:	9b04      	ldr	r3, [sp, #16]
 800bea4:	e9c3 0100 	strd	r0, r1, [r3]
 800bea8:	e790      	b.n	800bdcc <__kernel_rem_pio2+0x4e4>
 800beaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800beae:	f7f4 fa4d 	bl	800034c <__adddf3>
 800beb2:	3d01      	subs	r5, #1
 800beb4:	e7ed      	b.n	800be92 <__kernel_rem_pio2+0x5aa>
 800beb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800beba:	f7f4 fa47 	bl	800034c <__adddf3>
 800bebe:	3c01      	subs	r4, #1
 800bec0:	e7c3      	b.n	800be4a <__kernel_rem_pio2+0x562>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	e7c8      	b.n	800be5a <__kernel_rem_pio2+0x572>
 800bec8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800becc:	f7f4 fa3e 	bl	800034c <__adddf3>
 800bed0:	3401      	adds	r4, #1
 800bed2:	e7cd      	b.n	800be70 <__kernel_rem_pio2+0x588>
 800bed4:	e9da 8900 	ldrd	r8, r9, [sl]
 800bed8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bedc:	9b00      	ldr	r3, [sp, #0]
 800bede:	3b01      	subs	r3, #1
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	4632      	mov	r2, r6
 800bee4:	463b      	mov	r3, r7
 800bee6:	4640      	mov	r0, r8
 800bee8:	4649      	mov	r1, r9
 800beea:	f7f4 fa2f 	bl	800034c <__adddf3>
 800beee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4640      	mov	r0, r8
 800bef8:	4649      	mov	r1, r9
 800befa:	f7f4 fa25 	bl	8000348 <__aeabi_dsub>
 800befe:	4632      	mov	r2, r6
 800bf00:	463b      	mov	r3, r7
 800bf02:	f7f4 fa23 	bl	800034c <__adddf3>
 800bf06:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bf0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf0e:	ed8a 7b00 	vstr	d7, [sl]
 800bf12:	e770      	b.n	800bdf6 <__kernel_rem_pio2+0x50e>
 800bf14:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bf18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800bf1c:	4640      	mov	r0, r8
 800bf1e:	4632      	mov	r2, r6
 800bf20:	463b      	mov	r3, r7
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 fa12 	bl	800034c <__adddf3>
 800bf28:	e9cd 0100 	strd	r0, r1, [sp]
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4640      	mov	r0, r8
 800bf32:	4649      	mov	r1, r9
 800bf34:	f7f4 fa08 	bl	8000348 <__aeabi_dsub>
 800bf38:	4632      	mov	r2, r6
 800bf3a:	463b      	mov	r3, r7
 800bf3c:	f7f4 fa06 	bl	800034c <__adddf3>
 800bf40:	ed9d 7b00 	vldr	d7, [sp]
 800bf44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf48:	ed84 7b00 	vstr	d7, [r4]
 800bf4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf50:	e757      	b.n	800be02 <__kernel_rem_pio2+0x51a>
 800bf52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf56:	f7f4 f9f9 	bl	800034c <__adddf3>
 800bf5a:	3d01      	subs	r5, #1
 800bf5c:	e75c      	b.n	800be18 <__kernel_rem_pio2+0x530>
 800bf5e:	9b04      	ldr	r3, [sp, #16]
 800bf60:	9a04      	ldr	r2, [sp, #16]
 800bf62:	601f      	str	r7, [r3, #0]
 800bf64:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bf68:	605c      	str	r4, [r3, #4]
 800bf6a:	609d      	str	r5, [r3, #8]
 800bf6c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bf70:	60d3      	str	r3, [r2, #12]
 800bf72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf76:	6110      	str	r0, [r2, #16]
 800bf78:	6153      	str	r3, [r2, #20]
 800bf7a:	e727      	b.n	800bdcc <__kernel_rem_pio2+0x4e4>
 800bf7c:	41700000 	.word	0x41700000
 800bf80:	3e700000 	.word	0x3e700000
 800bf84:	00000000 	.word	0x00000000

0800bf88 <scalbn>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	ec55 4b10 	vmov	r4, r5, d0
 800bf8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bf92:	4606      	mov	r6, r0
 800bf94:	462b      	mov	r3, r5
 800bf96:	b999      	cbnz	r1, 800bfc0 <scalbn+0x38>
 800bf98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf9c:	4323      	orrs	r3, r4
 800bf9e:	d03f      	beq.n	800c020 <scalbn+0x98>
 800bfa0:	4b35      	ldr	r3, [pc, #212]	; (800c078 <scalbn+0xf0>)
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	ee10 0a10 	vmov	r0, s0
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f7f4 fb85 	bl	80006b8 <__aeabi_dmul>
 800bfae:	4b33      	ldr	r3, [pc, #204]	; (800c07c <scalbn+0xf4>)
 800bfb0:	429e      	cmp	r6, r3
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	da10      	bge.n	800bfda <scalbn+0x52>
 800bfb8:	a327      	add	r3, pc, #156	; (adr r3, 800c058 <scalbn+0xd0>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	e01f      	b.n	800c000 <scalbn+0x78>
 800bfc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bfc4:	4291      	cmp	r1, r2
 800bfc6:	d10c      	bne.n	800bfe2 <scalbn+0x5a>
 800bfc8:	ee10 2a10 	vmov	r2, s0
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f7f4 f9bc 	bl	800034c <__adddf3>
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	460d      	mov	r5, r1
 800bfd8:	e022      	b.n	800c020 <scalbn+0x98>
 800bfda:	460b      	mov	r3, r1
 800bfdc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bfe0:	3936      	subs	r1, #54	; 0x36
 800bfe2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bfe6:	4296      	cmp	r6, r2
 800bfe8:	dd0d      	ble.n	800c006 <scalbn+0x7e>
 800bfea:	2d00      	cmp	r5, #0
 800bfec:	a11c      	add	r1, pc, #112	; (adr r1, 800c060 <scalbn+0xd8>)
 800bfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bff2:	da02      	bge.n	800bffa <scalbn+0x72>
 800bff4:	a11c      	add	r1, pc, #112	; (adr r1, 800c068 <scalbn+0xe0>)
 800bff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bffa:	a319      	add	r3, pc, #100	; (adr r3, 800c060 <scalbn+0xd8>)
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f7f4 fb5a 	bl	80006b8 <__aeabi_dmul>
 800c004:	e7e6      	b.n	800bfd4 <scalbn+0x4c>
 800c006:	1872      	adds	r2, r6, r1
 800c008:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c00c:	428a      	cmp	r2, r1
 800c00e:	dcec      	bgt.n	800bfea <scalbn+0x62>
 800c010:	2a00      	cmp	r2, #0
 800c012:	dd08      	ble.n	800c026 <scalbn+0x9e>
 800c014:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c018:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c01c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c020:	ec45 4b10 	vmov	d0, r4, r5
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c02a:	da08      	bge.n	800c03e <scalbn+0xb6>
 800c02c:	2d00      	cmp	r5, #0
 800c02e:	a10a      	add	r1, pc, #40	; (adr r1, 800c058 <scalbn+0xd0>)
 800c030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c034:	dac0      	bge.n	800bfb8 <scalbn+0x30>
 800c036:	a10e      	add	r1, pc, #56	; (adr r1, 800c070 <scalbn+0xe8>)
 800c038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c03c:	e7bc      	b.n	800bfb8 <scalbn+0x30>
 800c03e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c042:	3236      	adds	r2, #54	; 0x36
 800c044:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c048:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c04c:	4620      	mov	r0, r4
 800c04e:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <scalbn+0xf8>)
 800c050:	2200      	movs	r2, #0
 800c052:	e7d5      	b.n	800c000 <scalbn+0x78>
 800c054:	f3af 8000 	nop.w
 800c058:	c2f8f359 	.word	0xc2f8f359
 800c05c:	01a56e1f 	.word	0x01a56e1f
 800c060:	8800759c 	.word	0x8800759c
 800c064:	7e37e43c 	.word	0x7e37e43c
 800c068:	8800759c 	.word	0x8800759c
 800c06c:	fe37e43c 	.word	0xfe37e43c
 800c070:	c2f8f359 	.word	0xc2f8f359
 800c074:	81a56e1f 	.word	0x81a56e1f
 800c078:	43500000 	.word	0x43500000
 800c07c:	ffff3cb0 	.word	0xffff3cb0
 800c080:	3c900000 	.word	0x3c900000
 800c084:	00000000 	.word	0x00000000

0800c088 <floor>:
 800c088:	ec51 0b10 	vmov	r0, r1, d0
 800c08c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c098:	2e13      	cmp	r6, #19
 800c09a:	ee10 5a10 	vmov	r5, s0
 800c09e:	ee10 8a10 	vmov	r8, s0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	dc31      	bgt.n	800c10a <floor+0x82>
 800c0a6:	2e00      	cmp	r6, #0
 800c0a8:	da14      	bge.n	800c0d4 <floor+0x4c>
 800c0aa:	a333      	add	r3, pc, #204	; (adr r3, 800c178 <floor+0xf0>)
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 f94c 	bl	800034c <__adddf3>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f7f4 fd8e 	bl	8000bd8 <__aeabi_dcmpgt>
 800c0bc:	b138      	cbz	r0, 800c0ce <floor+0x46>
 800c0be:	2c00      	cmp	r4, #0
 800c0c0:	da53      	bge.n	800c16a <floor+0xe2>
 800c0c2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c0c6:	4325      	orrs	r5, r4
 800c0c8:	d052      	beq.n	800c170 <floor+0xe8>
 800c0ca:	4c2d      	ldr	r4, [pc, #180]	; (800c180 <floor+0xf8>)
 800c0cc:	2500      	movs	r5, #0
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	e024      	b.n	800c11e <floor+0x96>
 800c0d4:	4f2b      	ldr	r7, [pc, #172]	; (800c184 <floor+0xfc>)
 800c0d6:	4137      	asrs	r7, r6
 800c0d8:	ea01 0307 	and.w	r3, r1, r7
 800c0dc:	4303      	orrs	r3, r0
 800c0de:	d01e      	beq.n	800c11e <floor+0x96>
 800c0e0:	a325      	add	r3, pc, #148	; (adr r3, 800c178 <floor+0xf0>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	f7f4 f931 	bl	800034c <__adddf3>
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f7f4 fd73 	bl	8000bd8 <__aeabi_dcmpgt>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d0eb      	beq.n	800c0ce <floor+0x46>
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	bfbe      	ittt	lt
 800c0fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c0fe:	4133      	asrlt	r3, r6
 800c100:	18e4      	addlt	r4, r4, r3
 800c102:	ea24 0407 	bic.w	r4, r4, r7
 800c106:	2500      	movs	r5, #0
 800c108:	e7e1      	b.n	800c0ce <floor+0x46>
 800c10a:	2e33      	cmp	r6, #51	; 0x33
 800c10c:	dd0b      	ble.n	800c126 <floor+0x9e>
 800c10e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c112:	d104      	bne.n	800c11e <floor+0x96>
 800c114:	ee10 2a10 	vmov	r2, s0
 800c118:	460b      	mov	r3, r1
 800c11a:	f7f4 f917 	bl	800034c <__adddf3>
 800c11e:	ec41 0b10 	vmov	d0, r0, r1
 800c122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c126:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c12a:	f04f 37ff 	mov.w	r7, #4294967295
 800c12e:	40df      	lsrs	r7, r3
 800c130:	4238      	tst	r0, r7
 800c132:	d0f4      	beq.n	800c11e <floor+0x96>
 800c134:	a310      	add	r3, pc, #64	; (adr r3, 800c178 <floor+0xf0>)
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f7f4 f907 	bl	800034c <__adddf3>
 800c13e:	2200      	movs	r2, #0
 800c140:	2300      	movs	r3, #0
 800c142:	f7f4 fd49 	bl	8000bd8 <__aeabi_dcmpgt>
 800c146:	2800      	cmp	r0, #0
 800c148:	d0c1      	beq.n	800c0ce <floor+0x46>
 800c14a:	2c00      	cmp	r4, #0
 800c14c:	da0a      	bge.n	800c164 <floor+0xdc>
 800c14e:	2e14      	cmp	r6, #20
 800c150:	d101      	bne.n	800c156 <floor+0xce>
 800c152:	3401      	adds	r4, #1
 800c154:	e006      	b.n	800c164 <floor+0xdc>
 800c156:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c15a:	2301      	movs	r3, #1
 800c15c:	40b3      	lsls	r3, r6
 800c15e:	441d      	add	r5, r3
 800c160:	45a8      	cmp	r8, r5
 800c162:	d8f6      	bhi.n	800c152 <floor+0xca>
 800c164:	ea25 0507 	bic.w	r5, r5, r7
 800c168:	e7b1      	b.n	800c0ce <floor+0x46>
 800c16a:	2500      	movs	r5, #0
 800c16c:	462c      	mov	r4, r5
 800c16e:	e7ae      	b.n	800c0ce <floor+0x46>
 800c170:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c174:	e7ab      	b.n	800c0ce <floor+0x46>
 800c176:	bf00      	nop
 800c178:	8800759c 	.word	0x8800759c
 800c17c:	7e37e43c 	.word	0x7e37e43c
 800c180:	bff00000 	.word	0xbff00000
 800c184:	000fffff 	.word	0x000fffff

0800c188 <_init>:
 800c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18a:	bf00      	nop
 800c18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18e:	bc08      	pop	{r3}
 800c190:	469e      	mov	lr, r3
 800c192:	4770      	bx	lr

0800c194 <_fini>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	bf00      	nop
 800c198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19a:	bc08      	pop	{r3}
 800c19c:	469e      	mov	lr, r3
 800c19e:	4770      	bx	lr
